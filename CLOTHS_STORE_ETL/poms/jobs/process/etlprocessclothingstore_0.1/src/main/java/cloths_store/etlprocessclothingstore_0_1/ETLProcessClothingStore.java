// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package cloths_store.etlprocessclothingstore_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: ETLProcessClothingStore Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status
 */
public class ETLProcessClothingStore implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

		// if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if (NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "ETLProcessClothingStore";
	private final String projectName = "CLOTHS_STORE";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	public void setDataSourceReferences(List serviceReferences) throws Exception {

		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();

		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils
				.getServices(serviceReferences, javax.sql.DataSource.class).entrySet()) {
			dataSources.put(entry.getKey(), entry.getValue());
			talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					ETLProcessClothingStore.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(ETLProcessClothingStore.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_12_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_13_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_15_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_13_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_16_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_17_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_18_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_18_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_18_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_18_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_18_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_14_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_18_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputExcel_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputExcel_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputJSON_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputJSON_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputJSON_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputJSON_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputJSON_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row49_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row50_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row22_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row32_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row28_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row16_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_9_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_15_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_18_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputExcel_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputExcel_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputJSON_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputJSON_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputJSON_5_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class promotions_outStruct implements routines.system.IPersistableRow<promotions_outStruct> {
		final static byte[] commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];
		static byte[] commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];

		public Integer PROMOID;

		public Integer getPROMOID() {
			return this.PROMOID;
		}

		public String PROMONAME;

		public String getPROMONAME() {
			return this.PROMONAME;
		}

		public Float DISCOUNTRATE;

		public Float getDISCOUNTRATE() {
			return this.DISCOUNTRATE;
		}

		public java.util.Date STARTDATE;

		public java.util.Date getSTARTDATE() {
			return this.STARTDATE;
		}

		public java.util.Date ENDDATE;

		public java.util.Date getENDDATE() {
			return this.ENDDATE;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length) {
					if (length < 1024 && commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length == 0) {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[1024];
					} else {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length);
				strReturn = new String(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length) {
					if (length < 1024 && commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length == 0) {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[1024];
					} else {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length);
				strReturn = new String(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.PROMOID = readInteger(dis);

					this.PROMONAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.DISCOUNTRATE = null;
					} else {
						this.DISCOUNTRATE = dis.readFloat();
					}

					this.STARTDATE = readDate(dis);

					this.ENDDATE = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.PROMOID = readInteger(dis);

					this.PROMONAME = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.DISCOUNTRATE = null;
					} else {
						this.DISCOUNTRATE = dis.readFloat();
					}

					this.STARTDATE = readDate(dis);

					this.ENDDATE = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.PROMOID, dos);

				// String

				writeString(this.PROMONAME, dos);

				// Float

				if (this.DISCOUNTRATE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DISCOUNTRATE);
				}

				// java.util.Date

				writeDate(this.STARTDATE, dos);

				// java.util.Date

				writeDate(this.ENDDATE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.PROMOID, dos);

				// String

				writeString(this.PROMONAME, dos);

				// Float

				if (this.DISCOUNTRATE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DISCOUNTRATE);
				}

				// java.util.Date

				writeDate(this.STARTDATE, dos);

				// java.util.Date

				writeDate(this.ENDDATE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PROMOID=" + String.valueOf(PROMOID));
			sb.append(",PROMONAME=" + PROMONAME);
			sb.append(",DISCOUNTRATE=" + String.valueOf(DISCOUNTRATE));
			sb.append(",STARTDATE=" + String.valueOf(STARTDATE));
			sb.append(",ENDDATE=" + String.valueOf(ENDDATE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(promotions_outStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];
		static byte[] commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];

		public int PromoID;

		public int getPromoID() {
			return this.PromoID;
		}

		public java.util.Date StartTime;

		public java.util.Date getStartTime() {
			return this.StartTime;
		}

		public java.util.Date EndTime;

		public java.util.Date getEndTime() {
			return this.EndTime;
		}

		public BigDecimal Percentage;

		public BigDecimal getPercentage() {
			return this.Percentage;
		}

		public String PromotionName;

		public String getPromotionName() {
			return this.PromotionName;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length) {
					if (length < 1024 && commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length == 0) {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[1024];
					} else {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length);
				strReturn = new String(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length) {
					if (length < 1024 && commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length == 0) {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[1024];
					} else {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length);
				strReturn = new String(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.PromoID = dis.readInt();

					this.StartTime = readDate(dis);

					this.EndTime = readDate(dis);

					this.Percentage = (BigDecimal) dis.readObject();

					this.PromotionName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.PromoID = dis.readInt();

					this.StartTime = readDate(dis);

					this.EndTime = readDate(dis);

					this.Percentage = (BigDecimal) dis.readObject();

					this.PromotionName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.PromoID);

				// java.util.Date

				writeDate(this.StartTime, dos);

				// java.util.Date

				writeDate(this.EndTime, dos);

				// BigDecimal

				dos.writeObject(this.Percentage);

				// String

				writeString(this.PromotionName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.PromoID);

				// java.util.Date

				writeDate(this.StartTime, dos);

				// java.util.Date

				writeDate(this.EndTime, dos);

				// BigDecimal

				dos.writeObject(this.Percentage);

				// String

				writeString(this.PromotionName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PromoID=" + String.valueOf(PromoID));
			sb.append(",StartTime=" + String.valueOf(StartTime));
			sb.append(",EndTime=" + String.valueOf(EndTime));
			sb.append(",Percentage=" + String.valueOf(Percentage));
			sb.append(",PromotionName=" + PromotionName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				promotions_outStruct promotions_out = new promotions_outStruct();

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "promotions_out");
				}

				int tos_count_tDBOutput_1 = 0;

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int tmp_batchUpdateCount_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;
				int rowsToCommitCount_tDBOutput_1 = 0;
				int rejectedCount_tDBOutput_1 = 0;

				boolean whetherReject_tDBOutput_1 = false;

				java.sql.Connection conn_tDBOutput_1 = null;

				// optional table
				String dbschema_tDBOutput_1 = null;
				String tableName_tDBOutput_1 = null;
				String driverClass_tDBOutput_1 = "oracle.jdbc.OracleDriver";

				java.lang.Class.forName(driverClass_tDBOutput_1);
				String url_tDBOutput_1 = null;
				url_tDBOutput_1 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + "localhost"
						+ ")(port=" + "1521" + "))(connect_data=(service_name=" + "XEPDB1" + ")))";
				String dbUser_tDBOutput_1 = "system";

				final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:zMGhU+VjnlyTrMEtVuROEs+T3IQ2wO9n/ihI2F07ZOZY24pi1oY=");

				String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;
				dbschema_tDBOutput_1 = "";

				conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1, dbUser_tDBOutput_1,
						dbPwd_tDBOutput_1);
				resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
				conn_tDBOutput_1.setAutoCommit(false);
				int commitEvery_tDBOutput_1 = 10000;
				int commitCounter_tDBOutput_1 = 0;
				int batchSize_tDBOutput_1 = 10000;
				int batchSizeCounter_tDBOutput_1 = 0;
				int count_tDBOutput_1 = 0;

				if (dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
					tableName_tDBOutput_1 = ("DIM_PROMOTIONS");
				} else {
					tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "." + ("DIM_PROMOTIONS");
				}
				String insert_tDBOutput_1 = "INSERT INTO " + tableName_tDBOutput_1
						+ " (PROMOID,PROMONAME,DISCOUNTRATE,STARTDATE,ENDDATE) VALUES (?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				promotions_outStruct promotions_out_tmp = new promotions_outStruct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				java.util.Calendar calendar_tDBInput_1 = java.util.Calendar.getInstance();
				calendar_tDBInput_1.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_1 = calendar_tDBInput_1.getTime();
				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "com.mysql.cj.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = "root";

				final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:vFN3tTznAK9HbsAxI6D7GiZ41G3PzGB2mCMjNCuaQcfRFOZi");

				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;

				String properties_tDBInput_1 = "noDatetimeStringSync=true&enabledTLSProtocols=TLSv1.2,TLSv1.1,TLSv1";
				if (properties_tDBInput_1 == null || properties_tDBInput_1.trim().length() == 0) {
					properties_tDBInput_1 = "";
				}
				String url_tDBInput_1 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "clothing_storeDB" + "?"
						+ properties_tDBInput_1;

				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1, dbUser_tDBInput_1,
						dbPwd_tDBInput_1);

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

				String dbquery_tDBInput_1 = "SELECT \n  `promotions`.`PromoID`, \n  `promotions`.`StartTime`, \n  `promotions`.`EndTime`, \n  `promotions`.`Percentage`,"
						+ " \n  `promotions`.`PromotionName`\nFROM `promotions`";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							row1.PromoID = 0;
						} else {

							row1.PromoID = rs_tDBInput_1.getInt(1);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 2) {
							row1.StartTime = null;
						} else {

							if (rs_tDBInput_1.getString(2) != null) {
								String dateString_tDBInput_1 = rs_tDBInput_1.getString(2);
								if (!("0000-00-00").equals(dateString_tDBInput_1)
										&& !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
									row1.StartTime = rs_tDBInput_1.getTimestamp(2);
								} else {
									row1.StartTime = (java.util.Date) year0_tDBInput_1.clone();
								}
							} else {
								row1.StartTime = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 3) {
							row1.EndTime = null;
						} else {

							if (rs_tDBInput_1.getString(3) != null) {
								String dateString_tDBInput_1 = rs_tDBInput_1.getString(3);
								if (!("0000-00-00").equals(dateString_tDBInput_1)
										&& !("0000-00-00 00:00:00").equals(dateString_tDBInput_1)) {
									row1.EndTime = rs_tDBInput_1.getTimestamp(3);
								} else {
									row1.EndTime = (java.util.Date) year0_tDBInput_1.clone();
								}
							} else {
								row1.EndTime = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 4) {
							row1.Percentage = null;
						} else {

							row1.Percentage = rs_tDBInput_1.getBigDecimal(4);
							if (rs_tDBInput_1.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 5) {
							row1.PromotionName = null;
						} else {

							row1.PromotionName = routines.system.JDBCUtil.getString(rs_tDBInput_1, 5, false);
						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row1"

							);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
							// ###############################
							// # Output tables

							promotions_out = null;

// # Output table : 'promotions_out'
							promotions_out_tmp.PROMOID = row1.PromoID;
							promotions_out_tmp.PROMONAME = row1.PromotionName;
							promotions_out_tmp.DISCOUNTRATE = row1.Percentage != null
									? row1.Percentage.divide(new java.math.BigDecimal("100")).floatValue()
									: null;
							promotions_out_tmp.STARTDATE = row1.StartTime;
							promotions_out_tmp.ENDDATE = row1.EndTime;
							promotions_out = promotions_out_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */

						/**
						 * [tMap_1 process_data_begin ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_begin ] stop
						 */
// Start of branch "promotions_out"
						if (promotions_out != null) {

							/**
							 * [tDBOutput_1 main ] start
							 */

							currentComponent = "tDBOutput_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "promotions_out"

								);
							}

							whetherReject_tDBOutput_1 = false;
							if (promotions_out.PROMOID == null) {
								pstmt_tDBOutput_1.setNull(1, java.sql.Types.INTEGER);
							} else {
								pstmt_tDBOutput_1.setInt(1, promotions_out.PROMOID);
							}

							if (promotions_out.PROMONAME == null) {
								pstmt_tDBOutput_1.setNull(2, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(2, promotions_out.PROMONAME);
							}

							if (promotions_out.DISCOUNTRATE == null) {
								pstmt_tDBOutput_1.setNull(3, java.sql.Types.FLOAT);
							} else {
								pstmt_tDBOutput_1.setFloat(3, promotions_out.DISCOUNTRATE);
							}

							if (promotions_out.STARTDATE != null) {
								pstmt_tDBOutput_1.setObject(4,
										new java.sql.Timestamp(promotions_out.STARTDATE.getTime()),
										java.sql.Types.DATE);
							} else {
								pstmt_tDBOutput_1.setNull(4, java.sql.Types.DATE);
							}

							if (promotions_out.ENDDATE != null) {
								pstmt_tDBOutput_1.setObject(5, new java.sql.Timestamp(promotions_out.ENDDATE.getTime()),
										java.sql.Types.DATE);
							} else {
								pstmt_tDBOutput_1.setNull(5, java.sql.Types.DATE);
							}

							pstmt_tDBOutput_1.addBatch();
							nb_line_tDBOutput_1++;
							batchSizeCounter_tDBOutput_1++;
							if (batchSize_tDBOutput_1 > 0 && batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1) {
								try {
									pstmt_tDBOutput_1.executeBatch();
								} catch (java.sql.BatchUpdateException e_tDBOutput_1) {
									globalMap.put("tDBOutput_1_ERROR_MESSAGE", e_tDBOutput_1.getMessage());
									java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),
											sqle_tDBOutput_1 = null;
									String errormessage_tDBOutput_1;
									if (ne_tDBOutput_1 != null) {
										// build new exception to provide the original cause
										sqle_tDBOutput_1 = new java.sql.SQLException(
												e_tDBOutput_1.getMessage() + "\ncaused by: "
														+ ne_tDBOutput_1.getMessage(),
												ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(),
												ne_tDBOutput_1);
										errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
									} else {
										errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
									}

									System.err.println(errormessage_tDBOutput_1);

								}
								tmp_batchUpdateCount_tDBOutput_1 = pstmt_tDBOutput_1.getUpdateCount();
								insertedCount_tDBOutput_1 += (tmp_batchUpdateCount_tDBOutput_1 != -1
										? tmp_batchUpdateCount_tDBOutput_1
										: 0);
								rowsToCommitCount_tDBOutput_1 += (tmp_batchUpdateCount_tDBOutput_1 != -1
										? tmp_batchUpdateCount_tDBOutput_1
										: 0);
								batchSizeCounter_tDBOutput_1 = 0;
							}
							commitCounter_tDBOutput_1++;
							if (commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {
								if (batchSizeCounter_tDBOutput_1 > 0) {
									try {
										pstmt_tDBOutput_1.executeBatch();
									} catch (java.sql.BatchUpdateException e_tDBOutput_1) {
										globalMap.put("tDBOutput_1_ERROR_MESSAGE", e_tDBOutput_1.getMessage());
										java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),
												sqle_tDBOutput_1 = null;
										String errormessage_tDBOutput_1;
										if (ne_tDBOutput_1 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_1 = new java.sql.SQLException(
													e_tDBOutput_1.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_1.getMessage(),
													ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(),
													ne_tDBOutput_1);
											errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
										} else {
											errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
										}

										System.err.println(errormessage_tDBOutput_1);

									}
									tmp_batchUpdateCount_tDBOutput_1 = pstmt_tDBOutput_1.getUpdateCount();
									insertedCount_tDBOutput_1 += (tmp_batchUpdateCount_tDBOutput_1 != -1
											? tmp_batchUpdateCount_tDBOutput_1
											: 0);
									rowsToCommitCount_tDBOutput_1 += (tmp_batchUpdateCount_tDBOutput_1 != -1
											? tmp_batchUpdateCount_tDBOutput_1
											: 0);
								}
								if (rowsToCommitCount_tDBOutput_1 != 0) {

								}
								conn_tDBOutput_1.commit();
								if (rowsToCommitCount_tDBOutput_1 != 0) {

									rowsToCommitCount_tDBOutput_1 = 0;
								}
								commitCounter_tDBOutput_1 = 0;
								batchSizeCounter_tDBOutput_1 = 0;
							}

							tos_count_tDBOutput_1++;

							/**
							 * [tDBOutput_1 main ] stop
							 */

							/**
							 * [tDBOutput_1 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_1";

							/**
							 * [tDBOutput_1 process_data_begin ] stop
							 */

							/**
							 * [tDBOutput_1 process_data_end ] start
							 */

							currentComponent = "tDBOutput_1";

							/**
							 * [tDBOutput_1 process_data_end ] stop
							 */

						} // End of branch "promotions_out"

						/**
						 * [tMap_1 process_data_end ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					if (stmt_tDBInput_1 != null) {
						stmt_tDBInput_1.close();
					}
					if (conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {

						conn_tDBInput_1.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}

				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				if (batchSizeCounter_tDBOutput_1 > 0) {
					try {
						if (pstmt_tDBOutput_1 != null) {

							pstmt_tDBOutput_1.executeBatch();

						}
					} catch (java.sql.BatchUpdateException e_tDBOutput_1) {
						globalMap.put("tDBOutput_1_ERROR_MESSAGE", e_tDBOutput_1.getMessage());
						java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),
								sqle_tDBOutput_1 = null;
						String errormessage_tDBOutput_1;
						if (ne_tDBOutput_1 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_1 = new java.sql.SQLException(
									e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(),
									ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
							errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
						} else {
							errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
						}

						System.err.println(errormessage_tDBOutput_1);

					}
					if (pstmt_tDBOutput_1 != null) {
						tmp_batchUpdateCount_tDBOutput_1 = pstmt_tDBOutput_1.getUpdateCount();

						insertedCount_tDBOutput_1

								+= (tmp_batchUpdateCount_tDBOutput_1 != -1 ? tmp_batchUpdateCount_tDBOutput_1 : 0);
						rowsToCommitCount_tDBOutput_1 += (tmp_batchUpdateCount_tDBOutput_1 != -1
								? tmp_batchUpdateCount_tDBOutput_1
								: 0);
					}
				}
				if (pstmt_tDBOutput_1 != null) {

					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");

				}
				resourceMap.put("statementClosed_tDBOutput_1", true);
				if (commitCounter_tDBOutput_1 > 0 && rowsToCommitCount_tDBOutput_1 != 0) {

				}
				conn_tDBOutput_1.commit();
				if (commitCounter_tDBOutput_1 > 0 && rowsToCommitCount_tDBOutput_1 != 0) {

					rowsToCommitCount_tDBOutput_1 = 0;
				}
				commitCounter_tDBOutput_1 = 0;

				conn_tDBOutput_1.close();

				resourceMap.put("finish_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1 + deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED", nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED", nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "promotions_out");
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
						if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_1")) != null) {
							pstmtToClose_tDBOutput_1.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_1") == null) {
						java.sql.Connection ctn_tDBOutput_1 = null;
						if ((ctn_tDBOutput_1 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_1")) != null) {
							try {
								ctn_tDBOutput_1.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_1) {
								String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :"
										+ sqlEx_tDBOutput_1.getMessage();
								System.err.println(errorMessage_tDBOutput_1);
							}
						}
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public static class return_outStruct implements routines.system.IPersistableRow<return_outStruct> {
		final static byte[] commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];
		static byte[] commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];

		public Integer RETURNID;

		public Integer getRETURNID() {
			return this.RETURNID;
		}

		public java.util.Date RETURNDATE;

		public java.util.Date getRETURNDATE() {
			return this.RETURNDATE;
		}

		public Integer CUSTOMERID;

		public Integer getCUSTOMERID() {
			return this.CUSTOMERID;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.RETURNID = readInteger(dis);

					this.RETURNDATE = readDate(dis);

					this.CUSTOMERID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.RETURNID = readInteger(dis);

					this.RETURNDATE = readDate(dis);

					this.CUSTOMERID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.RETURNID, dos);

				// java.util.Date

				writeDate(this.RETURNDATE, dos);

				// Integer

				writeInteger(this.CUSTOMERID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.RETURNID, dos);

				// java.util.Date

				writeDate(this.RETURNDATE, dos);

				// Integer

				writeInteger(this.CUSTOMERID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("RETURNID=" + String.valueOf(RETURNID));
			sb.append(",RETURNDATE=" + String.valueOf(RETURNDATE));
			sb.append(",CUSTOMERID=" + String.valueOf(CUSTOMERID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(return_outStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];
		static byte[] commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];

		public int ReturnID;

		public int getReturnID() {
			return this.ReturnID;
		}

		public java.util.Date Date;

		public java.util.Date getDate() {
			return this.Date;
		}

		public java.util.Date Time;

		public java.util.Date getTime() {
			return this.Time;
		}

		public int CustomerID;

		public int getCustomerID() {
			return this.CustomerID;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.ReturnID = dis.readInt();

					this.Date = readDate(dis);

					this.Time = readDate(dis);

					this.CustomerID = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.ReturnID = dis.readInt();

					this.Date = readDate(dis);

					this.Time = readDate(dis);

					this.CustomerID = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ReturnID);

				// java.util.Date

				writeDate(this.Date, dos);

				// java.util.Date

				writeDate(this.Time, dos);

				// int

				dos.writeInt(this.CustomerID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.ReturnID);

				// java.util.Date

				writeDate(this.Date, dos);

				// java.util.Date

				writeDate(this.Time, dos);

				// int

				dos.writeInt(this.CustomerID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ReturnID=" + String.valueOf(ReturnID));
			sb.append(",Date=" + String.valueOf(Date));
			sb.append(",Time=" + String.valueOf(Time));
			sb.append(",CustomerID=" + String.valueOf(CustomerID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();
				return_outStruct return_out = new return_outStruct();

				/**
				 * [tDBOutput_2 begin ] start
				 */

				ok_Hash.put("tDBOutput_2", false);
				start_Hash.put("tDBOutput_2", System.currentTimeMillis());

				currentComponent = "tDBOutput_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "return_out");
				}

				int tos_count_tDBOutput_2 = 0;

				int nb_line_tDBOutput_2 = 0;
				int nb_line_update_tDBOutput_2 = 0;
				int nb_line_inserted_tDBOutput_2 = 0;
				int nb_line_deleted_tDBOutput_2 = 0;
				int nb_line_rejected_tDBOutput_2 = 0;

				int tmp_batchUpdateCount_tDBOutput_2 = 0;

				int deletedCount_tDBOutput_2 = 0;
				int updatedCount_tDBOutput_2 = 0;
				int insertedCount_tDBOutput_2 = 0;
				int rowsToCommitCount_tDBOutput_2 = 0;
				int rejectedCount_tDBOutput_2 = 0;

				boolean whetherReject_tDBOutput_2 = false;

				java.sql.Connection conn_tDBOutput_2 = null;

				// optional table
				String dbschema_tDBOutput_2 = null;
				String tableName_tDBOutput_2 = null;
				String driverClass_tDBOutput_2 = "oracle.jdbc.OracleDriver";

				java.lang.Class.forName(driverClass_tDBOutput_2);
				String url_tDBOutput_2 = null;
				url_tDBOutput_2 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + "localhost"
						+ ")(port=" + "1521" + "))(connect_data=(service_name=" + "XEPDB1" + ")))";
				String dbUser_tDBOutput_2 = "system";

				final String decryptedPassword_tDBOutput_2 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:SE3wjgJSU6iin+7LxCkBpvlf0ERkIbA8+wsefx8Pv9jomDmZc00=");

				String dbPwd_tDBOutput_2 = decryptedPassword_tDBOutput_2;
				dbschema_tDBOutput_2 = "";

				conn_tDBOutput_2 = java.sql.DriverManager.getConnection(url_tDBOutput_2, dbUser_tDBOutput_2,
						dbPwd_tDBOutput_2);
				resourceMap.put("conn_tDBOutput_2", conn_tDBOutput_2);
				conn_tDBOutput_2.setAutoCommit(false);
				int commitEvery_tDBOutput_2 = 10000;
				int commitCounter_tDBOutput_2 = 0;
				int batchSize_tDBOutput_2 = 10000;
				int batchSizeCounter_tDBOutput_2 = 0;
				int count_tDBOutput_2 = 0;

				if (dbschema_tDBOutput_2 == null || dbschema_tDBOutput_2.trim().length() == 0) {
					tableName_tDBOutput_2 = ("DIM_RETURN");
				} else {
					tableName_tDBOutput_2 = dbschema_tDBOutput_2 + "." + ("DIM_RETURN");
				}
				String insert_tDBOutput_2 = "INSERT INTO " + tableName_tDBOutput_2
						+ " (RETURNID,RETURNDATE,CUSTOMERID) VALUES (?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);
				resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);

				/**
				 * [tDBOutput_2 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tMap_2 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
				return_outStruct return_out_tmp = new return_outStruct();
// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tDBInput_2 begin ] start
				 */

				ok_Hash.put("tDBInput_2", false);
				start_Hash.put("tDBInput_2", System.currentTimeMillis());

				currentComponent = "tDBInput_2";

				int tos_count_tDBInput_2 = 0;

				java.util.Calendar calendar_tDBInput_2 = java.util.Calendar.getInstance();
				calendar_tDBInput_2.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_2 = calendar_tDBInput_2.getTime();
				int nb_line_tDBInput_2 = 0;
				java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "com.mysql.cj.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_2 = java.lang.Class.forName(driverClass_tDBInput_2);
				String dbUser_tDBInput_2 = "root";

				final String decryptedPassword_tDBInput_2 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:Qq43HXjMZC2sOEt/6NC91qfxULwWIfmKHszKCga3pHjs9qHT");

				String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;

				String properties_tDBInput_2 = "noDatetimeStringSync=true&enabledTLSProtocols=TLSv1.2,TLSv1.1,TLSv1";
				if (properties_tDBInput_2 == null || properties_tDBInput_2.trim().length() == 0) {
					properties_tDBInput_2 = "";
				}
				String url_tDBInput_2 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "clothing_storeDB" + "?"
						+ properties_tDBInput_2;

				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2, dbUser_tDBInput_2,
						dbPwd_tDBInput_2);

				java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

				String dbquery_tDBInput_2 = "SELECT \n  `returnes`.`ReturnID`, \n  `returnes`.`Date`, \n  `returnes`.`Time`, \n  `returnes`.`CustomerID`\nFROM `returnes`"
						+ "";

				globalMap.put("tDBInput_2_QUERY", dbquery_tDBInput_2);
				java.sql.ResultSet rs_tDBInput_2 = null;

				try {
					rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
					java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
					int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

					String tmpContent_tDBInput_2 = null;

					while (rs_tDBInput_2.next()) {
						nb_line_tDBInput_2++;

						if (colQtyInRs_tDBInput_2 < 1) {
							row2.ReturnID = 0;
						} else {

							row2.ReturnID = rs_tDBInput_2.getInt(1);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 2) {
							row2.Date = null;
						} else {

							if (rs_tDBInput_2.getString(2) != null) {
								String dateString_tDBInput_2 = rs_tDBInput_2.getString(2);
								if (!("0000-00-00").equals(dateString_tDBInput_2)
										&& !("0000-00-00 00:00:00").equals(dateString_tDBInput_2)) {
									row2.Date = rs_tDBInput_2.getTimestamp(2);
								} else {
									row2.Date = (java.util.Date) year0_tDBInput_2.clone();
								}
							} else {
								row2.Date = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 3) {
							row2.Time = null;
						} else {

							if (rs_tDBInput_2.getString(3) != null) {
								String dateString_tDBInput_2 = rs_tDBInput_2.getString(3);
								if (!("0000-00-00").equals(dateString_tDBInput_2)
										&& !("0000-00-00 00:00:00").equals(dateString_tDBInput_2)) {
									row2.Time = rs_tDBInput_2.getTimestamp(3);
								} else {
									row2.Time = (java.util.Date) year0_tDBInput_2.clone();
								}
							} else {
								row2.Time = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 4) {
							row2.CustomerID = 0;
						} else {

							row2.CustomerID = rs_tDBInput_2.getInt(4);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}

						/**
						 * [tDBInput_2 begin ] stop
						 */

						/**
						 * [tDBInput_2 main ] start
						 */

						currentComponent = "tDBInput_2";

						tos_count_tDBInput_2++;

						/**
						 * [tDBInput_2 main ] stop
						 */

						/**
						 * [tDBInput_2 process_data_begin ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_begin ] stop
						 */

						/**
						 * [tMap_2 main ] start
						 */

						currentComponent = "tMap_2";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row2"

							);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_2 = false;
						boolean mainRowRejected_tMap_2 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
							// ###############################
							// # Output tables

							return_out = null;

// # Output table : 'return_out'
							return_out_tmp.RETURNID = row2.ReturnID;
							return_out_tmp.RETURNDATE = row2.Date;
							return_out_tmp.CUSTOMERID = row2.CustomerID;
							return_out = return_out_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_2 = false;

						tos_count_tMap_2++;

						/**
						 * [tMap_2 main ] stop
						 */

						/**
						 * [tMap_2 process_data_begin ] start
						 */

						currentComponent = "tMap_2";

						/**
						 * [tMap_2 process_data_begin ] stop
						 */
// Start of branch "return_out"
						if (return_out != null) {

							/**
							 * [tDBOutput_2 main ] start
							 */

							currentComponent = "tDBOutput_2";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "return_out"

								);
							}

							whetherReject_tDBOutput_2 = false;
							if (return_out.RETURNID == null) {
								pstmt_tDBOutput_2.setNull(1, java.sql.Types.INTEGER);
							} else {
								pstmt_tDBOutput_2.setInt(1, return_out.RETURNID);
							}

							if (return_out.RETURNDATE != null) {
								pstmt_tDBOutput_2.setObject(2, new java.sql.Timestamp(return_out.RETURNDATE.getTime()),
										java.sql.Types.DATE);
							} else {
								pstmt_tDBOutput_2.setNull(2, java.sql.Types.DATE);
							}

							if (return_out.CUSTOMERID == null) {
								pstmt_tDBOutput_2.setNull(3, java.sql.Types.INTEGER);
							} else {
								pstmt_tDBOutput_2.setInt(3, return_out.CUSTOMERID);
							}

							pstmt_tDBOutput_2.addBatch();
							nb_line_tDBOutput_2++;
							batchSizeCounter_tDBOutput_2++;
							if (batchSize_tDBOutput_2 > 0 && batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2) {
								try {
									pstmt_tDBOutput_2.executeBatch();
								} catch (java.sql.BatchUpdateException e_tDBOutput_2) {
									globalMap.put("tDBOutput_2_ERROR_MESSAGE", e_tDBOutput_2.getMessage());
									java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),
											sqle_tDBOutput_2 = null;
									String errormessage_tDBOutput_2;
									if (ne_tDBOutput_2 != null) {
										// build new exception to provide the original cause
										sqle_tDBOutput_2 = new java.sql.SQLException(
												e_tDBOutput_2.getMessage() + "\ncaused by: "
														+ ne_tDBOutput_2.getMessage(),
												ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(),
												ne_tDBOutput_2);
										errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
									} else {
										errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
									}

									System.err.println(errormessage_tDBOutput_2);

								}
								tmp_batchUpdateCount_tDBOutput_2 = pstmt_tDBOutput_2.getUpdateCount();
								insertedCount_tDBOutput_2 += (tmp_batchUpdateCount_tDBOutput_2 != -1
										? tmp_batchUpdateCount_tDBOutput_2
										: 0);
								rowsToCommitCount_tDBOutput_2 += (tmp_batchUpdateCount_tDBOutput_2 != -1
										? tmp_batchUpdateCount_tDBOutput_2
										: 0);
								batchSizeCounter_tDBOutput_2 = 0;
							}
							commitCounter_tDBOutput_2++;
							if (commitEvery_tDBOutput_2 <= commitCounter_tDBOutput_2) {
								if (batchSizeCounter_tDBOutput_2 > 0) {
									try {
										pstmt_tDBOutput_2.executeBatch();
									} catch (java.sql.BatchUpdateException e_tDBOutput_2) {
										globalMap.put("tDBOutput_2_ERROR_MESSAGE", e_tDBOutput_2.getMessage());
										java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),
												sqle_tDBOutput_2 = null;
										String errormessage_tDBOutput_2;
										if (ne_tDBOutput_2 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_2 = new java.sql.SQLException(
													e_tDBOutput_2.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_2.getMessage(),
													ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(),
													ne_tDBOutput_2);
											errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
										} else {
											errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
										}

										System.err.println(errormessage_tDBOutput_2);

									}
									tmp_batchUpdateCount_tDBOutput_2 = pstmt_tDBOutput_2.getUpdateCount();
									insertedCount_tDBOutput_2 += (tmp_batchUpdateCount_tDBOutput_2 != -1
											? tmp_batchUpdateCount_tDBOutput_2
											: 0);
									rowsToCommitCount_tDBOutput_2 += (tmp_batchUpdateCount_tDBOutput_2 != -1
											? tmp_batchUpdateCount_tDBOutput_2
											: 0);
								}
								if (rowsToCommitCount_tDBOutput_2 != 0) {

								}
								conn_tDBOutput_2.commit();
								if (rowsToCommitCount_tDBOutput_2 != 0) {

									rowsToCommitCount_tDBOutput_2 = 0;
								}
								commitCounter_tDBOutput_2 = 0;
								batchSizeCounter_tDBOutput_2 = 0;
							}

							tos_count_tDBOutput_2++;

							/**
							 * [tDBOutput_2 main ] stop
							 */

							/**
							 * [tDBOutput_2 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_2";

							/**
							 * [tDBOutput_2 process_data_begin ] stop
							 */

							/**
							 * [tDBOutput_2 process_data_end ] start
							 */

							currentComponent = "tDBOutput_2";

							/**
							 * [tDBOutput_2 process_data_end ] stop
							 */

						} // End of branch "return_out"

						/**
						 * [tMap_2 process_data_end ] start
						 */

						currentComponent = "tMap_2";

						/**
						 * [tMap_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 process_data_end ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 end ] start
						 */

						currentComponent = "tDBInput_2";

					}
				} finally {
					if (rs_tDBInput_2 != null) {
						rs_tDBInput_2.close();
					}
					if (stmt_tDBInput_2 != null) {
						stmt_tDBInput_2.close();
					}
					if (conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {

						conn_tDBInput_2.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}

				globalMap.put("tDBInput_2_NB_LINE", nb_line_tDBInput_2);

				ok_Hash.put("tDBInput_2", true);
				end_Hash.put("tDBInput_2", System.currentTimeMillis());

				/**
				 * [tDBInput_2 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tDBOutput_2 end ] start
				 */

				currentComponent = "tDBOutput_2";

				if (batchSizeCounter_tDBOutput_2 > 0) {
					try {
						if (pstmt_tDBOutput_2 != null) {

							pstmt_tDBOutput_2.executeBatch();

						}
					} catch (java.sql.BatchUpdateException e_tDBOutput_2) {
						globalMap.put("tDBOutput_2_ERROR_MESSAGE", e_tDBOutput_2.getMessage());
						java.sql.SQLException ne_tDBOutput_2 = e_tDBOutput_2.getNextException(),
								sqle_tDBOutput_2 = null;
						String errormessage_tDBOutput_2;
						if (ne_tDBOutput_2 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_2 = new java.sql.SQLException(
									e_tDBOutput_2.getMessage() + "\ncaused by: " + ne_tDBOutput_2.getMessage(),
									ne_tDBOutput_2.getSQLState(), ne_tDBOutput_2.getErrorCode(), ne_tDBOutput_2);
							errormessage_tDBOutput_2 = sqle_tDBOutput_2.getMessage();
						} else {
							errormessage_tDBOutput_2 = e_tDBOutput_2.getMessage();
						}

						System.err.println(errormessage_tDBOutput_2);

					}
					if (pstmt_tDBOutput_2 != null) {
						tmp_batchUpdateCount_tDBOutput_2 = pstmt_tDBOutput_2.getUpdateCount();

						insertedCount_tDBOutput_2

								+= (tmp_batchUpdateCount_tDBOutput_2 != -1 ? tmp_batchUpdateCount_tDBOutput_2 : 0);
						rowsToCommitCount_tDBOutput_2 += (tmp_batchUpdateCount_tDBOutput_2 != -1
								? tmp_batchUpdateCount_tDBOutput_2
								: 0);
					}
				}
				if (pstmt_tDBOutput_2 != null) {

					pstmt_tDBOutput_2.close();
					resourceMap.remove("pstmt_tDBOutput_2");

				}
				resourceMap.put("statementClosed_tDBOutput_2", true);
				if (commitCounter_tDBOutput_2 > 0 && rowsToCommitCount_tDBOutput_2 != 0) {

				}
				conn_tDBOutput_2.commit();
				if (commitCounter_tDBOutput_2 > 0 && rowsToCommitCount_tDBOutput_2 != 0) {

					rowsToCommitCount_tDBOutput_2 = 0;
				}
				commitCounter_tDBOutput_2 = 0;

				conn_tDBOutput_2.close();

				resourceMap.put("finish_tDBOutput_2", true);

				nb_line_deleted_tDBOutput_2 = nb_line_deleted_tDBOutput_2 + deletedCount_tDBOutput_2;
				nb_line_update_tDBOutput_2 = nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
				nb_line_inserted_tDBOutput_2 = nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
				nb_line_rejected_tDBOutput_2 = nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;

				globalMap.put("tDBOutput_2_NB_LINE", nb_line_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_UPDATED", nb_line_update_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_DELETED", nb_line_deleted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "return_out");
				}

				ok_Hash.put("tDBOutput_2", true);
				end_Hash.put("tDBOutput_2", System.currentTimeMillis());

				/**
				 * [tDBOutput_2 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_2 finally ] start
				 */

				currentComponent = "tDBInput_2";

				/**
				 * [tDBInput_2 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tDBOutput_2 finally ] start
				 */

				currentComponent = "tDBOutput_2";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
						if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_2")) != null) {
							pstmtToClose_tDBOutput_2.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_2") == null) {
						java.sql.Connection ctn_tDBOutput_2 = null;
						if ((ctn_tDBOutput_2 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_2")) != null) {
							try {
								ctn_tDBOutput_2.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_2) {
								String errorMessage_tDBOutput_2 = "failed to close the connection in tDBOutput_2 :"
										+ sqlEx_tDBOutput_2.getMessage();
								System.err.println(errorMessage_tDBOutput_2);
							}
						}
					}
				}

				/**
				 * [tDBOutput_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}

	public static class product_outStruct implements routines.system.IPersistableRow<product_outStruct> {
		final static byte[] commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];
		static byte[] commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];

		public Integer PRODUCTID;

		public Integer getPRODUCTID() {
			return this.PRODUCTID;
		}

		public String PRODUCTNAME;

		public String getPRODUCTNAME() {
			return this.PRODUCTNAME;
		}

		public String CATEGORY;

		public String getCATEGORY() {
			return this.CATEGORY;
		}

		public String COLOR;

		public String getCOLOR() {
			return this.COLOR;
		}

		public String PRODUCTSIZE;

		public String getPRODUCTSIZE() {
			return this.PRODUCTSIZE;
		}

		public String UNITOFMEASURE;

		public String getUNITOFMEASURE() {
			return this.UNITOFMEASURE;
		}

		public String PRODUCTIMAGE;

		public String getPRODUCTIMAGE() {
			return this.PRODUCTIMAGE;
		}

		public BigDecimal RATING;

		public BigDecimal getRATING() {
			return this.RATING;
		}

		public BigDecimal PRICING;

		public BigDecimal getPRICING() {
			return this.PRICING;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length) {
					if (length < 1024 && commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length == 0) {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[1024];
					} else {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length);
				strReturn = new String(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length) {
					if (length < 1024 && commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length == 0) {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[1024];
					} else {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length);
				strReturn = new String(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.PRODUCTID = readInteger(dis);

					this.PRODUCTNAME = readString(dis);

					this.CATEGORY = readString(dis);

					this.COLOR = readString(dis);

					this.PRODUCTSIZE = readString(dis);

					this.UNITOFMEASURE = readString(dis);

					this.PRODUCTIMAGE = readString(dis);

					this.RATING = (BigDecimal) dis.readObject();

					this.PRICING = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.PRODUCTID = readInteger(dis);

					this.PRODUCTNAME = readString(dis);

					this.CATEGORY = readString(dis);

					this.COLOR = readString(dis);

					this.PRODUCTSIZE = readString(dis);

					this.UNITOFMEASURE = readString(dis);

					this.PRODUCTIMAGE = readString(dis);

					this.RATING = (BigDecimal) dis.readObject();

					this.PRICING = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.PRODUCTID, dos);

				// String

				writeString(this.PRODUCTNAME, dos);

				// String

				writeString(this.CATEGORY, dos);

				// String

				writeString(this.COLOR, dos);

				// String

				writeString(this.PRODUCTSIZE, dos);

				// String

				writeString(this.UNITOFMEASURE, dos);

				// String

				writeString(this.PRODUCTIMAGE, dos);

				// BigDecimal

				dos.writeObject(this.RATING);

				// BigDecimal

				dos.writeObject(this.PRICING);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.PRODUCTID, dos);

				// String

				writeString(this.PRODUCTNAME, dos);

				// String

				writeString(this.CATEGORY, dos);

				// String

				writeString(this.COLOR, dos);

				// String

				writeString(this.PRODUCTSIZE, dos);

				// String

				writeString(this.UNITOFMEASURE, dos);

				// String

				writeString(this.PRODUCTIMAGE, dos);

				// BigDecimal

				dos.writeObject(this.RATING);

				// BigDecimal

				dos.writeObject(this.PRICING);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PRODUCTID=" + String.valueOf(PRODUCTID));
			sb.append(",PRODUCTNAME=" + PRODUCTNAME);
			sb.append(",CATEGORY=" + CATEGORY);
			sb.append(",COLOR=" + COLOR);
			sb.append(",PRODUCTSIZE=" + PRODUCTSIZE);
			sb.append(",UNITOFMEASURE=" + UNITOFMEASURE);
			sb.append(",PRODUCTIMAGE=" + PRODUCTIMAGE);
			sb.append(",RATING=" + String.valueOf(RATING));
			sb.append(",PRICING=" + String.valueOf(PRICING));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(product_outStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];
		static byte[] commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];

		public int ProductID;

		public int getProductID() {
			return this.ProductID;
		}

		public String ProductName;

		public String getProductName() {
			return this.ProductName;
		}

		public BigDecimal SellingPrice;

		public BigDecimal getSellingPrice() {
			return this.SellingPrice;
		}

		public BigDecimal Rating;

		public BigDecimal getRating() {
			return this.Rating;
		}

		public Integer Amount_allocated;

		public Integer getAmount_allocated() {
			return this.Amount_allocated;
		}

		public Integer InventoryID;

		public Integer getInventoryID() {
			return this.InventoryID;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length) {
					if (length < 1024 && commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length == 0) {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[1024];
					} else {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length);
				strReturn = new String(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length) {
					if (length < 1024 && commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length == 0) {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[1024];
					} else {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length);
				strReturn = new String(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.ProductID = dis.readInt();

					this.ProductName = readString(dis);

					this.SellingPrice = (BigDecimal) dis.readObject();

					this.Rating = (BigDecimal) dis.readObject();

					this.Amount_allocated = readInteger(dis);

					this.InventoryID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.ProductID = dis.readInt();

					this.ProductName = readString(dis);

					this.SellingPrice = (BigDecimal) dis.readObject();

					this.Rating = (BigDecimal) dis.readObject();

					this.Amount_allocated = readInteger(dis);

					this.InventoryID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ProductID);

				// String

				writeString(this.ProductName, dos);

				// BigDecimal

				dos.writeObject(this.SellingPrice);

				// BigDecimal

				dos.writeObject(this.Rating);

				// Integer

				writeInteger(this.Amount_allocated, dos);

				// Integer

				writeInteger(this.InventoryID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.ProductID);

				// String

				writeString(this.ProductName, dos);

				// BigDecimal

				dos.writeObject(this.SellingPrice);

				// BigDecimal

				dos.writeObject(this.Rating);

				// Integer

				writeInteger(this.Amount_allocated, dos);

				// Integer

				writeInteger(this.InventoryID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ProductID=" + String.valueOf(ProductID));
			sb.append(",ProductName=" + ProductName);
			sb.append(",SellingPrice=" + String.valueOf(SellingPrice));
			sb.append(",Rating=" + String.valueOf(Rating));
			sb.append(",Amount_allocated=" + String.valueOf(Amount_allocated));
			sb.append(",InventoryID=" + String.valueOf(InventoryID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tDBInput_3Struct implements routines.system.IPersistableRow<after_tDBInput_3Struct> {
		final static byte[] commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];
		static byte[] commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int ProductID;

		public int getProductID() {
			return this.ProductID;
		}

		public String ProductName;

		public String getProductName() {
			return this.ProductName;
		}

		public BigDecimal SellingPrice;

		public BigDecimal getSellingPrice() {
			return this.SellingPrice;
		}

		public BigDecimal Rating;

		public BigDecimal getRating() {
			return this.Rating;
		}

		public Integer Amount_allocated;

		public Integer getAmount_allocated() {
			return this.Amount_allocated;
		}

		public Integer InventoryID;

		public Integer getInventoryID() {
			return this.InventoryID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.ProductID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tDBInput_3Struct other = (after_tDBInput_3Struct) obj;

			if (this.ProductID != other.ProductID)
				return false;

			return true;
		}

		public void copyDataTo(after_tDBInput_3Struct other) {

			other.ProductID = this.ProductID;
			other.ProductName = this.ProductName;
			other.SellingPrice = this.SellingPrice;
			other.Rating = this.Rating;
			other.Amount_allocated = this.Amount_allocated;
			other.InventoryID = this.InventoryID;

		}

		public void copyKeysDataTo(after_tDBInput_3Struct other) {

			other.ProductID = this.ProductID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length) {
					if (length < 1024 && commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length == 0) {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[1024];
					} else {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length);
				strReturn = new String(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length) {
					if (length < 1024 && commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length == 0) {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[1024];
					} else {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length);
				strReturn = new String(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.ProductID = dis.readInt();

					this.ProductName = readString(dis);

					this.SellingPrice = (BigDecimal) dis.readObject();

					this.Rating = (BigDecimal) dis.readObject();

					this.Amount_allocated = readInteger(dis);

					this.InventoryID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.ProductID = dis.readInt();

					this.ProductName = readString(dis);

					this.SellingPrice = (BigDecimal) dis.readObject();

					this.Rating = (BigDecimal) dis.readObject();

					this.Amount_allocated = readInteger(dis);

					this.InventoryID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ProductID);

				// String

				writeString(this.ProductName, dos);

				// BigDecimal

				dos.writeObject(this.SellingPrice);

				// BigDecimal

				dos.writeObject(this.Rating);

				// Integer

				writeInteger(this.Amount_allocated, dos);

				// Integer

				writeInteger(this.InventoryID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.ProductID);

				// String

				writeString(this.ProductName, dos);

				// BigDecimal

				dos.writeObject(this.SellingPrice);

				// BigDecimal

				dos.writeObject(this.Rating);

				// Integer

				writeInteger(this.Amount_allocated, dos);

				// Integer

				writeInteger(this.InventoryID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ProductID=" + String.valueOf(ProductID));
			sb.append(",ProductName=" + ProductName);
			sb.append(",SellingPrice=" + String.valueOf(SellingPrice));
			sb.append(",Rating=" + String.valueOf(Rating));
			sb.append(",Amount_allocated=" + String.valueOf(Amount_allocated));
			sb.append(",InventoryID=" + String.valueOf(InventoryID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tDBInput_3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ProductID, other.ProductID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tDBInput_4Process(globalMap);
				tDBInput_5Process(globalMap);
				tDBInput_6Process(globalMap);
				tDBInput_7Process(globalMap);
				tDBInput_8Process(globalMap);

				row3Struct row3 = new row3Struct();
				product_outStruct product_out = new product_outStruct();

				/**
				 * [tDBOutput_3 begin ] start
				 */

				ok_Hash.put("tDBOutput_3", false);
				start_Hash.put("tDBOutput_3", System.currentTimeMillis());

				currentComponent = "tDBOutput_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "product_out");
				}

				int tos_count_tDBOutput_3 = 0;

				int nb_line_tDBOutput_3 = 0;
				int nb_line_update_tDBOutput_3 = 0;
				int nb_line_inserted_tDBOutput_3 = 0;
				int nb_line_deleted_tDBOutput_3 = 0;
				int nb_line_rejected_tDBOutput_3 = 0;

				int tmp_batchUpdateCount_tDBOutput_3 = 0;

				int deletedCount_tDBOutput_3 = 0;
				int updatedCount_tDBOutput_3 = 0;
				int insertedCount_tDBOutput_3 = 0;
				int rowsToCommitCount_tDBOutput_3 = 0;
				int rejectedCount_tDBOutput_3 = 0;

				boolean whetherReject_tDBOutput_3 = false;

				java.sql.Connection conn_tDBOutput_3 = null;

				// optional table
				String dbschema_tDBOutput_3 = null;
				String tableName_tDBOutput_3 = null;
				String driverClass_tDBOutput_3 = "oracle.jdbc.OracleDriver";

				java.lang.Class.forName(driverClass_tDBOutput_3);
				String url_tDBOutput_3 = null;
				url_tDBOutput_3 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + "localhost"
						+ ")(port=" + "1521" + "))(connect_data=(service_name=" + "XEPDB1" + ")))";
				String dbUser_tDBOutput_3 = "system";

				final String decryptedPassword_tDBOutput_3 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:9+6WMpdsjivNYhl8FGtKW6hE0WjXsuyr+rSivR+CL8OgwBl8zYI=");

				String dbPwd_tDBOutput_3 = decryptedPassword_tDBOutput_3;
				dbschema_tDBOutput_3 = "";

				conn_tDBOutput_3 = java.sql.DriverManager.getConnection(url_tDBOutput_3, dbUser_tDBOutput_3,
						dbPwd_tDBOutput_3);
				resourceMap.put("conn_tDBOutput_3", conn_tDBOutput_3);
				conn_tDBOutput_3.setAutoCommit(false);
				int commitEvery_tDBOutput_3 = 10000;
				int commitCounter_tDBOutput_3 = 0;
				int batchSize_tDBOutput_3 = 10000;
				int batchSizeCounter_tDBOutput_3 = 0;
				int count_tDBOutput_3 = 0;

				if (dbschema_tDBOutput_3 == null || dbschema_tDBOutput_3.trim().length() == 0) {
					tableName_tDBOutput_3 = ("DIM_PRODUCT");
				} else {
					tableName_tDBOutput_3 = dbschema_tDBOutput_3 + "." + ("DIM_PRODUCT");
				}
				String insert_tDBOutput_3 = "INSERT INTO " + tableName_tDBOutput_3
						+ " (PRODUCTID,PRODUCTNAME,CATEGORY,COLOR,PRODUCTSIZE,UNITOFMEASURE,PRODUCTIMAGE,RATING,PRICING) VALUES (?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_3 = conn_tDBOutput_3.prepareStatement(insert_tDBOutput_3);
				resourceMap.put("pstmt_tDBOutput_3", pstmt_tDBOutput_3);

				/**
				 * [tDBOutput_3 begin ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());

				currentComponent = "tMap_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tMap_3 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) globalMap
						.get("tHash_Lookup_row4"));

				row4Struct row4HashKey = new row4Struct();
				row4Struct row4Default = new row4Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) globalMap
						.get("tHash_Lookup_row5"));

				row5Struct row5HashKey = new row5Struct();
				row5Struct row5Default = new row5Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) globalMap
						.get("tHash_Lookup_row6"));

				row6Struct row6HashKey = new row6Struct();
				row6Struct row6Default = new row6Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) globalMap
						.get("tHash_Lookup_row7"));

				row7Struct row7HashKey = new row7Struct();
				row7Struct row7Default = new row7Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) globalMap
						.get("tHash_Lookup_row8"));

				row8Struct row8HashKey = new row8Struct();
				row8Struct row8Default = new row8Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_3__Struct {
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
				product_outStruct product_out_tmp = new product_outStruct();
// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tDBInput_3 begin ] start
				 */

				ok_Hash.put("tDBInput_3", false);
				start_Hash.put("tDBInput_3", System.currentTimeMillis());

				currentComponent = "tDBInput_3";

				int tos_count_tDBInput_3 = 0;

				java.util.Calendar calendar_tDBInput_3 = java.util.Calendar.getInstance();
				calendar_tDBInput_3.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_3 = calendar_tDBInput_3.getTime();
				int nb_line_tDBInput_3 = 0;
				java.sql.Connection conn_tDBInput_3 = null;
				String driverClass_tDBInput_3 = "com.mysql.cj.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_3 = java.lang.Class.forName(driverClass_tDBInput_3);
				String dbUser_tDBInput_3 = "root";

				final String decryptedPassword_tDBInput_3 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:jnwC2s0PuYfsA3CvxovhIDeeY+eo02HbRKo6JbhTQeHTGWQH");

				String dbPwd_tDBInput_3 = decryptedPassword_tDBInput_3;

				String properties_tDBInput_3 = "noDatetimeStringSync=true&enabledTLSProtocols=TLSv1.2,TLSv1.1,TLSv1";
				if (properties_tDBInput_3 == null || properties_tDBInput_3.trim().length() == 0) {
					properties_tDBInput_3 = "";
				}
				String url_tDBInput_3 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "clothing_storeDB" + "?"
						+ properties_tDBInput_3;

				conn_tDBInput_3 = java.sql.DriverManager.getConnection(url_tDBInput_3, dbUser_tDBInput_3,
						dbPwd_tDBInput_3);

				java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

				String dbquery_tDBInput_3 = "SELECT \n  `product`.`ProductID`, \n  `product`.`ProductName`, \n  `product`.`SellingPrice`, \n  `product`.`Rating`, \n  `pr"
						+ "oduct`.`Amount_allocated`, \n  `product`.`InventoryID`\nFROM `product`";

				globalMap.put("tDBInput_3_QUERY", dbquery_tDBInput_3);
				java.sql.ResultSet rs_tDBInput_3 = null;

				try {
					rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
					java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
					int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

					String tmpContent_tDBInput_3 = null;

					while (rs_tDBInput_3.next()) {
						nb_line_tDBInput_3++;

						if (colQtyInRs_tDBInput_3 < 1) {
							row3.ProductID = 0;
						} else {

							row3.ProductID = rs_tDBInput_3.getInt(1);
							if (rs_tDBInput_3.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 2) {
							row3.ProductName = null;
						} else {

							row3.ProductName = routines.system.JDBCUtil.getString(rs_tDBInput_3, 2, false);
						}
						if (colQtyInRs_tDBInput_3 < 3) {
							row3.SellingPrice = null;
						} else {

							row3.SellingPrice = rs_tDBInput_3.getBigDecimal(3);
							if (rs_tDBInput_3.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 4) {
							row3.Rating = null;
						} else {

							row3.Rating = rs_tDBInput_3.getBigDecimal(4);
							if (rs_tDBInput_3.wasNull()) {
								row3.Rating = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 5) {
							row3.Amount_allocated = null;
						} else {

							row3.Amount_allocated = rs_tDBInput_3.getInt(5);
							if (rs_tDBInput_3.wasNull()) {
								row3.Amount_allocated = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 6) {
							row3.InventoryID = null;
						} else {

							row3.InventoryID = rs_tDBInput_3.getInt(6);
							if (rs_tDBInput_3.wasNull()) {
								row3.InventoryID = null;
							}
						}

						/**
						 * [tDBInput_3 begin ] stop
						 */

						/**
						 * [tDBInput_3 main ] start
						 */

						currentComponent = "tDBInput_3";

						tos_count_tDBInput_3++;

						/**
						 * [tDBInput_3 main ] stop
						 */

						/**
						 * [tDBInput_3 process_data_begin ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_begin ] stop
						 */

						/**
						 * [tMap_3 main ] start
						 */

						currentComponent = "tMap_3";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row3"

							);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_3 = false;
						boolean mainRowRejected_tMap_3 = false;

						///////////////////////////////////////////////
						// Starting Lookup Table "row4"
						///////////////////////////////////////////////

						boolean forceLooprow4 = false;

						row4Struct row4ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_3) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_3 = false;

							Object exprKeyValue_row4__InventoryID = row3.InventoryID;
							if (exprKeyValue_row4__InventoryID == null) {
								hasCasePrimitiveKeyWithNull_tMap_3 = true;
							} else {
								row4HashKey.InventoryID = (int) (Integer) exprKeyValue_row4__InventoryID;
							}

							row4HashKey.hashCodeDirty = true;

							if (!hasCasePrimitiveKeyWithNull_tMap_3) { // G_TM_M_091

								tHash_Lookup_row4.lookup(row4HashKey);

							} // G_TM_M_091

						} // G_TM_M_020

						if (tHash_Lookup_row4 != null && tHash_Lookup_row4.getCount(row4HashKey) > 1) { // G 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row4'
							// and it contains more one result from keys : row4.InventoryID = '" +
							// row4HashKey.InventoryID + "'");
						} // G 071

						row4Struct row4 = null;

						row4Struct fromLookup_row4 = null;
						row4 = row4Default;

						if (tHash_Lookup_row4 != null && tHash_Lookup_row4.hasNext()) { // G 099

							fromLookup_row4 = tHash_Lookup_row4.next();

						} // G 099

						if (fromLookup_row4 != null) {
							row4 = fromLookup_row4;
						}

						///////////////////////////////////////////////
						// Starting Lookup Table "row5"
						///////////////////////////////////////////////

						boolean forceLooprow5 = false;

						row5Struct row5ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_3) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_3 = false;

							Object exprKeyValue_row5__ProductID = row3.ProductID;
							if (exprKeyValue_row5__ProductID == null) {
								hasCasePrimitiveKeyWithNull_tMap_3 = true;
							} else {
								row5HashKey.ProductID = (int) (Integer) exprKeyValue_row5__ProductID;
							}

							row5HashKey.hashCodeDirty = true;

							if (!hasCasePrimitiveKeyWithNull_tMap_3) { // G_TM_M_091

								tHash_Lookup_row5.lookup(row5HashKey);

							} // G_TM_M_091

						} // G_TM_M_020

						if (tHash_Lookup_row5 != null && tHash_Lookup_row5.getCount(row5HashKey) > 1) { // G 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row5'
							// and it contains more one result from keys : row5.ProductID = '" +
							// row5HashKey.ProductID + "'");
						} // G 071

						row5Struct row5 = null;

						row5Struct fromLookup_row5 = null;
						row5 = row5Default;

						if (tHash_Lookup_row5 != null && tHash_Lookup_row5.hasNext()) { // G 099

							fromLookup_row5 = tHash_Lookup_row5.next();

						} // G 099

						if (fromLookup_row5 != null) {
							row5 = fromLookup_row5;
						}

						///////////////////////////////////////////////
						// Starting Lookup Table "row6"
						///////////////////////////////////////////////

						boolean forceLooprow6 = false;

						row6Struct row6ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_3) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_3 = false;

							Object exprKeyValue_row6__ColorID = row4.ColorID;
							if (exprKeyValue_row6__ColorID == null) {
								hasCasePrimitiveKeyWithNull_tMap_3 = true;
							} else {
								row6HashKey.ColorID = (int) (Integer) exprKeyValue_row6__ColorID;
							}

							row6HashKey.hashCodeDirty = true;

							if (!hasCasePrimitiveKeyWithNull_tMap_3) { // G_TM_M_091

								tHash_Lookup_row6.lookup(row6HashKey);

							} // G_TM_M_091

						} // G_TM_M_020

						if (tHash_Lookup_row6 != null && tHash_Lookup_row6.getCount(row6HashKey) > 1) { // G 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row6'
							// and it contains more one result from keys : row6.ColorID = '" +
							// row6HashKey.ColorID + "'");
						} // G 071

						row6Struct row6 = null;

						row6Struct fromLookup_row6 = null;
						row6 = row6Default;

						if (tHash_Lookup_row6 != null && tHash_Lookup_row6.hasNext()) { // G 099

							fromLookup_row6 = tHash_Lookup_row6.next();

						} // G 099

						if (fromLookup_row6 != null) {
							row6 = fromLookup_row6;
						}

						///////////////////////////////////////////////
						// Starting Lookup Table "row7"
						///////////////////////////////////////////////

						boolean forceLooprow7 = false;

						row7Struct row7ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_3) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_3 = false;

							Object exprKeyValue_row7__SizeID = row4.SizeID;
							if (exprKeyValue_row7__SizeID == null) {
								hasCasePrimitiveKeyWithNull_tMap_3 = true;
							} else {
								row7HashKey.SizeID = (int) (Integer) exprKeyValue_row7__SizeID;
							}

							row7HashKey.hashCodeDirty = true;

							if (!hasCasePrimitiveKeyWithNull_tMap_3) { // G_TM_M_091

								tHash_Lookup_row7.lookup(row7HashKey);

							} // G_TM_M_091

						} // G_TM_M_020

						if (tHash_Lookup_row7 != null && tHash_Lookup_row7.getCount(row7HashKey) > 1) { // G 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row7'
							// and it contains more one result from keys : row7.SizeID = '" +
							// row7HashKey.SizeID + "'");
						} // G 071

						row7Struct row7 = null;

						row7Struct fromLookup_row7 = null;
						row7 = row7Default;

						if (tHash_Lookup_row7 != null && tHash_Lookup_row7.hasNext()) { // G 099

							fromLookup_row7 = tHash_Lookup_row7.next();

						} // G 099

						if (fromLookup_row7 != null) {
							row7 = fromLookup_row7;
						}

						///////////////////////////////////////////////
						// Starting Lookup Table "row8"
						///////////////////////////////////////////////

						boolean forceLooprow8 = false;

						row8Struct row8ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_3) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_3 = false;

							Object exprKeyValue_row8__CatID = row4.CatID;
							if (exprKeyValue_row8__CatID == null) {
								hasCasePrimitiveKeyWithNull_tMap_3 = true;
							} else {
								row8HashKey.CatID = (int) (Integer) exprKeyValue_row8__CatID;
							}

							row8HashKey.hashCodeDirty = true;

							if (!hasCasePrimitiveKeyWithNull_tMap_3) { // G_TM_M_091

								tHash_Lookup_row8.lookup(row8HashKey);

							} // G_TM_M_091

						} // G_TM_M_020

						if (tHash_Lookup_row8 != null && tHash_Lookup_row8.getCount(row8HashKey) > 1) { // G 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row8'
							// and it contains more one result from keys : row8.CatID = '" +
							// row8HashKey.CatID + "'");
						} // G 071

						row8Struct row8 = null;

						row8Struct fromLookup_row8 = null;
						row8 = row8Default;

						if (tHash_Lookup_row8 != null && tHash_Lookup_row8.hasNext()) { // G 099

							fromLookup_row8 = tHash_Lookup_row8.next();

						} // G 099

						if (fromLookup_row8 != null) {
							row8 = fromLookup_row8;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
							// ###############################
							// # Output tables

							product_out = null;

// # Output table : 'product_out'
							product_out_tmp.PRODUCTID = row3.ProductID;
							product_out_tmp.PRODUCTNAME = row3.ProductName;
							product_out_tmp.CATEGORY = row8.Category;
							product_out_tmp.COLOR = row6.Name;
							product_out_tmp.PRODUCTSIZE = row7.Name;
							product_out_tmp.UNITOFMEASURE = row7.Measurements;
							product_out_tmp.PRODUCTIMAGE = row5.URL;
							product_out_tmp.RATING = row3.Rating;
							product_out_tmp.PRICING = row3.SellingPrice;
							product_out = product_out_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_3 = false;

						tos_count_tMap_3++;

						/**
						 * [tMap_3 main ] stop
						 */

						/**
						 * [tMap_3 process_data_begin ] start
						 */

						currentComponent = "tMap_3";

						/**
						 * [tMap_3 process_data_begin ] stop
						 */
// Start of branch "product_out"
						if (product_out != null) {

							/**
							 * [tDBOutput_3 main ] start
							 */

							currentComponent = "tDBOutput_3";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "product_out"

								);
							}

							whetherReject_tDBOutput_3 = false;
							if (product_out.PRODUCTID == null) {
								pstmt_tDBOutput_3.setNull(1, java.sql.Types.INTEGER);
							} else {
								pstmt_tDBOutput_3.setInt(1, product_out.PRODUCTID);
							}

							if (product_out.PRODUCTNAME == null) {
								pstmt_tDBOutput_3.setNull(2, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_3.setString(2, product_out.PRODUCTNAME);
							}

							if (product_out.CATEGORY == null) {
								pstmt_tDBOutput_3.setNull(3, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_3.setString(3, product_out.CATEGORY);
							}

							if (product_out.COLOR == null) {
								pstmt_tDBOutput_3.setNull(4, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_3.setString(4, product_out.COLOR);
							}

							if (product_out.PRODUCTSIZE == null) {
								pstmt_tDBOutput_3.setNull(5, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_3.setString(5, product_out.PRODUCTSIZE);
							}

							if (product_out.UNITOFMEASURE == null) {
								pstmt_tDBOutput_3.setNull(6, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_3.setString(6, product_out.UNITOFMEASURE);
							}

							if (product_out.PRODUCTIMAGE == null) {
								pstmt_tDBOutput_3.setNull(7, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_3.setString(7, product_out.PRODUCTIMAGE);
							}

							pstmt_tDBOutput_3.setBigDecimal(8, product_out.RATING);

							pstmt_tDBOutput_3.setBigDecimal(9, product_out.PRICING);

							pstmt_tDBOutput_3.addBatch();
							nb_line_tDBOutput_3++;
							batchSizeCounter_tDBOutput_3++;
							if (batchSize_tDBOutput_3 > 0 && batchSize_tDBOutput_3 <= batchSizeCounter_tDBOutput_3) {
								try {
									pstmt_tDBOutput_3.executeBatch();
								} catch (java.sql.BatchUpdateException e_tDBOutput_3) {
									globalMap.put("tDBOutput_3_ERROR_MESSAGE", e_tDBOutput_3.getMessage());
									java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(),
											sqle_tDBOutput_3 = null;
									String errormessage_tDBOutput_3;
									if (ne_tDBOutput_3 != null) {
										// build new exception to provide the original cause
										sqle_tDBOutput_3 = new java.sql.SQLException(
												e_tDBOutput_3.getMessage() + "\ncaused by: "
														+ ne_tDBOutput_3.getMessage(),
												ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(),
												ne_tDBOutput_3);
										errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
									} else {
										errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
									}

									System.err.println(errormessage_tDBOutput_3);

								}
								tmp_batchUpdateCount_tDBOutput_3 = pstmt_tDBOutput_3.getUpdateCount();
								insertedCount_tDBOutput_3 += (tmp_batchUpdateCount_tDBOutput_3 != -1
										? tmp_batchUpdateCount_tDBOutput_3
										: 0);
								rowsToCommitCount_tDBOutput_3 += (tmp_batchUpdateCount_tDBOutput_3 != -1
										? tmp_batchUpdateCount_tDBOutput_3
										: 0);
								batchSizeCounter_tDBOutput_3 = 0;
							}
							commitCounter_tDBOutput_3++;
							if (commitEvery_tDBOutput_3 <= commitCounter_tDBOutput_3) {
								if (batchSizeCounter_tDBOutput_3 > 0) {
									try {
										pstmt_tDBOutput_3.executeBatch();
									} catch (java.sql.BatchUpdateException e_tDBOutput_3) {
										globalMap.put("tDBOutput_3_ERROR_MESSAGE", e_tDBOutput_3.getMessage());
										java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(),
												sqle_tDBOutput_3 = null;
										String errormessage_tDBOutput_3;
										if (ne_tDBOutput_3 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_3 = new java.sql.SQLException(
													e_tDBOutput_3.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_3.getMessage(),
													ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(),
													ne_tDBOutput_3);
											errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
										} else {
											errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
										}

										System.err.println(errormessage_tDBOutput_3);

									}
									tmp_batchUpdateCount_tDBOutput_3 = pstmt_tDBOutput_3.getUpdateCount();
									insertedCount_tDBOutput_3 += (tmp_batchUpdateCount_tDBOutput_3 != -1
											? tmp_batchUpdateCount_tDBOutput_3
											: 0);
									rowsToCommitCount_tDBOutput_3 += (tmp_batchUpdateCount_tDBOutput_3 != -1
											? tmp_batchUpdateCount_tDBOutput_3
											: 0);
								}
								if (rowsToCommitCount_tDBOutput_3 != 0) {

								}
								conn_tDBOutput_3.commit();
								if (rowsToCommitCount_tDBOutput_3 != 0) {

									rowsToCommitCount_tDBOutput_3 = 0;
								}
								commitCounter_tDBOutput_3 = 0;
								batchSizeCounter_tDBOutput_3 = 0;
							}

							tos_count_tDBOutput_3++;

							/**
							 * [tDBOutput_3 main ] stop
							 */

							/**
							 * [tDBOutput_3 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_3";

							/**
							 * [tDBOutput_3 process_data_begin ] stop
							 */

							/**
							 * [tDBOutput_3 process_data_end ] start
							 */

							currentComponent = "tDBOutput_3";

							/**
							 * [tDBOutput_3 process_data_end ] stop
							 */

						} // End of branch "product_out"

						/**
						 * [tMap_3 process_data_end ] start
						 */

						currentComponent = "tMap_3";

						/**
						 * [tMap_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 process_data_end ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 end ] start
						 */

						currentComponent = "tDBInput_3";

					}
				} finally {
					if (rs_tDBInput_3 != null) {
						rs_tDBInput_3.close();
					}
					if (stmt_tDBInput_3 != null) {
						stmt_tDBInput_3.close();
					}
					if (conn_tDBInput_3 != null && !conn_tDBInput_3.isClosed()) {

						conn_tDBInput_3.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}

				globalMap.put("tDBInput_3_NB_LINE", nb_line_tDBInput_3);

				ok_Hash.put("tDBInput_3", true);
				end_Hash.put("tDBInput_3", System.currentTimeMillis());

				/**
				 * [tDBInput_3 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row4 != null) {
					tHash_Lookup_row4.endGet();
				}
				globalMap.remove("tHash_Lookup_row4");

				if (tHash_Lookup_row5 != null) {
					tHash_Lookup_row5.endGet();
				}
				globalMap.remove("tHash_Lookup_row5");

				if (tHash_Lookup_row6 != null) {
					tHash_Lookup_row6.endGet();
				}
				globalMap.remove("tHash_Lookup_row6");

				if (tHash_Lookup_row7 != null) {
					tHash_Lookup_row7.endGet();
				}
				globalMap.remove("tHash_Lookup_row7");

				if (tHash_Lookup_row8 != null) {
					tHash_Lookup_row8.endGet();
				}
				globalMap.remove("tHash_Lookup_row8");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tDBOutput_3 end ] start
				 */

				currentComponent = "tDBOutput_3";

				if (batchSizeCounter_tDBOutput_3 > 0) {
					try {
						if (pstmt_tDBOutput_3 != null) {

							pstmt_tDBOutput_3.executeBatch();

						}
					} catch (java.sql.BatchUpdateException e_tDBOutput_3) {
						globalMap.put("tDBOutput_3_ERROR_MESSAGE", e_tDBOutput_3.getMessage());
						java.sql.SQLException ne_tDBOutput_3 = e_tDBOutput_3.getNextException(),
								sqle_tDBOutput_3 = null;
						String errormessage_tDBOutput_3;
						if (ne_tDBOutput_3 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_3 = new java.sql.SQLException(
									e_tDBOutput_3.getMessage() + "\ncaused by: " + ne_tDBOutput_3.getMessage(),
									ne_tDBOutput_3.getSQLState(), ne_tDBOutput_3.getErrorCode(), ne_tDBOutput_3);
							errormessage_tDBOutput_3 = sqle_tDBOutput_3.getMessage();
						} else {
							errormessage_tDBOutput_3 = e_tDBOutput_3.getMessage();
						}

						System.err.println(errormessage_tDBOutput_3);

					}
					if (pstmt_tDBOutput_3 != null) {
						tmp_batchUpdateCount_tDBOutput_3 = pstmt_tDBOutput_3.getUpdateCount();

						insertedCount_tDBOutput_3

								+= (tmp_batchUpdateCount_tDBOutput_3 != -1 ? tmp_batchUpdateCount_tDBOutput_3 : 0);
						rowsToCommitCount_tDBOutput_3 += (tmp_batchUpdateCount_tDBOutput_3 != -1
								? tmp_batchUpdateCount_tDBOutput_3
								: 0);
					}
				}
				if (pstmt_tDBOutput_3 != null) {

					pstmt_tDBOutput_3.close();
					resourceMap.remove("pstmt_tDBOutput_3");

				}
				resourceMap.put("statementClosed_tDBOutput_3", true);
				if (commitCounter_tDBOutput_3 > 0 && rowsToCommitCount_tDBOutput_3 != 0) {

				}
				conn_tDBOutput_3.commit();
				if (commitCounter_tDBOutput_3 > 0 && rowsToCommitCount_tDBOutput_3 != 0) {

					rowsToCommitCount_tDBOutput_3 = 0;
				}
				commitCounter_tDBOutput_3 = 0;

				conn_tDBOutput_3.close();

				resourceMap.put("finish_tDBOutput_3", true);

				nb_line_deleted_tDBOutput_3 = nb_line_deleted_tDBOutput_3 + deletedCount_tDBOutput_3;
				nb_line_update_tDBOutput_3 = nb_line_update_tDBOutput_3 + updatedCount_tDBOutput_3;
				nb_line_inserted_tDBOutput_3 = nb_line_inserted_tDBOutput_3 + insertedCount_tDBOutput_3;
				nb_line_rejected_tDBOutput_3 = nb_line_rejected_tDBOutput_3 + rejectedCount_tDBOutput_3;

				globalMap.put("tDBOutput_3_NB_LINE", nb_line_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_UPDATED", nb_line_update_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_DELETED", nb_line_deleted_tDBOutput_3);
				globalMap.put("tDBOutput_3_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_3);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "product_out");
				}

				ok_Hash.put("tDBOutput_3", true);
				end_Hash.put("tDBOutput_3", System.currentTimeMillis());

				/**
				 * [tDBOutput_3 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_3"
			globalMap.remove("tHash_Lookup_row4");

			// free memory for "tMap_3"
			globalMap.remove("tHash_Lookup_row5");

			// free memory for "tMap_3"
			globalMap.remove("tHash_Lookup_row6");

			// free memory for "tMap_3"
			globalMap.remove("tHash_Lookup_row7");

			// free memory for "tMap_3"
			globalMap.remove("tHash_Lookup_row8");

			try {

				/**
				 * [tDBInput_3 finally ] start
				 */

				currentComponent = "tDBInput_3";

				/**
				 * [tDBInput_3 finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tDBOutput_3 finally ] start
				 */

				currentComponent = "tDBOutput_3";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_3") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_3 = null;
						if ((pstmtToClose_tDBOutput_3 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_3")) != null) {
							pstmtToClose_tDBOutput_3.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_3") == null) {
						java.sql.Connection ctn_tDBOutput_3 = null;
						if ((ctn_tDBOutput_3 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_3")) != null) {
							try {
								ctn_tDBOutput_3.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_3) {
								String errorMessage_tDBOutput_3 = "failed to close the connection in tDBOutput_3 :"
										+ sqlEx_tDBOutput_3.getMessage();
								System.err.println(errorMessage_tDBOutput_3);
							}
						}
					}
				}

				/**
				 * [tDBOutput_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements routines.system.IPersistableComparableLookupRow<row4Struct> {
		final static byte[] commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];
		static byte[] commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int InventoryID;

		public int getInventoryID() {
			return this.InventoryID;
		}

		public String ProductName;

		public String getProductName() {
			return this.ProductName;
		}

		public String Description;

		public String getDescription() {
			return this.Description;
		}

		public String Brand;

		public String getBrand() {
			return this.Brand;
		}

		public String Specifications;

		public String getSpecifications() {
			return this.Specifications;
		}

		public String Material;

		public String getMaterial() {
			return this.Material;
		}

		public Integer InventoryAmount;

		public Integer getInventoryAmount() {
			return this.InventoryAmount;
		}

		public BigDecimal BuyingPrice;

		public BigDecimal getBuyingPrice() {
			return this.BuyingPrice;
		}

		public BigDecimal ProfitAmount;

		public BigDecimal getProfitAmount() {
			return this.ProfitAmount;
		}

		public Object Status;

		public Object getStatus() {
			return this.Status;
		}

		public Integer SupplierID;

		public Integer getSupplierID() {
			return this.SupplierID;
		}

		public Integer ColorID;

		public Integer getColorID() {
			return this.ColorID;
		}

		public Integer SizeID;

		public Integer getSizeID() {
			return this.SizeID;
		}

		public Integer CatID;

		public Integer getCatID() {
			return this.CatID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.InventoryID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row4Struct other = (row4Struct) obj;

			if (this.InventoryID != other.InventoryID)
				return false;

			return true;
		}

		public void copyDataTo(row4Struct other) {

			other.InventoryID = this.InventoryID;
			other.ProductName = this.ProductName;
			other.Description = this.Description;
			other.Brand = this.Brand;
			other.Specifications = this.Specifications;
			other.Material = this.Material;
			other.InventoryAmount = this.InventoryAmount;
			other.BuyingPrice = this.BuyingPrice;
			other.ProfitAmount = this.ProfitAmount;
			other.Status = this.Status;
			other.SupplierID = this.SupplierID;
			other.ColorID = this.ColorID;
			other.SizeID = this.SizeID;
			other.CatID = this.CatID;

		}

		public void copyKeysDataTo(row4Struct other) {

			other.InventoryID = this.InventoryID;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				unmarshaller.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = unmarshaller.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.InventoryID = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.InventoryID = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.InventoryID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.InventoryID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.ProductName = readString(dis, ois);

				this.Description = readString(dis, ois);

				this.Brand = readString(dis, ois);

				this.Specifications = readString(dis, ois);

				this.Material = readString(dis, ois);

				this.InventoryAmount = readInteger(dis, ois);

				this.BuyingPrice = (BigDecimal) ois.readObject();

				this.ProfitAmount = (BigDecimal) ois.readObject();

				this.Status = (Object) ois.readObject();

				this.SupplierID = readInteger(dis, ois);

				this.ColorID = readInteger(dis, ois);

				this.SizeID = readInteger(dis, ois);

				this.CatID = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
			try {
				int length = 0;

				this.ProductName = readString(dis, objectIn);

				this.Description = readString(dis, objectIn);

				this.Brand = readString(dis, objectIn);

				this.Specifications = readString(dis, objectIn);

				this.Material = readString(dis, objectIn);

				this.InventoryAmount = readInteger(dis, objectIn);

				this.BuyingPrice = (BigDecimal) objectIn.readObject();

				this.ProfitAmount = (BigDecimal) objectIn.readObject();

				this.Status = (Object) objectIn.readObject();

				this.SupplierID = readInteger(dis, objectIn);

				this.ColorID = readInteger(dis, objectIn);

				this.SizeID = readInteger(dis, objectIn);

				this.CatID = readInteger(dis, objectIn);

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.ProductName, dos, oos);

				writeString(this.Description, dos, oos);

				writeString(this.Brand, dos, oos);

				writeString(this.Specifications, dos, oos);

				writeString(this.Material, dos, oos);

				writeInteger(this.InventoryAmount, dos, oos);

				oos.writeObject(this.BuyingPrice);

				oos.writeObject(this.ProfitAmount);

				oos.writeObject(this.Status);

				writeInteger(this.SupplierID, dos, oos);

				writeInteger(this.ColorID, dos, oos);

				writeInteger(this.SizeID, dos, oos);

				writeInteger(this.CatID, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut) {
			try {

				writeString(this.ProductName, dos, objectOut);

				writeString(this.Description, dos, objectOut);

				writeString(this.Brand, dos, objectOut);

				writeString(this.Specifications, dos, objectOut);

				writeString(this.Material, dos, objectOut);

				writeInteger(this.InventoryAmount, dos, objectOut);

				objectOut.writeObject(this.BuyingPrice);

				objectOut.writeObject(this.ProfitAmount);

				objectOut.writeObject(this.Status);

				writeInteger(this.SupplierID, dos, objectOut);

				writeInteger(this.ColorID, dos, objectOut);

				writeInteger(this.SizeID, dos, objectOut);

				writeInteger(this.CatID, dos, objectOut);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}

		public boolean supportMarshaller() {
			return true;
		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("InventoryID=" + String.valueOf(InventoryID));
			sb.append(",ProductName=" + ProductName);
			sb.append(",Description=" + Description);
			sb.append(",Brand=" + Brand);
			sb.append(",Specifications=" + Specifications);
			sb.append(",Material=" + Material);
			sb.append(",InventoryAmount=" + String.valueOf(InventoryAmount));
			sb.append(",BuyingPrice=" + String.valueOf(BuyingPrice));
			sb.append(",ProfitAmount=" + String.valueOf(ProfitAmount));
			sb.append(",Status=" + String.valueOf(Status));
			sb.append(",SupplierID=" + String.valueOf(SupplierID));
			sb.append(",ColorID=" + String.valueOf(ColorID));
			sb.append(",SizeID=" + String.valueOf(SizeID));
			sb.append(",CatID=" + String.valueOf(CatID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.InventoryID, other.InventoryID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();

				/**
				 * [tAdvancedHash_row4 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row4", false);
				start_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row4");
				}

				int tos_count_tAdvancedHash_row4 = 0;

				// connection name:row4
				// source node:tDBInput_4 - inputs:(after_tDBInput_3) outputs:(row4,row4) |
				// target node:tAdvancedHash_row4 - inputs:(row4) outputs:()
				// linked node: tMap_3 - inputs:(row3,row4,row5,row6,row7,row8)
				// outputs:(product_out)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row4 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row4Struct>getLookup(matchingModeEnum_row4);

				globalMap.put("tHash_Lookup_row4", tHash_Lookup_row4);

				/**
				 * [tAdvancedHash_row4 begin ] stop
				 */

				/**
				 * [tDBInput_4 begin ] start
				 */

				ok_Hash.put("tDBInput_4", false);
				start_Hash.put("tDBInput_4", System.currentTimeMillis());

				currentComponent = "tDBInput_4";

				int tos_count_tDBInput_4 = 0;

				java.util.Calendar calendar_tDBInput_4 = java.util.Calendar.getInstance();
				calendar_tDBInput_4.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_4 = calendar_tDBInput_4.getTime();
				int nb_line_tDBInput_4 = 0;
				java.sql.Connection conn_tDBInput_4 = null;
				String driverClass_tDBInput_4 = "com.mysql.cj.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_4 = java.lang.Class.forName(driverClass_tDBInput_4);
				String dbUser_tDBInput_4 = "root";

				final String decryptedPassword_tDBInput_4 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:Do4uTpvoKNgP7eMuDO3rlCGFW4JSvPi/qiG4CQmmgUIVvlSA");

				String dbPwd_tDBInput_4 = decryptedPassword_tDBInput_4;

				String properties_tDBInput_4 = "noDatetimeStringSync=true&enabledTLSProtocols=TLSv1.2,TLSv1.1,TLSv1";
				if (properties_tDBInput_4 == null || properties_tDBInput_4.trim().length() == 0) {
					properties_tDBInput_4 = "";
				}
				String url_tDBInput_4 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "clothing_storeDB" + "?"
						+ properties_tDBInput_4;

				conn_tDBInput_4 = java.sql.DriverManager.getConnection(url_tDBInput_4, dbUser_tDBInput_4,
						dbPwd_tDBInput_4);

				java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

				String dbquery_tDBInput_4 = "SELECT \n  `inventory`.`InventoryID`, \n  `inventory`.`ProductName`, \n  `inventory`.`Description`, \n  `inventory`.`Brand`"
						+ ", \n  `inventory`.`Specifications`, \n  `inventory`.`Material`, \n  `inventory`.`InventoryAmount`, \n  `inventory`.`BuyingPr"
						+ "ice`, \n  `inventory`.`ProfitAmount`, \n  `inventory`.`Status`, \n  `inventory`.`SupplierID`, \n  `inventory`.`ColorID`, \n  "
						+ "`inventory`.`SizeID`, \n  `inventory`.`CatID`\nFROM `inventory`";

				globalMap.put("tDBInput_4_QUERY", dbquery_tDBInput_4);
				java.sql.ResultSet rs_tDBInput_4 = null;

				try {
					rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
					java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
					int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

					String tmpContent_tDBInput_4 = null;

					while (rs_tDBInput_4.next()) {
						nb_line_tDBInput_4++;

						if (colQtyInRs_tDBInput_4 < 1) {
							row4.InventoryID = 0;
						} else {

							row4.InventoryID = rs_tDBInput_4.getInt(1);
							if (rs_tDBInput_4.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 2) {
							row4.ProductName = null;
						} else {

							row4.ProductName = routines.system.JDBCUtil.getString(rs_tDBInput_4, 2, false);
						}
						if (colQtyInRs_tDBInput_4 < 3) {
							row4.Description = null;
						} else {

							row4.Description = routines.system.JDBCUtil.getString(rs_tDBInput_4, 3, false);
						}
						if (colQtyInRs_tDBInput_4 < 4) {
							row4.Brand = null;
						} else {

							row4.Brand = routines.system.JDBCUtil.getString(rs_tDBInput_4, 4, false);
						}
						if (colQtyInRs_tDBInput_4 < 5) {
							row4.Specifications = null;
						} else {

							row4.Specifications = routines.system.JDBCUtil.getString(rs_tDBInput_4, 5, false);
						}
						if (colQtyInRs_tDBInput_4 < 6) {
							row4.Material = null;
						} else {

							row4.Material = routines.system.JDBCUtil.getString(rs_tDBInput_4, 6, false);
						}
						if (colQtyInRs_tDBInput_4 < 7) {
							row4.InventoryAmount = null;
						} else {

							row4.InventoryAmount = rs_tDBInput_4.getInt(7);
							if (rs_tDBInput_4.wasNull()) {
								row4.InventoryAmount = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 8) {
							row4.BuyingPrice = null;
						} else {

							row4.BuyingPrice = rs_tDBInput_4.getBigDecimal(8);
							if (rs_tDBInput_4.wasNull()) {
								row4.BuyingPrice = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 9) {
							row4.ProfitAmount = null;
						} else {

							row4.ProfitAmount = rs_tDBInput_4.getBigDecimal(9);
							if (rs_tDBInput_4.wasNull()) {
								row4.ProfitAmount = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 10) {
							row4.Status = null;
						} else {

							row4.Status = rs_tDBInput_4.getObject(10);
							if (rs_tDBInput_4.wasNull()) {
								row4.Status = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 11) {
							row4.SupplierID = null;
						} else {

							row4.SupplierID = rs_tDBInput_4.getInt(11);
							if (rs_tDBInput_4.wasNull()) {
								row4.SupplierID = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 12) {
							row4.ColorID = null;
						} else {

							row4.ColorID = rs_tDBInput_4.getInt(12);
							if (rs_tDBInput_4.wasNull()) {
								row4.ColorID = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 13) {
							row4.SizeID = null;
						} else {

							row4.SizeID = rs_tDBInput_4.getInt(13);
							if (rs_tDBInput_4.wasNull()) {
								row4.SizeID = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 14) {
							row4.CatID = null;
						} else {

							row4.CatID = rs_tDBInput_4.getInt(14);
							if (rs_tDBInput_4.wasNull()) {
								row4.CatID = null;
							}
						}

						/**
						 * [tDBInput_4 begin ] stop
						 */

						/**
						 * [tDBInput_4 main ] start
						 */

						currentComponent = "tDBInput_4";

						tos_count_tDBInput_4++;

						/**
						 * [tDBInput_4 main ] stop
						 */

						/**
						 * [tDBInput_4 process_data_begin ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row4 main ] start
						 */

						currentComponent = "tAdvancedHash_row4";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row4"

							);
						}

						row4Struct row4_HashRow = new row4Struct();

						row4_HashRow.InventoryID = row4.InventoryID;

						row4_HashRow.ProductName = row4.ProductName;

						row4_HashRow.Description = row4.Description;

						row4_HashRow.Brand = row4.Brand;

						row4_HashRow.Specifications = row4.Specifications;

						row4_HashRow.Material = row4.Material;

						row4_HashRow.InventoryAmount = row4.InventoryAmount;

						row4_HashRow.BuyingPrice = row4.BuyingPrice;

						row4_HashRow.ProfitAmount = row4.ProfitAmount;

						row4_HashRow.Status = row4.Status;

						row4_HashRow.SupplierID = row4.SupplierID;

						row4_HashRow.ColorID = row4.ColorID;

						row4_HashRow.SizeID = row4.SizeID;

						row4_HashRow.CatID = row4.CatID;

						tHash_Lookup_row4.put(row4_HashRow);

						tos_count_tAdvancedHash_row4++;

						/**
						 * [tAdvancedHash_row4 main ] stop
						 */

						/**
						 * [tAdvancedHash_row4 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row4";

						/**
						 * [tAdvancedHash_row4 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row4 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row4";

						/**
						 * [tAdvancedHash_row4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 process_data_end ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 end ] start
						 */

						currentComponent = "tDBInput_4";

					}
				} finally {
					if (rs_tDBInput_4 != null) {
						rs_tDBInput_4.close();
					}
					if (stmt_tDBInput_4 != null) {
						stmt_tDBInput_4.close();
					}
					if (conn_tDBInput_4 != null && !conn_tDBInput_4.isClosed()) {

						conn_tDBInput_4.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}

				globalMap.put("tDBInput_4_NB_LINE", nb_line_tDBInput_4);

				ok_Hash.put("tDBInput_4", true);
				end_Hash.put("tDBInput_4", System.currentTimeMillis());

				/**
				 * [tDBInput_4 end ] stop
				 */

				/**
				 * [tAdvancedHash_row4 end ] start
				 */

				currentComponent = "tAdvancedHash_row4";

				tHash_Lookup_row4.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row4");
				}

				ok_Hash.put("tAdvancedHash_row4", true);
				end_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row4 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_4 finally ] start
				 */

				currentComponent = "tDBInput_4";

				/**
				 * [tDBInput_4 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row4 finally ] start
				 */

				currentComponent = "tAdvancedHash_row4";

				/**
				 * [tAdvancedHash_row4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}

	public static class row5Struct implements routines.system.IPersistableComparableLookupRow<row5Struct> {
		final static byte[] commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];
		static byte[] commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int ImageID;

		public int getImageID() {
			return this.ImageID;
		}

		public String URL;

		public String getURL() {
			return this.URL;
		}

		public int ProductID;

		public int getProductID() {
			return this.ProductID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.ProductID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row5Struct other = (row5Struct) obj;

			if (this.ProductID != other.ProductID)
				return false;

			return true;
		}

		public void copyDataTo(row5Struct other) {

			other.ImageID = this.ImageID;
			other.URL = this.URL;
			other.ProductID = this.ProductID;

		}

		public void copyKeysDataTo(row5Struct other) {

			other.ProductID = this.ProductID;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				unmarshaller.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.ProductID = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.ProductID = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ProductID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.ProductID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.ImageID = dis.readInt();

				this.URL = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
			try {
				int length = 0;

				this.ImageID = objectIn.readInt();

				this.URL = readString(dis, objectIn);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.ImageID);

				writeString(this.URL, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut) {
			try {

				objectOut.writeInt(this.ImageID);

				writeString(this.URL, dos, objectOut);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}

		public boolean supportMarshaller() {
			return true;
		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ImageID=" + String.valueOf(ImageID));
			sb.append(",URL=" + URL);
			sb.append(",ProductID=" + String.valueOf(ProductID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ProductID, other.ProductID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row5Struct row5 = new row5Struct();

				/**
				 * [tAdvancedHash_row5 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row5", false);
				start_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row5");
				}

				int tos_count_tAdvancedHash_row5 = 0;

				// connection name:row5
				// source node:tDBInput_5 - inputs:(after_tDBInput_3) outputs:(row5,row5) |
				// target node:tAdvancedHash_row5 - inputs:(row5) outputs:()
				// linked node: tMap_3 - inputs:(row3,row4,row5,row6,row7,row8)
				// outputs:(product_out)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row5 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row5Struct>getLookup(matchingModeEnum_row5);

				globalMap.put("tHash_Lookup_row5", tHash_Lookup_row5);

				/**
				 * [tAdvancedHash_row5 begin ] stop
				 */

				/**
				 * [tDBInput_5 begin ] start
				 */

				ok_Hash.put("tDBInput_5", false);
				start_Hash.put("tDBInput_5", System.currentTimeMillis());

				currentComponent = "tDBInput_5";

				int tos_count_tDBInput_5 = 0;

				java.util.Calendar calendar_tDBInput_5 = java.util.Calendar.getInstance();
				calendar_tDBInput_5.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_5 = calendar_tDBInput_5.getTime();
				int nb_line_tDBInput_5 = 0;
				java.sql.Connection conn_tDBInput_5 = null;
				String driverClass_tDBInput_5 = "com.mysql.cj.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_5 = java.lang.Class.forName(driverClass_tDBInput_5);
				String dbUser_tDBInput_5 = "root";

				final String decryptedPassword_tDBInput_5 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:X9+brsTX+AOlR0hgzIfjDgK5e2DHBQgPJGLBeEt1YbLEIGl6");

				String dbPwd_tDBInput_5 = decryptedPassword_tDBInput_5;

				String properties_tDBInput_5 = "noDatetimeStringSync=true&enabledTLSProtocols=TLSv1.2,TLSv1.1,TLSv1";
				if (properties_tDBInput_5 == null || properties_tDBInput_5.trim().length() == 0) {
					properties_tDBInput_5 = "";
				}
				String url_tDBInput_5 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "clothing_storeDB" + "?"
						+ properties_tDBInput_5;

				conn_tDBInput_5 = java.sql.DriverManager.getConnection(url_tDBInput_5, dbUser_tDBInput_5,
						dbPwd_tDBInput_5);

				java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5.createStatement();

				String dbquery_tDBInput_5 = "SELECT \n  `productimages`.`ImageID`, \n  `productimages`.`URL`, \n  `productimages`.`ProductID`\nFROM `productimages`";

				globalMap.put("tDBInput_5_QUERY", dbquery_tDBInput_5);
				java.sql.ResultSet rs_tDBInput_5 = null;

				try {
					rs_tDBInput_5 = stmt_tDBInput_5.executeQuery(dbquery_tDBInput_5);
					java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5.getMetaData();
					int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5.getColumnCount();

					String tmpContent_tDBInput_5 = null;

					while (rs_tDBInput_5.next()) {
						nb_line_tDBInput_5++;

						if (colQtyInRs_tDBInput_5 < 1) {
							row5.ImageID = 0;
						} else {

							row5.ImageID = rs_tDBInput_5.getInt(1);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 2) {
							row5.URL = null;
						} else {

							row5.URL = routines.system.JDBCUtil.getString(rs_tDBInput_5, 2, false);
						}
						if (colQtyInRs_tDBInput_5 < 3) {
							row5.ProductID = 0;
						} else {

							row5.ProductID = rs_tDBInput_5.getInt(3);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}

						/**
						 * [tDBInput_5 begin ] stop
						 */

						/**
						 * [tDBInput_5 main ] start
						 */

						currentComponent = "tDBInput_5";

						tos_count_tDBInput_5++;

						/**
						 * [tDBInput_5 main ] stop
						 */

						/**
						 * [tDBInput_5 process_data_begin ] start
						 */

						currentComponent = "tDBInput_5";

						/**
						 * [tDBInput_5 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row5 main ] start
						 */

						currentComponent = "tAdvancedHash_row5";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row5"

							);
						}

						row5Struct row5_HashRow = new row5Struct();

						row5_HashRow.ImageID = row5.ImageID;

						row5_HashRow.URL = row5.URL;

						row5_HashRow.ProductID = row5.ProductID;

						tHash_Lookup_row5.put(row5_HashRow);

						tos_count_tAdvancedHash_row5++;

						/**
						 * [tAdvancedHash_row5 main ] stop
						 */

						/**
						 * [tAdvancedHash_row5 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row5";

						/**
						 * [tAdvancedHash_row5 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row5 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row5";

						/**
						 * [tAdvancedHash_row5 process_data_end ] stop
						 */

						/**
						 * [tDBInput_5 process_data_end ] start
						 */

						currentComponent = "tDBInput_5";

						/**
						 * [tDBInput_5 process_data_end ] stop
						 */

						/**
						 * [tDBInput_5 end ] start
						 */

						currentComponent = "tDBInput_5";

					}
				} finally {
					if (rs_tDBInput_5 != null) {
						rs_tDBInput_5.close();
					}
					if (stmt_tDBInput_5 != null) {
						stmt_tDBInput_5.close();
					}
					if (conn_tDBInput_5 != null && !conn_tDBInput_5.isClosed()) {

						conn_tDBInput_5.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}

				globalMap.put("tDBInput_5_NB_LINE", nb_line_tDBInput_5);

				ok_Hash.put("tDBInput_5", true);
				end_Hash.put("tDBInput_5", System.currentTimeMillis());

				/**
				 * [tDBInput_5 end ] stop
				 */

				/**
				 * [tAdvancedHash_row5 end ] start
				 */

				currentComponent = "tAdvancedHash_row5";

				tHash_Lookup_row5.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row5");
				}

				ok_Hash.put("tAdvancedHash_row5", true);
				end_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row5 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_5 finally ] start
				 */

				currentComponent = "tDBInput_5";

				/**
				 * [tDBInput_5 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row5 finally ] start
				 */

				currentComponent = "tAdvancedHash_row5";

				/**
				 * [tAdvancedHash_row5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}

	public static class row6Struct implements routines.system.IPersistableComparableLookupRow<row6Struct> {
		final static byte[] commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];
		static byte[] commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int ColorID;

		public int getColorID() {
			return this.ColorID;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String HexCode;

		public String getHexCode() {
			return this.HexCode;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.ColorID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row6Struct other = (row6Struct) obj;

			if (this.ColorID != other.ColorID)
				return false;

			return true;
		}

		public void copyDataTo(row6Struct other) {

			other.ColorID = this.ColorID;
			other.Name = this.Name;
			other.HexCode = this.HexCode;

		}

		public void copyKeysDataTo(row6Struct other) {

			other.ColorID = this.ColorID;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				unmarshaller.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.ColorID = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.ColorID = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ColorID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.ColorID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.Name = readString(dis, ois);

				this.HexCode = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
			try {
				int length = 0;

				this.Name = readString(dis, objectIn);

				this.HexCode = readString(dis, objectIn);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.Name, dos, oos);

				writeString(this.HexCode, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut) {
			try {

				writeString(this.Name, dos, objectOut);

				writeString(this.HexCode, dos, objectOut);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}

		public boolean supportMarshaller() {
			return true;
		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ColorID=" + String.valueOf(ColorID));
			sb.append(",Name=" + Name);
			sb.append(",HexCode=" + HexCode);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ColorID, other.ColorID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row6Struct row6 = new row6Struct();

				/**
				 * [tAdvancedHash_row6 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row6", false);
				start_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row6";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row6");
				}

				int tos_count_tAdvancedHash_row6 = 0;

				// connection name:row6
				// source node:tDBInput_6 - inputs:(after_tDBInput_3) outputs:(row6,row6) |
				// target node:tAdvancedHash_row6 - inputs:(row6) outputs:()
				// linked node: tMap_3 - inputs:(row3,row4,row5,row6,row7,row8)
				// outputs:(product_out)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row6 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row6Struct>getLookup(matchingModeEnum_row6);

				globalMap.put("tHash_Lookup_row6", tHash_Lookup_row6);

				/**
				 * [tAdvancedHash_row6 begin ] stop
				 */

				/**
				 * [tDBInput_6 begin ] start
				 */

				ok_Hash.put("tDBInput_6", false);
				start_Hash.put("tDBInput_6", System.currentTimeMillis());

				currentComponent = "tDBInput_6";

				int tos_count_tDBInput_6 = 0;

				java.util.Calendar calendar_tDBInput_6 = java.util.Calendar.getInstance();
				calendar_tDBInput_6.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_6 = calendar_tDBInput_6.getTime();
				int nb_line_tDBInput_6 = 0;
				java.sql.Connection conn_tDBInput_6 = null;
				String driverClass_tDBInput_6 = "com.mysql.cj.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_6 = java.lang.Class.forName(driverClass_tDBInput_6);
				String dbUser_tDBInput_6 = "root";

				final String decryptedPassword_tDBInput_6 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:XJ0Z+zLENx+YBxwwKq83k2MMEVTOd1/MyI3NPk1/xJRpySPO");

				String dbPwd_tDBInput_6 = decryptedPassword_tDBInput_6;

				String properties_tDBInput_6 = "noDatetimeStringSync=true&enabledTLSProtocols=TLSv1.2,TLSv1.1,TLSv1";
				if (properties_tDBInput_6 == null || properties_tDBInput_6.trim().length() == 0) {
					properties_tDBInput_6 = "";
				}
				String url_tDBInput_6 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "clothing_storeDB" + "?"
						+ properties_tDBInput_6;

				conn_tDBInput_6 = java.sql.DriverManager.getConnection(url_tDBInput_6, dbUser_tDBInput_6,
						dbPwd_tDBInput_6);

				java.sql.Statement stmt_tDBInput_6 = conn_tDBInput_6.createStatement();

				String dbquery_tDBInput_6 = "SELECT \n  `color`.`ColorID`, \n  `color`.`Name`, \n  `color`.`HexCode`\nFROM `color`";

				globalMap.put("tDBInput_6_QUERY", dbquery_tDBInput_6);
				java.sql.ResultSet rs_tDBInput_6 = null;

				try {
					rs_tDBInput_6 = stmt_tDBInput_6.executeQuery(dbquery_tDBInput_6);
					java.sql.ResultSetMetaData rsmd_tDBInput_6 = rs_tDBInput_6.getMetaData();
					int colQtyInRs_tDBInput_6 = rsmd_tDBInput_6.getColumnCount();

					String tmpContent_tDBInput_6 = null;

					while (rs_tDBInput_6.next()) {
						nb_line_tDBInput_6++;

						if (colQtyInRs_tDBInput_6 < 1) {
							row6.ColorID = 0;
						} else {

							row6.ColorID = rs_tDBInput_6.getInt(1);
							if (rs_tDBInput_6.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_6 < 2) {
							row6.Name = null;
						} else {

							row6.Name = routines.system.JDBCUtil.getString(rs_tDBInput_6, 2, false);
						}
						if (colQtyInRs_tDBInput_6 < 3) {
							row6.HexCode = null;
						} else {

							row6.HexCode = routines.system.JDBCUtil.getString(rs_tDBInput_6, 3, false);
						}

						/**
						 * [tDBInput_6 begin ] stop
						 */

						/**
						 * [tDBInput_6 main ] start
						 */

						currentComponent = "tDBInput_6";

						tos_count_tDBInput_6++;

						/**
						 * [tDBInput_6 main ] stop
						 */

						/**
						 * [tDBInput_6 process_data_begin ] start
						 */

						currentComponent = "tDBInput_6";

						/**
						 * [tDBInput_6 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row6 main ] start
						 */

						currentComponent = "tAdvancedHash_row6";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row6"

							);
						}

						row6Struct row6_HashRow = new row6Struct();

						row6_HashRow.ColorID = row6.ColorID;

						row6_HashRow.Name = row6.Name;

						row6_HashRow.HexCode = row6.HexCode;

						tHash_Lookup_row6.put(row6_HashRow);

						tos_count_tAdvancedHash_row6++;

						/**
						 * [tAdvancedHash_row6 main ] stop
						 */

						/**
						 * [tAdvancedHash_row6 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row6";

						/**
						 * [tAdvancedHash_row6 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row6 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row6";

						/**
						 * [tAdvancedHash_row6 process_data_end ] stop
						 */

						/**
						 * [tDBInput_6 process_data_end ] start
						 */

						currentComponent = "tDBInput_6";

						/**
						 * [tDBInput_6 process_data_end ] stop
						 */

						/**
						 * [tDBInput_6 end ] start
						 */

						currentComponent = "tDBInput_6";

					}
				} finally {
					if (rs_tDBInput_6 != null) {
						rs_tDBInput_6.close();
					}
					if (stmt_tDBInput_6 != null) {
						stmt_tDBInput_6.close();
					}
					if (conn_tDBInput_6 != null && !conn_tDBInput_6.isClosed()) {

						conn_tDBInput_6.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}

				globalMap.put("tDBInput_6_NB_LINE", nb_line_tDBInput_6);

				ok_Hash.put("tDBInput_6", true);
				end_Hash.put("tDBInput_6", System.currentTimeMillis());

				/**
				 * [tDBInput_6 end ] stop
				 */

				/**
				 * [tAdvancedHash_row6 end ] start
				 */

				currentComponent = "tAdvancedHash_row6";

				tHash_Lookup_row6.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row6");
				}

				ok_Hash.put("tAdvancedHash_row6", true);
				end_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row6 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_6 finally ] start
				 */

				currentComponent = "tDBInput_6";

				/**
				 * [tDBInput_6 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row6 finally ] start
				 */

				currentComponent = "tAdvancedHash_row6";

				/**
				 * [tAdvancedHash_row6 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 1);
	}

	public static class row7Struct implements routines.system.IPersistableComparableLookupRow<row7Struct> {
		final static byte[] commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];
		static byte[] commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int SizeID;

		public int getSizeID() {
			return this.SizeID;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Measurements;

		public String getMeasurements() {
			return this.Measurements;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.SizeID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row7Struct other = (row7Struct) obj;

			if (this.SizeID != other.SizeID)
				return false;

			return true;
		}

		public void copyDataTo(row7Struct other) {

			other.SizeID = this.SizeID;
			other.Name = this.Name;
			other.Measurements = this.Measurements;

		}

		public void copyKeysDataTo(row7Struct other) {

			other.SizeID = this.SizeID;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				unmarshaller.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.SizeID = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.SizeID = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.SizeID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.SizeID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.Name = readString(dis, ois);

				this.Measurements = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
			try {
				int length = 0;

				this.Name = readString(dis, objectIn);

				this.Measurements = readString(dis, objectIn);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.Name, dos, oos);

				writeString(this.Measurements, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut) {
			try {

				writeString(this.Name, dos, objectOut);

				writeString(this.Measurements, dos, objectOut);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}

		public boolean supportMarshaller() {
			return true;
		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SizeID=" + String.valueOf(SizeID));
			sb.append(",Name=" + Name);
			sb.append(",Measurements=" + Measurements);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.SizeID, other.SizeID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row7Struct row7 = new row7Struct();

				/**
				 * [tAdvancedHash_row7 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row7", false);
				start_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row7";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row7");
				}

				int tos_count_tAdvancedHash_row7 = 0;

				// connection name:row7
				// source node:tDBInput_7 - inputs:(after_tDBInput_3) outputs:(row7,row7) |
				// target node:tAdvancedHash_row7 - inputs:(row7) outputs:()
				// linked node: tMap_3 - inputs:(row3,row4,row5,row6,row7,row8)
				// outputs:(product_out)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row7 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row7Struct>getLookup(matchingModeEnum_row7);

				globalMap.put("tHash_Lookup_row7", tHash_Lookup_row7);

				/**
				 * [tAdvancedHash_row7 begin ] stop
				 */

				/**
				 * [tDBInput_7 begin ] start
				 */

				ok_Hash.put("tDBInput_7", false);
				start_Hash.put("tDBInput_7", System.currentTimeMillis());

				currentComponent = "tDBInput_7";

				int tos_count_tDBInput_7 = 0;

				java.util.Calendar calendar_tDBInput_7 = java.util.Calendar.getInstance();
				calendar_tDBInput_7.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_7 = calendar_tDBInput_7.getTime();
				int nb_line_tDBInput_7 = 0;
				java.sql.Connection conn_tDBInput_7 = null;
				String driverClass_tDBInput_7 = "com.mysql.cj.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_7 = java.lang.Class.forName(driverClass_tDBInput_7);
				String dbUser_tDBInput_7 = "root";

				final String decryptedPassword_tDBInput_7 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:cS12Qtz2tU47VeYAclIky13i9LW4BzEx4UYOVNN6UNDLfasF");

				String dbPwd_tDBInput_7 = decryptedPassword_tDBInput_7;

				String properties_tDBInput_7 = "noDatetimeStringSync=true&enabledTLSProtocols=TLSv1.2,TLSv1.1,TLSv1";
				if (properties_tDBInput_7 == null || properties_tDBInput_7.trim().length() == 0) {
					properties_tDBInput_7 = "";
				}
				String url_tDBInput_7 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "clothing_storeDB" + "?"
						+ properties_tDBInput_7;

				conn_tDBInput_7 = java.sql.DriverManager.getConnection(url_tDBInput_7, dbUser_tDBInput_7,
						dbPwd_tDBInput_7);

				java.sql.Statement stmt_tDBInput_7 = conn_tDBInput_7.createStatement();

				String dbquery_tDBInput_7 = "SELECT \n  `size`.`SizeID`, \n  `size`.`Name`, \n  `size`.`Measurements`\nFROM `size`";

				globalMap.put("tDBInput_7_QUERY", dbquery_tDBInput_7);
				java.sql.ResultSet rs_tDBInput_7 = null;

				try {
					rs_tDBInput_7 = stmt_tDBInput_7.executeQuery(dbquery_tDBInput_7);
					java.sql.ResultSetMetaData rsmd_tDBInput_7 = rs_tDBInput_7.getMetaData();
					int colQtyInRs_tDBInput_7 = rsmd_tDBInput_7.getColumnCount();

					String tmpContent_tDBInput_7 = null;

					while (rs_tDBInput_7.next()) {
						nb_line_tDBInput_7++;

						if (colQtyInRs_tDBInput_7 < 1) {
							row7.SizeID = 0;
						} else {

							row7.SizeID = rs_tDBInput_7.getInt(1);
							if (rs_tDBInput_7.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_7 < 2) {
							row7.Name = null;
						} else {

							row7.Name = routines.system.JDBCUtil.getString(rs_tDBInput_7, 2, false);
						}
						if (colQtyInRs_tDBInput_7 < 3) {
							row7.Measurements = null;
						} else {

							row7.Measurements = routines.system.JDBCUtil.getString(rs_tDBInput_7, 3, false);
						}

						/**
						 * [tDBInput_7 begin ] stop
						 */

						/**
						 * [tDBInput_7 main ] start
						 */

						currentComponent = "tDBInput_7";

						tos_count_tDBInput_7++;

						/**
						 * [tDBInput_7 main ] stop
						 */

						/**
						 * [tDBInput_7 process_data_begin ] start
						 */

						currentComponent = "tDBInput_7";

						/**
						 * [tDBInput_7 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row7 main ] start
						 */

						currentComponent = "tAdvancedHash_row7";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row7"

							);
						}

						row7Struct row7_HashRow = new row7Struct();

						row7_HashRow.SizeID = row7.SizeID;

						row7_HashRow.Name = row7.Name;

						row7_HashRow.Measurements = row7.Measurements;

						tHash_Lookup_row7.put(row7_HashRow);

						tos_count_tAdvancedHash_row7++;

						/**
						 * [tAdvancedHash_row7 main ] stop
						 */

						/**
						 * [tAdvancedHash_row7 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row7";

						/**
						 * [tAdvancedHash_row7 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row7 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row7";

						/**
						 * [tAdvancedHash_row7 process_data_end ] stop
						 */

						/**
						 * [tDBInput_7 process_data_end ] start
						 */

						currentComponent = "tDBInput_7";

						/**
						 * [tDBInput_7 process_data_end ] stop
						 */

						/**
						 * [tDBInput_7 end ] start
						 */

						currentComponent = "tDBInput_7";

					}
				} finally {
					if (rs_tDBInput_7 != null) {
						rs_tDBInput_7.close();
					}
					if (stmt_tDBInput_7 != null) {
						stmt_tDBInput_7.close();
					}
					if (conn_tDBInput_7 != null && !conn_tDBInput_7.isClosed()) {

						conn_tDBInput_7.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}

				globalMap.put("tDBInput_7_NB_LINE", nb_line_tDBInput_7);

				ok_Hash.put("tDBInput_7", true);
				end_Hash.put("tDBInput_7", System.currentTimeMillis());

				/**
				 * [tDBInput_7 end ] stop
				 */

				/**
				 * [tAdvancedHash_row7 end ] start
				 */

				currentComponent = "tAdvancedHash_row7";

				tHash_Lookup_row7.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row7");
				}

				ok_Hash.put("tAdvancedHash_row7", true);
				end_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row7 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_7 finally ] start
				 */

				currentComponent = "tDBInput_7";

				/**
				 * [tDBInput_7 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row7 finally ] start
				 */

				currentComponent = "tAdvancedHash_row7";

				/**
				 * [tAdvancedHash_row7 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_7_SUBPROCESS_STATE", 1);
	}

	public static class row8Struct implements routines.system.IPersistableComparableLookupRow<row8Struct> {
		final static byte[] commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];
		static byte[] commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int CatID;

		public int getCatID() {
			return this.CatID;
		}

		public String Category;

		public String getCategory() {
			return this.Category;
		}

		public String Description;

		public String getDescription() {
			return this.Description;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.CatID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row8Struct other = (row8Struct) obj;

			if (this.CatID != other.CatID)
				return false;

			return true;
		}

		public void copyDataTo(row8Struct other) {

			other.CatID = this.CatID;
			other.Category = this.Category;
			other.Description = this.Description;

		}

		public void copyKeysDataTo(row8Struct other) {

			other.CatID = this.CatID;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				unmarshaller.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.CatID = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.CatID = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.CatID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.CatID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.Category = readString(dis, ois);

				this.Description = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
			try {
				int length = 0;

				this.Category = readString(dis, objectIn);

				this.Description = readString(dis, objectIn);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.Category, dos, oos);

				writeString(this.Description, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut) {
			try {

				writeString(this.Category, dos, objectOut);

				writeString(this.Description, dos, objectOut);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}

		public boolean supportMarshaller() {
			return true;
		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CatID=" + String.valueOf(CatID));
			sb.append(",Category=" + Category);
			sb.append(",Description=" + Description);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CatID, other.CatID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row8Struct row8 = new row8Struct();

				/**
				 * [tAdvancedHash_row8 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row8", false);
				start_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row8";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row8");
				}

				int tos_count_tAdvancedHash_row8 = 0;

				// connection name:row8
				// source node:tDBInput_8 - inputs:(after_tDBInput_3) outputs:(row8,row8) |
				// target node:tAdvancedHash_row8 - inputs:(row8) outputs:()
				// linked node: tMap_3 - inputs:(row3,row4,row5,row6,row7,row8)
				// outputs:(product_out)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row8 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row8Struct>getLookup(matchingModeEnum_row8);

				globalMap.put("tHash_Lookup_row8", tHash_Lookup_row8);

				/**
				 * [tAdvancedHash_row8 begin ] stop
				 */

				/**
				 * [tDBInput_8 begin ] start
				 */

				ok_Hash.put("tDBInput_8", false);
				start_Hash.put("tDBInput_8", System.currentTimeMillis());

				currentComponent = "tDBInput_8";

				int tos_count_tDBInput_8 = 0;

				java.util.Calendar calendar_tDBInput_8 = java.util.Calendar.getInstance();
				calendar_tDBInput_8.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_8 = calendar_tDBInput_8.getTime();
				int nb_line_tDBInput_8 = 0;
				java.sql.Connection conn_tDBInput_8 = null;
				String driverClass_tDBInput_8 = "com.mysql.cj.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_8 = java.lang.Class.forName(driverClass_tDBInput_8);
				String dbUser_tDBInput_8 = "root";

				final String decryptedPassword_tDBInput_8 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:IKOb6ReXz7maVe2LKnv1TUVpVVZu5bcl8THSaKq4NR3oMzIR");

				String dbPwd_tDBInput_8 = decryptedPassword_tDBInput_8;

				String properties_tDBInput_8 = "noDatetimeStringSync=true&enabledTLSProtocols=TLSv1.2,TLSv1.1,TLSv1";
				if (properties_tDBInput_8 == null || properties_tDBInput_8.trim().length() == 0) {
					properties_tDBInput_8 = "";
				}
				String url_tDBInput_8 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "clothing_storeDB" + "?"
						+ properties_tDBInput_8;

				conn_tDBInput_8 = java.sql.DriverManager.getConnection(url_tDBInput_8, dbUser_tDBInput_8,
						dbPwd_tDBInput_8);

				java.sql.Statement stmt_tDBInput_8 = conn_tDBInput_8.createStatement();

				String dbquery_tDBInput_8 = "SELECT \n  `productcategory`.`CatID`, \n  `productcategory`.`Category`, \n  `productcategory`.`Description`\nFROM `productc"
						+ "ategory`";

				globalMap.put("tDBInput_8_QUERY", dbquery_tDBInput_8);
				java.sql.ResultSet rs_tDBInput_8 = null;

				try {
					rs_tDBInput_8 = stmt_tDBInput_8.executeQuery(dbquery_tDBInput_8);
					java.sql.ResultSetMetaData rsmd_tDBInput_8 = rs_tDBInput_8.getMetaData();
					int colQtyInRs_tDBInput_8 = rsmd_tDBInput_8.getColumnCount();

					String tmpContent_tDBInput_8 = null;

					while (rs_tDBInput_8.next()) {
						nb_line_tDBInput_8++;

						if (colQtyInRs_tDBInput_8 < 1) {
							row8.CatID = 0;
						} else {

							row8.CatID = rs_tDBInput_8.getInt(1);
							if (rs_tDBInput_8.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_8 < 2) {
							row8.Category = null;
						} else {

							row8.Category = routines.system.JDBCUtil.getString(rs_tDBInput_8, 2, false);
						}
						if (colQtyInRs_tDBInput_8 < 3) {
							row8.Description = null;
						} else {

							row8.Description = routines.system.JDBCUtil.getString(rs_tDBInput_8, 3, false);
						}

						/**
						 * [tDBInput_8 begin ] stop
						 */

						/**
						 * [tDBInput_8 main ] start
						 */

						currentComponent = "tDBInput_8";

						tos_count_tDBInput_8++;

						/**
						 * [tDBInput_8 main ] stop
						 */

						/**
						 * [tDBInput_8 process_data_begin ] start
						 */

						currentComponent = "tDBInput_8";

						/**
						 * [tDBInput_8 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row8 main ] start
						 */

						currentComponent = "tAdvancedHash_row8";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row8"

							);
						}

						row8Struct row8_HashRow = new row8Struct();

						row8_HashRow.CatID = row8.CatID;

						row8_HashRow.Category = row8.Category;

						row8_HashRow.Description = row8.Description;

						tHash_Lookup_row8.put(row8_HashRow);

						tos_count_tAdvancedHash_row8++;

						/**
						 * [tAdvancedHash_row8 main ] stop
						 */

						/**
						 * [tAdvancedHash_row8 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row8";

						/**
						 * [tAdvancedHash_row8 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row8 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row8";

						/**
						 * [tAdvancedHash_row8 process_data_end ] stop
						 */

						/**
						 * [tDBInput_8 process_data_end ] start
						 */

						currentComponent = "tDBInput_8";

						/**
						 * [tDBInput_8 process_data_end ] stop
						 */

						/**
						 * [tDBInput_8 end ] start
						 */

						currentComponent = "tDBInput_8";

					}
				} finally {
					if (rs_tDBInput_8 != null) {
						rs_tDBInput_8.close();
					}
					if (stmt_tDBInput_8 != null) {
						stmt_tDBInput_8.close();
					}
					if (conn_tDBInput_8 != null && !conn_tDBInput_8.isClosed()) {

						conn_tDBInput_8.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}

				globalMap.put("tDBInput_8_NB_LINE", nb_line_tDBInput_8);

				ok_Hash.put("tDBInput_8", true);
				end_Hash.put("tDBInput_8", System.currentTimeMillis());

				/**
				 * [tDBInput_8 end ] stop
				 */

				/**
				 * [tAdvancedHash_row8 end ] start
				 */

				currentComponent = "tAdvancedHash_row8";

				tHash_Lookup_row8.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row8");
				}

				ok_Hash.put("tAdvancedHash_row8", true);
				end_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row8 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_8 finally ] start
				 */

				currentComponent = "tDBInput_8";

				/**
				 * [tDBInput_8 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row8 finally ] start
				 */

				currentComponent = "tAdvancedHash_row8";

				/**
				 * [tAdvancedHash_row8 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_8_SUBPROCESS_STATE", 1);
	}

	public static class FactEmployeePerformance_outStruct
			implements routines.system.IPersistableRow<FactEmployeePerformance_outStruct> {
		final static byte[] commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];
		static byte[] commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];

		public Integer PERFORMANCEID_SK;

		public Integer getPERFORMANCEID_SK() {
			return this.PERFORMANCEID_SK;
		}

		public Integer ATTENDANCEID_SK;

		public Integer getATTENDANCEID_SK() {
			return this.ATTENDANCEID_SK;
		}

		public Integer EMPLOYEEID_SK;

		public Integer getEMPLOYEEID_SK() {
			return this.EMPLOYEEID_SK;
		}

		public Integer DATEID_SK;

		public Integer getDATEID_SK() {
			return this.DATEID_SK;
		}

		public Integer KPI_SCORE;

		public Integer getKPI_SCORE() {
			return this.KPI_SCORE;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.PERFORMANCEID_SK = readInteger(dis);

					this.ATTENDANCEID_SK = readInteger(dis);

					this.EMPLOYEEID_SK = readInteger(dis);

					this.DATEID_SK = readInteger(dis);

					this.KPI_SCORE = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.PERFORMANCEID_SK = readInteger(dis);

					this.ATTENDANCEID_SK = readInteger(dis);

					this.EMPLOYEEID_SK = readInteger(dis);

					this.DATEID_SK = readInteger(dis);

					this.KPI_SCORE = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.PERFORMANCEID_SK, dos);

				// Integer

				writeInteger(this.ATTENDANCEID_SK, dos);

				// Integer

				writeInteger(this.EMPLOYEEID_SK, dos);

				// Integer

				writeInteger(this.DATEID_SK, dos);

				// Integer

				writeInteger(this.KPI_SCORE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.PERFORMANCEID_SK, dos);

				// Integer

				writeInteger(this.ATTENDANCEID_SK, dos);

				// Integer

				writeInteger(this.EMPLOYEEID_SK, dos);

				// Integer

				writeInteger(this.DATEID_SK, dos);

				// Integer

				writeInteger(this.KPI_SCORE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PERFORMANCEID_SK=" + String.valueOf(PERFORMANCEID_SK));
			sb.append(",ATTENDANCEID_SK=" + String.valueOf(ATTENDANCEID_SK));
			sb.append(",EMPLOYEEID_SK=" + String.valueOf(EMPLOYEEID_SK));
			sb.append(",DATEID_SK=" + String.valueOf(DATEID_SK));
			sb.append(",KPI_SCORE=" + String.valueOf(KPI_SCORE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(FactEmployeePerformance_outStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row48Struct implements routines.system.IPersistableRow<row48Struct> {
		final static byte[] commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];
		static byte[] commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];

		public int PERFORMANCEID_SK;

		public int getPERFORMANCEID_SK() {
			return this.PERFORMANCEID_SK;
		}

		public Integer PERFORMANCEID;

		public Integer getPERFORMANCEID() {
			return this.PERFORMANCEID;
		}

		public String PERFORMANCERATING;

		public String getPERFORMANCERATING() {
			return this.PERFORMANCERATING;
		}

		public java.util.Date REVIEWDATE;

		public java.util.Date getREVIEWDATE() {
			return this.REVIEWDATE;
		}

		public String REVIEWCYCLE;

		public String getREVIEWCYCLE() {
			return this.REVIEWCYCLE;
		}

		public Integer TARGETCOVERED;

		public Integer getTARGETCOVERED() {
			return this.TARGETCOVERED;
		}

		public Integer EMPLOYEEID;

		public Integer getEMPLOYEEID() {
			return this.EMPLOYEEID;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length) {
					if (length < 1024 && commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length == 0) {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[1024];
					} else {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length);
				strReturn = new String(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length) {
					if (length < 1024 && commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length == 0) {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[1024];
					} else {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length);
				strReturn = new String(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.PERFORMANCEID_SK = dis.readInt();

					this.PERFORMANCEID = readInteger(dis);

					this.PERFORMANCERATING = readString(dis);

					this.REVIEWDATE = readDate(dis);

					this.REVIEWCYCLE = readString(dis);

					this.TARGETCOVERED = readInteger(dis);

					this.EMPLOYEEID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.PERFORMANCEID_SK = dis.readInt();

					this.PERFORMANCEID = readInteger(dis);

					this.PERFORMANCERATING = readString(dis);

					this.REVIEWDATE = readDate(dis);

					this.REVIEWCYCLE = readString(dis);

					this.TARGETCOVERED = readInteger(dis);

					this.EMPLOYEEID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.PERFORMANCEID_SK);

				// Integer

				writeInteger(this.PERFORMANCEID, dos);

				// String

				writeString(this.PERFORMANCERATING, dos);

				// java.util.Date

				writeDate(this.REVIEWDATE, dos);

				// String

				writeString(this.REVIEWCYCLE, dos);

				// Integer

				writeInteger(this.TARGETCOVERED, dos);

				// Integer

				writeInteger(this.EMPLOYEEID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.PERFORMANCEID_SK);

				// Integer

				writeInteger(this.PERFORMANCEID, dos);

				// String

				writeString(this.PERFORMANCERATING, dos);

				// java.util.Date

				writeDate(this.REVIEWDATE, dos);

				// String

				writeString(this.REVIEWCYCLE, dos);

				// Integer

				writeInteger(this.TARGETCOVERED, dos);

				// Integer

				writeInteger(this.EMPLOYEEID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PERFORMANCEID_SK=" + String.valueOf(PERFORMANCEID_SK));
			sb.append(",PERFORMANCEID=" + String.valueOf(PERFORMANCEID));
			sb.append(",PERFORMANCERATING=" + PERFORMANCERATING);
			sb.append(",REVIEWDATE=" + String.valueOf(REVIEWDATE));
			sb.append(",REVIEWCYCLE=" + REVIEWCYCLE);
			sb.append(",TARGETCOVERED=" + String.valueOf(TARGETCOVERED));
			sb.append(",EMPLOYEEID=" + String.valueOf(EMPLOYEEID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row48Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tDBInput_9Struct implements routines.system.IPersistableRow<after_tDBInput_9Struct> {
		final static byte[] commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];
		static byte[] commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int PERFORMANCEID_SK;

		public int getPERFORMANCEID_SK() {
			return this.PERFORMANCEID_SK;
		}

		public Integer PERFORMANCEID;

		public Integer getPERFORMANCEID() {
			return this.PERFORMANCEID;
		}

		public String PERFORMANCERATING;

		public String getPERFORMANCERATING() {
			return this.PERFORMANCERATING;
		}

		public java.util.Date REVIEWDATE;

		public java.util.Date getREVIEWDATE() {
			return this.REVIEWDATE;
		}

		public String REVIEWCYCLE;

		public String getREVIEWCYCLE() {
			return this.REVIEWCYCLE;
		}

		public Integer TARGETCOVERED;

		public Integer getTARGETCOVERED() {
			return this.TARGETCOVERED;
		}

		public Integer EMPLOYEEID;

		public Integer getEMPLOYEEID() {
			return this.EMPLOYEEID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.PERFORMANCEID_SK;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tDBInput_9Struct other = (after_tDBInput_9Struct) obj;

			if (this.PERFORMANCEID_SK != other.PERFORMANCEID_SK)
				return false;

			return true;
		}

		public void copyDataTo(after_tDBInput_9Struct other) {

			other.PERFORMANCEID_SK = this.PERFORMANCEID_SK;
			other.PERFORMANCEID = this.PERFORMANCEID;
			other.PERFORMANCERATING = this.PERFORMANCERATING;
			other.REVIEWDATE = this.REVIEWDATE;
			other.REVIEWCYCLE = this.REVIEWCYCLE;
			other.TARGETCOVERED = this.TARGETCOVERED;
			other.EMPLOYEEID = this.EMPLOYEEID;

		}

		public void copyKeysDataTo(after_tDBInput_9Struct other) {

			other.PERFORMANCEID_SK = this.PERFORMANCEID_SK;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length) {
					if (length < 1024 && commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length == 0) {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[1024];
					} else {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length);
				strReturn = new String(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length) {
					if (length < 1024 && commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length == 0) {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[1024];
					} else {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length);
				strReturn = new String(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.PERFORMANCEID_SK = dis.readInt();

					this.PERFORMANCEID = readInteger(dis);

					this.PERFORMANCERATING = readString(dis);

					this.REVIEWDATE = readDate(dis);

					this.REVIEWCYCLE = readString(dis);

					this.TARGETCOVERED = readInteger(dis);

					this.EMPLOYEEID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.PERFORMANCEID_SK = dis.readInt();

					this.PERFORMANCEID = readInteger(dis);

					this.PERFORMANCERATING = readString(dis);

					this.REVIEWDATE = readDate(dis);

					this.REVIEWCYCLE = readString(dis);

					this.TARGETCOVERED = readInteger(dis);

					this.EMPLOYEEID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.PERFORMANCEID_SK);

				// Integer

				writeInteger(this.PERFORMANCEID, dos);

				// String

				writeString(this.PERFORMANCERATING, dos);

				// java.util.Date

				writeDate(this.REVIEWDATE, dos);

				// String

				writeString(this.REVIEWCYCLE, dos);

				// Integer

				writeInteger(this.TARGETCOVERED, dos);

				// Integer

				writeInteger(this.EMPLOYEEID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.PERFORMANCEID_SK);

				// Integer

				writeInteger(this.PERFORMANCEID, dos);

				// String

				writeString(this.PERFORMANCERATING, dos);

				// java.util.Date

				writeDate(this.REVIEWDATE, dos);

				// String

				writeString(this.REVIEWCYCLE, dos);

				// Integer

				writeInteger(this.TARGETCOVERED, dos);

				// Integer

				writeInteger(this.EMPLOYEEID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PERFORMANCEID_SK=" + String.valueOf(PERFORMANCEID_SK));
			sb.append(",PERFORMANCEID=" + String.valueOf(PERFORMANCEID));
			sb.append(",PERFORMANCERATING=" + PERFORMANCERATING);
			sb.append(",REVIEWDATE=" + String.valueOf(REVIEWDATE));
			sb.append(",REVIEWCYCLE=" + REVIEWCYCLE);
			sb.append(",TARGETCOVERED=" + String.valueOf(TARGETCOVERED));
			sb.append(",EMPLOYEEID=" + String.valueOf(EMPLOYEEID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tDBInput_9Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.PERFORMANCEID_SK, other.PERFORMANCEID_SK);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

public void tDBInput_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_12Process(globalMap);
		tDBInput_13Process(globalMap);

		row48Struct row48 = new row48Struct();
FactEmployeePerformance_outStruct FactEmployeePerformance_out = new FactEmployeePerformance_outStruct();





	
	/**
	 * [tDBOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_4", false);
		start_Hash.put("tDBOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"FactEmployeePerformance_out");
					}
				
		int tos_count_tDBOutput_4 = 0;
		






    
    int nb_line_tDBOutput_4 = 0;
    int nb_line_update_tDBOutput_4 = 0;
    int nb_line_inserted_tDBOutput_4 = 0;
    int nb_line_deleted_tDBOutput_4 = 0;
    int nb_line_rejected_tDBOutput_4 = 0;

    int tmp_batchUpdateCount_tDBOutput_4 = 0;

    int deletedCount_tDBOutput_4=0;
    int updatedCount_tDBOutput_4=0;
    int insertedCount_tDBOutput_4=0;
    int rowsToCommitCount_tDBOutput_4=0;
    int rejectedCount_tDBOutput_4=0;

    boolean whetherReject_tDBOutput_4 = false;

    java.sql.Connection conn_tDBOutput_4 = null;

    //optional table
    String dbschema_tDBOutput_4 = null;
    String tableName_tDBOutput_4 = null;
                    String driverClass_tDBOutput_4 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tDBOutput_4);
                String url_tDBOutput_4 = null;
                    url_tDBOutput_4 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + "localhost" + ")(port=" + "1521" + "))(connect_data=(service_name=" + "XEPDB1" + ")))";
                String dbUser_tDBOutput_4 = "system";
 
	final String decryptedPassword_tDBOutput_4 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:4LfLVAec34vGYmhzATpJZkarUp+7enff33wEGFam789j7ch7ujw=");

                String dbPwd_tDBOutput_4 = decryptedPassword_tDBOutput_4;
                dbschema_tDBOutput_4 = "";


                    conn_tDBOutput_4 = java.sql.DriverManager.getConnection(url_tDBOutput_4, dbUser_tDBOutput_4, dbPwd_tDBOutput_4);
        resourceMap.put("conn_tDBOutput_4", conn_tDBOutput_4);
            conn_tDBOutput_4.setAutoCommit(false);
            int commitEvery_tDBOutput_4 = 10000;
            int commitCounter_tDBOutput_4 = 0;
        int batchSize_tDBOutput_4 = 10000;
        int batchSizeCounter_tDBOutput_4=0;
        int count_tDBOutput_4=0;

        if(dbschema_tDBOutput_4 == null || dbschema_tDBOutput_4.trim().length() == 0) {
            tableName_tDBOutput_4 = ("FACT_EMPLOYEEPERFORMANCE");
        } else {
            tableName_tDBOutput_4 = dbschema_tDBOutput_4 + "." + ("FACT_EMPLOYEEPERFORMANCE");
        }
                String insert_tDBOutput_4 = "INSERT INTO " + tableName_tDBOutput_4 + " (PERFORMANCEID_SK,ATTENDANCEID_SK,EMPLOYEEID_SK,DATEID_SK,KPI_SCORE) VALUES (?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tDBOutput_4 = conn_tDBOutput_4.prepareStatement(insert_tDBOutput_4);
                        resourceMap.put("pstmt_tDBOutput_4", pstmt_tDBOutput_4);





 



/**
 * [tDBOutput_4 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row48");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row49Struct> tHash_Lookup_row49 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row49Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row49Struct>) 
					globalMap.get( "tHash_Lookup_row49" ))
					;					
					
	
		tHash_Lookup_row49.initGet();
	

row49Struct row49HashKey = new row49Struct();
row49Struct row49Default = new row49Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row50Struct> tHash_Lookup_row50 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row50Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row50Struct>) 
					globalMap.get( "tHash_Lookup_row50" ))
					;					
					
	

row50Struct row50HashKey = new row50Struct();
row50Struct row50Default = new row50Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
FactEmployeePerformance_outStruct FactEmployeePerformance_out_tmp = new FactEmployeePerformance_outStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tDBInput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_9", false);
		start_Hash.put("tDBInput_9", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_9";

	
		int tos_count_tDBInput_9 = 0;
		
	


	
		    int nb_line_tDBInput_9 = 0;
		    java.sql.Connection conn_tDBInput_9 = null;
				String driverClass_tDBInput_9 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tDBInput_9);
				
			String url_tDBInput_9 = null;
				url_tDBInput_9 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + "localhost" + ")(port=" + "1521" + "))(connect_data=(service_name=" + "XEPDB1" + ")))";

				String dbUser_tDBInput_9 = "system";

				

				 
	final String decryptedPassword_tDBInput_9 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:4RCol7rRRqEC1VsbDWJpjc6hk9hvLR+VrseHzFVwBDZuwX3VbP0=");

				String dbPwd_tDBInput_9 = decryptedPassword_tDBInput_9;

				
					conn_tDBInput_9 = java.sql.DriverManager.getConnection(url_tDBInput_9,dbUser_tDBInput_9,dbPwd_tDBInput_9);
				java.sql.Statement stmtGetTZ_tDBInput_9 = conn_tDBInput_9.createStatement();
				java.sql.ResultSet rsGetTZ_tDBInput_9 = stmtGetTZ_tDBInput_9.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tDBInput_9 = java.util.TimeZone.getDefault().getID();
				while (rsGetTZ_tDBInput_9.next()) {
					sessionTimezone_tDBInput_9 = rsGetTZ_tDBInput_9.getString(1);
				}
                                if (!(conn_tDBInput_9 instanceof oracle.jdbc.OracleConnection) &&
                                        conn_tDBInput_9.isWrapperFor(oracle.jdbc.OracleConnection.class)) {
                                    if (conn_tDBInput_9.unwrap(oracle.jdbc.OracleConnection.class) != null) {
                                        ((oracle.jdbc.OracleConnection)conn_tDBInput_9.unwrap(oracle.jdbc.OracleConnection.class)).setSessionTimeZone(sessionTimezone_tDBInput_9);
                                    }
                                } else {
                                    ((oracle.jdbc.OracleConnection)conn_tDBInput_9).setSessionTimeZone(sessionTimezone_tDBInput_9);
                                }
		    
			java.sql.Statement stmt_tDBInput_9 = conn_tDBInput_9.createStatement();

		    String dbquery_tDBInput_9 = "SELECT \n  SYSTEM.DIM_PERFORMANCEMATRIX.PERFORMANCEID_SK, \n  SYSTEM.DIM_PERFORMANCEMATRIX.PERFORMANCEID, \n  SYSTEM.DIM_P"
+"ERFORMANCEMATRIX.PERFORMANCERATING, \n  SYSTEM.DIM_PERFORMANCEMATRIX.REVIEWDATE, \n  SYSTEM.DIM_PERFORMANCEMATRIX.REVIEWCY"
+"CLE, \n  SYSTEM.DIM_PERFORMANCEMATRIX.TARGETCOVERED, \n  SYSTEM.DIM_PERFORMANCEMATRIX.EMPLOYEEID\nFROM SYSTEM.DIM_PERFORMAN"
+"CEMATRIX";
		    

            	globalMap.put("tDBInput_9_QUERY",dbquery_tDBInput_9);
		    java.sql.ResultSet rs_tDBInput_9 = null;

		    try {
		    	rs_tDBInput_9 = stmt_tDBInput_9.executeQuery(dbquery_tDBInput_9);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_9 = rs_tDBInput_9.getMetaData();
		    	int colQtyInRs_tDBInput_9 = rsmd_tDBInput_9.getColumnCount();

		    String tmpContent_tDBInput_9 = null;
		    
		    
		    while (rs_tDBInput_9.next()) {
		        nb_line_tDBInput_9++;
		        
							if(colQtyInRs_tDBInput_9 < 1) {
								row48.PERFORMANCEID_SK = 0;
							} else {
		                          
					if(rs_tDBInput_9.getObject(1) != null) {
						row48.PERFORMANCEID_SK = rs_tDBInput_9.getInt(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tDBInput_9 < 2) {
								row48.PERFORMANCEID = null;
							} else {
		                          
					if(rs_tDBInput_9.getObject(2) != null) {
						row48.PERFORMANCEID = rs_tDBInput_9.getInt(2);
					} else {
				
						row48.PERFORMANCEID = null;
					}
		                    }
							if(colQtyInRs_tDBInput_9 < 3) {
								row48.PERFORMANCERATING = null;
							} else {
	                         		
        	row48.PERFORMANCERATING = routines.system.JDBCUtil.getString(rs_tDBInput_9, 3, false);
		                    }
							if(colQtyInRs_tDBInput_9 < 4) {
								row48.REVIEWDATE = null;
							} else {
										
			row48.REVIEWDATE = routines.system.JDBCUtil.getDate(rs_tDBInput_9, 4);
		                    }
							if(colQtyInRs_tDBInput_9 < 5) {
								row48.REVIEWCYCLE = null;
							} else {
	                         		
        	row48.REVIEWCYCLE = routines.system.JDBCUtil.getString(rs_tDBInput_9, 5, false);
		                    }
							if(colQtyInRs_tDBInput_9 < 6) {
								row48.TARGETCOVERED = null;
							} else {
		                          
					if(rs_tDBInput_9.getObject(6) != null) {
						row48.TARGETCOVERED = rs_tDBInput_9.getInt(6);
					} else {
				
						row48.TARGETCOVERED = null;
					}
		                    }
							if(colQtyInRs_tDBInput_9 < 7) {
								row48.EMPLOYEEID = null;
							} else {
		                          
					if(rs_tDBInput_9.getObject(7) != null) {
						row48.EMPLOYEEID = rs_tDBInput_9.getInt(7);
					} else {
				
						row48.EMPLOYEEID = null;
					}
		                    }
					




 



/**
 * [tDBInput_9 begin ] stop
 */
	
	/**
	 * [tDBInput_9 main ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 


	tos_count_tDBInput_9++;

/**
 * [tDBInput_9 main ] stop
 */
	
	/**
	 * [tDBInput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 



/**
 * [tDBInput_9 process_data_begin ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row48"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row49" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow49 = false;
       		  	    	
       		  	    	
 							row49Struct row49ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								

								
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row49.lookup( row49HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row49.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow49 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow49 = true;
			           		  	} // G 21
                    		  	
                    		

							row49Struct row49 = null;
                    		  	 
							

								while ((tHash_Lookup_row49 != null && tHash_Lookup_row49.hasNext()) || forceLooprow49) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row49'
									
                    		  	 
							   
                    		  	 
	       		  	    	row49Struct fromLookup_row49 = null;
							row49 = row49Default;
										 
							
								
								if(!forceLooprow49) { // G 46
								
							
								 
							
								
								fromLookup_row49 = tHash_Lookup_row49.next();

							

							if(fromLookup_row49 != null) {
								row49 = fromLookup_row49;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow49 = false;
									 	
							
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row50" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow50 = false;
       		  	    	
       		  	    	
 							row50Struct row50ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_4 = false;
								
                        		    		    row50HashKey.EMPLOYEEID = row48.EMPLOYEEID  row49.EMPLOYEE_ID ;
                        		    		

								
		                        	row50HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row50.lookup( row50HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row50 != null && tHash_Lookup_row50.getCount(row50HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row50' and it contains more one result from keys :  row50.EMPLOYEEID = '" + row50HashKey.EMPLOYEEID + "'");
								} // G 071
							

							row50Struct row50 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row50Struct fromLookup_row50 = null;
							row50 = row50Default;
										 
							
								 
							
							
								if (tHash_Lookup_row50 !=null && tHash_Lookup_row50.hasNext()) { // G 099
								
							
								
								fromLookup_row50 = tHash_Lookup_row50.next();

							
							
								} // G 099
							
							

							if(fromLookup_row50 != null) {
								row50 = fromLookup_row50;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

FactEmployeePerformance_out = null;


// # Output table : 'FactEmployeePerformance_out'
FactEmployeePerformance_out_tmp.PERFORMANCEID_SK = row48.PERFORMANCEID_SK ;
FactEmployeePerformance_out_tmp.ATTENDANCEID_SK = row49.ATTENDANCEID_SK ;
FactEmployeePerformance_out_tmp.EMPLOYEEID_SK = row50.EMPLOYEEID_SK ;
FactEmployeePerformance_out_tmp.DATEID_SK = null;
FactEmployeePerformance_out_tmp.KPI_SCORE = null;
FactEmployeePerformance_out = FactEmployeePerformance_out_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "FactEmployeePerformance_out"
if(FactEmployeePerformance_out != null) { 



	
	/**
	 * [tDBOutput_4 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"FactEmployeePerformance_out"
						
						);
					}
					



        whetherReject_tDBOutput_4 = false;
                        if(FactEmployeePerformance_out.PERFORMANCEID_SK == null) {
pstmt_tDBOutput_4.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_4.setInt(1, FactEmployeePerformance_out.PERFORMANCEID_SK);
}

                        if(FactEmployeePerformance_out.ATTENDANCEID_SK == null) {
pstmt_tDBOutput_4.setNull(2, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_4.setInt(2, FactEmployeePerformance_out.ATTENDANCEID_SK);
}

                        if(FactEmployeePerformance_out.EMPLOYEEID_SK == null) {
pstmt_tDBOutput_4.setNull(3, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_4.setInt(3, FactEmployeePerformance_out.EMPLOYEEID_SK);
}

                        if(FactEmployeePerformance_out.DATEID_SK == null) {
pstmt_tDBOutput_4.setNull(4, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_4.setInt(4, FactEmployeePerformance_out.DATEID_SK);
}

                        if(FactEmployeePerformance_out.KPI_SCORE == null) {
pstmt_tDBOutput_4.setNull(5, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_4.setInt(5, FactEmployeePerformance_out.KPI_SCORE);
}

                pstmt_tDBOutput_4.addBatch();
                nb_line_tDBOutput_4++;
                batchSizeCounter_tDBOutput_4++;
            if (batchSize_tDBOutput_4 > 0 &&  batchSize_tDBOutput_4 <= batchSizeCounter_tDBOutput_4) {
                try {
                    pstmt_tDBOutput_4.executeBatch();
                }catch (java.sql.BatchUpdateException e_tDBOutput_4){
globalMap.put("tDBOutput_4_ERROR_MESSAGE",e_tDBOutput_4.getMessage());
			        java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4.getNextException(),sqle_tDBOutput_4=null;
			    	String errormessage_tDBOutput_4;
					if (ne_tDBOutput_4 != null) {
						// build new exception to provide the original cause
						sqle_tDBOutput_4 = new java.sql.SQLException(e_tDBOutput_4.getMessage() + "\ncaused by: " + ne_tDBOutput_4.getMessage(), ne_tDBOutput_4.getSQLState(), ne_tDBOutput_4.getErrorCode(), ne_tDBOutput_4);
						errormessage_tDBOutput_4 = sqle_tDBOutput_4.getMessage();
					}else{
						errormessage_tDBOutput_4 = e_tDBOutput_4.getMessage();
					}
	            	
	                	System.err.println(errormessage_tDBOutput_4);
	            	
	        	}
                tmp_batchUpdateCount_tDBOutput_4 = pstmt_tDBOutput_4.getUpdateCount();
                    insertedCount_tDBOutput_4
                += (tmp_batchUpdateCount_tDBOutput_4!=-1?tmp_batchUpdateCount_tDBOutput_4:0);
                rowsToCommitCount_tDBOutput_4 += (tmp_batchUpdateCount_tDBOutput_4!=-1?tmp_batchUpdateCount_tDBOutput_4:0);
                batchSizeCounter_tDBOutput_4 = 0;
            }
                commitCounter_tDBOutput_4++;
                if(commitEvery_tDBOutput_4 <= commitCounter_tDBOutput_4) {
                    if(batchSizeCounter_tDBOutput_4 > 0) {
                        try {
                            pstmt_tDBOutput_4.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tDBOutput_4){
globalMap.put("tDBOutput_4_ERROR_MESSAGE",e_tDBOutput_4.getMessage());
					        java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4.getNextException(),sqle_tDBOutput_4=null;
					    	String errormessage_tDBOutput_4;
							if (ne_tDBOutput_4 != null) {
								// build new exception to provide the original cause
								sqle_tDBOutput_4 = new java.sql.SQLException(e_tDBOutput_4.getMessage() + "\ncaused by: " + ne_tDBOutput_4.getMessage(), ne_tDBOutput_4.getSQLState(), ne_tDBOutput_4.getErrorCode(), ne_tDBOutput_4);
								errormessage_tDBOutput_4 = sqle_tDBOutput_4.getMessage();
							}else{
								errormessage_tDBOutput_4 = e_tDBOutput_4.getMessage();
							}
			            	
			                	System.err.println(errormessage_tDBOutput_4);
			            	
			        	}
                        tmp_batchUpdateCount_tDBOutput_4 = pstmt_tDBOutput_4.getUpdateCount();
                            insertedCount_tDBOutput_4
                        += (tmp_batchUpdateCount_tDBOutput_4!=-1?tmp_batchUpdateCount_tDBOutput_4:0);
                        rowsToCommitCount_tDBOutput_4 += (tmp_batchUpdateCount_tDBOutput_4!=-1?tmp_batchUpdateCount_tDBOutput_4:0);
                    }
                    if(rowsToCommitCount_tDBOutput_4 != 0){
                    	
                    }
                    conn_tDBOutput_4.commit();
                    if(rowsToCommitCount_tDBOutput_4 != 0){
                    	
                    	rowsToCommitCount_tDBOutput_4 = 0;
                    }
                    commitCounter_tDBOutput_4=0;
                    	batchSizeCounter_tDBOutput_4=0;
                }

 


	tos_count_tDBOutput_4++;

/**
 * [tDBOutput_4 main ] stop
 */
	
	/**
	 * [tDBOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	

 



/**
 * [tDBOutput_4 process_data_begin ] stop
 */
	
	/**
	 * [tDBOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	

 



/**
 * [tDBOutput_4 process_data_end ] stop
 */

} // End of branch "FactEmployeePerformance_out"



	
		} // close loop of lookup 'row49' // G_TM_M_043
	
	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 



/**
 * [tDBInput_9 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_9 end ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

}
}finally{
	if (rs_tDBInput_9 != null) {
		rs_tDBInput_9.close();
	}
	if (stmt_tDBInput_9 != null) {
		stmt_tDBInput_9.close();
	}
	if(conn_tDBInput_9 != null && !conn_tDBInput_9.isClosed()) {
	
			conn_tDBInput_9.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}

globalMap.put("tDBInput_9_NB_LINE",nb_line_tDBInput_9);
 

ok_Hash.put("tDBInput_9", true);
end_Hash.put("tDBInput_9", System.currentTimeMillis());




/**
 * [tDBInput_9 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row49 != null) {
						tHash_Lookup_row49.endGet();
					}
					globalMap.remove( "tHash_Lookup_row49" );

					
					
				
					if(tHash_Lookup_row50 != null) {
						tHash_Lookup_row50.endGet();
					}
					globalMap.remove( "tHash_Lookup_row50" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row48");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tDBOutput_4 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	
	



	
        if(batchSizeCounter_tDBOutput_4 > 0) {
            try {
            	if (pstmt_tDBOutput_4 != null) {
					
					pstmt_tDBOutput_4.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tDBOutput_4){
globalMap.put("tDBOutput_4_ERROR_MESSAGE",e_tDBOutput_4.getMessage());
		        java.sql.SQLException ne_tDBOutput_4 = e_tDBOutput_4.getNextException(),sqle_tDBOutput_4=null;
		    	String errormessage_tDBOutput_4;
				if (ne_tDBOutput_4 != null) {
					// build new exception to provide the original cause
					sqle_tDBOutput_4 = new java.sql.SQLException(e_tDBOutput_4.getMessage() + "\ncaused by: " + ne_tDBOutput_4.getMessage(), ne_tDBOutput_4.getSQLState(), ne_tDBOutput_4.getErrorCode(), ne_tDBOutput_4);
					errormessage_tDBOutput_4 = sqle_tDBOutput_4.getMessage();
				}else{
					errormessage_tDBOutput_4 = e_tDBOutput_4.getMessage();
				}
            	
                	System.err.println(errormessage_tDBOutput_4);
            	
        	}
        	if (pstmt_tDBOutput_4 != null) {
            	tmp_batchUpdateCount_tDBOutput_4 = pstmt_tDBOutput_4.getUpdateCount();
    	    	
    	    		insertedCount_tDBOutput_4
    	    	
    	    	+= (tmp_batchUpdateCount_tDBOutput_4!=-1?tmp_batchUpdateCount_tDBOutput_4:0);
				rowsToCommitCount_tDBOutput_4 += (tmp_batchUpdateCount_tDBOutput_4!=-1?tmp_batchUpdateCount_tDBOutput_4:0);
            }
        }
        if(pstmt_tDBOutput_4 != null) {
			
				pstmt_tDBOutput_4.close();
				resourceMap.remove("pstmt_tDBOutput_4");
			
        }
    resourceMap.put("statementClosed_tDBOutput_4", true);
		if(commitCounter_tDBOutput_4 > 0 && rowsToCommitCount_tDBOutput_4 != 0) {
			
		}
		conn_tDBOutput_4.commit();
		if(commitCounter_tDBOutput_4 > 0 && rowsToCommitCount_tDBOutput_4 != 0) {
			
			rowsToCommitCount_tDBOutput_4 = 0;
		}
		commitCounter_tDBOutput_4 = 0;
		
		
		conn_tDBOutput_4 .close();
		
		resourceMap.put("finish_tDBOutput_4", true);
   	

	
	nb_line_deleted_tDBOutput_4=nb_line_deleted_tDBOutput_4+ deletedCount_tDBOutput_4;
	nb_line_update_tDBOutput_4=nb_line_update_tDBOutput_4 + updatedCount_tDBOutput_4;
	nb_line_inserted_tDBOutput_4=nb_line_inserted_tDBOutput_4 + insertedCount_tDBOutput_4;
	nb_line_rejected_tDBOutput_4=nb_line_rejected_tDBOutput_4 + rejectedCount_tDBOutput_4;
	
        globalMap.put("tDBOutput_4_NB_LINE",nb_line_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_UPDATED",nb_line_update_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_DELETED",nb_line_deleted_tDBOutput_4);
        globalMap.put("tDBOutput_4_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_4);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"FactEmployeePerformance_out");
			  	}
			  	
 

ok_Hash.put("tDBOutput_4", true);
end_Hash.put("tDBOutput_4", System.currentTimeMillis());




/**
 * [tDBOutput_4 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_4"
					     			globalMap.remove("tHash_Lookup_row49"); 
				     			
					     			//free memory for "tMap_4"
					     			globalMap.remove("tHash_Lookup_row50"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_9 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 



/**
 * [tDBInput_9 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tDBOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_4";

	



    try {
    if (resourceMap.get("statementClosed_tDBOutput_4") == null) {
                java.sql.PreparedStatement pstmtToClose_tDBOutput_4 = null;
                if ((pstmtToClose_tDBOutput_4 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_4")) != null) {
                    pstmtToClose_tDBOutput_4.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tDBOutput_4") == null){
            java.sql.Connection ctn_tDBOutput_4 = null;
            if((ctn_tDBOutput_4 = (java.sql.Connection)resourceMap.get("conn_tDBOutput_4")) != null){
                try {
                    ctn_tDBOutput_4.close();
                } catch (java.sql.SQLException sqlEx_tDBOutput_4) {
                    String errorMessage_tDBOutput_4 = "failed to close the connection in tDBOutput_4 :" + sqlEx_tDBOutput_4.getMessage();
                    System.err.println(errorMessage_tDBOutput_4);
                }
            }
        }
    }
 



/**
 * [tDBOutput_4 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_9_SUBPROCESS_STATE", 1);
	}

	public static class row49Struct implements routines.system.IPersistableRow<row49Struct> {
		final static byte[] commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];
		static byte[] commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];

		public int ATTENDANCEID_SK;

		public int getATTENDANCEID_SK() {
			return this.ATTENDANCEID_SK;
		}

		public Integer ATTENDANCEID;

		public Integer getATTENDANCEID() {
			return this.ATTENDANCEID;
		}

		public BigDecimal EMPLOYEE_ID;

		public BigDecimal getEMPLOYEE_ID() {
			return this.EMPLOYEE_ID;
		}

		public java.util.Date ATTENDANCEDATE;

		public java.util.Date getATTENDANCEDATE() {
			return this.ATTENDANCEDATE;
		}

		public String SCHEDULED_START_TIME;

		public String getSCHEDULED_START_TIME() {
			return this.SCHEDULED_START_TIME;
		}

		public String ACTUAL_START_TIME;

		public String getACTUAL_START_TIME() {
			return this.ACTUAL_START_TIME;
		}

		public BigDecimal LATE_MINUTES;

		public BigDecimal getLATE_MINUTES() {
			return this.LATE_MINUTES;
		}

		public String ATTENDANCE_STATUS;

		public String getATTENDANCE_STATUS() {
			return this.ATTENDANCE_STATUS;
		}

		public String ABSENCE_REASON;

		public String getABSENCE_REASON() {
			return this.ABSENCE_REASON;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length) {
					if (length < 1024 && commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length == 0) {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[1024];
					} else {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length);
				strReturn = new String(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length) {
					if (length < 1024 && commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length == 0) {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[1024];
					} else {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length);
				strReturn = new String(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.ATTENDANCEID_SK = dis.readInt();

					this.ATTENDANCEID = readInteger(dis);

					this.EMPLOYEE_ID = (BigDecimal) dis.readObject();

					this.ATTENDANCEDATE = readDate(dis);

					this.SCHEDULED_START_TIME = readString(dis);

					this.ACTUAL_START_TIME = readString(dis);

					this.LATE_MINUTES = (BigDecimal) dis.readObject();

					this.ATTENDANCE_STATUS = readString(dis);

					this.ABSENCE_REASON = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.ATTENDANCEID_SK = dis.readInt();

					this.ATTENDANCEID = readInteger(dis);

					this.EMPLOYEE_ID = (BigDecimal) dis.readObject();

					this.ATTENDANCEDATE = readDate(dis);

					this.SCHEDULED_START_TIME = readString(dis);

					this.ACTUAL_START_TIME = readString(dis);

					this.LATE_MINUTES = (BigDecimal) dis.readObject();

					this.ATTENDANCE_STATUS = readString(dis);

					this.ABSENCE_REASON = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ATTENDANCEID_SK);

				// Integer

				writeInteger(this.ATTENDANCEID, dos);

				// BigDecimal

				dos.writeObject(this.EMPLOYEE_ID);

				// java.util.Date

				writeDate(this.ATTENDANCEDATE, dos);

				// String

				writeString(this.SCHEDULED_START_TIME, dos);

				// String

				writeString(this.ACTUAL_START_TIME, dos);

				// BigDecimal

				dos.writeObject(this.LATE_MINUTES);

				// String

				writeString(this.ATTENDANCE_STATUS, dos);

				// String

				writeString(this.ABSENCE_REASON, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.ATTENDANCEID_SK);

				// Integer

				writeInteger(this.ATTENDANCEID, dos);

				// BigDecimal

				dos.writeObject(this.EMPLOYEE_ID);

				// java.util.Date

				writeDate(this.ATTENDANCEDATE, dos);

				// String

				writeString(this.SCHEDULED_START_TIME, dos);

				// String

				writeString(this.ACTUAL_START_TIME, dos);

				// BigDecimal

				dos.writeObject(this.LATE_MINUTES);

				// String

				writeString(this.ATTENDANCE_STATUS, dos);

				// String

				writeString(this.ABSENCE_REASON, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ATTENDANCEID_SK=" + String.valueOf(ATTENDANCEID_SK));
			sb.append(",ATTENDANCEID=" + String.valueOf(ATTENDANCEID));
			sb.append(",EMPLOYEE_ID=" + String.valueOf(EMPLOYEE_ID));
			sb.append(",ATTENDANCEDATE=" + String.valueOf(ATTENDANCEDATE));
			sb.append(",SCHEDULED_START_TIME=" + SCHEDULED_START_TIME);
			sb.append(",ACTUAL_START_TIME=" + ACTUAL_START_TIME);
			sb.append(",LATE_MINUTES=" + String.valueOf(LATE_MINUTES));
			sb.append(",ATTENDANCE_STATUS=" + ATTENDANCE_STATUS);
			sb.append(",ABSENCE_REASON=" + ABSENCE_REASON);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row49Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_12_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row49Struct row49 = new row49Struct();

				/**
				 * [tAdvancedHash_row49 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row49", false);
				start_Hash.put("tAdvancedHash_row49", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row49";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row49");
				}

				int tos_count_tAdvancedHash_row49 = 0;

				// connection name:row49
				// source node:tDBInput_12 - inputs:(after_tDBInput_9) outputs:(row49,row49) |
				// target node:tAdvancedHash_row49 - inputs:(row49) outputs:()
				// linked node: tMap_4 - inputs:(row48,row49,row50)
				// outputs:(FactEmployeePerformance_out)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row49 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row49Struct> tHash_Lookup_row49 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row49Struct>getLookup(matchingModeEnum_row49);

				globalMap.put("tHash_Lookup_row49", tHash_Lookup_row49);

				/**
				 * [tAdvancedHash_row49 begin ] stop
				 */

				/**
				 * [tDBInput_12 begin ] start
				 */

				ok_Hash.put("tDBInput_12", false);
				start_Hash.put("tDBInput_12", System.currentTimeMillis());

				currentComponent = "tDBInput_12";

				int tos_count_tDBInput_12 = 0;

				int nb_line_tDBInput_12 = 0;
				java.sql.Connection conn_tDBInput_12 = null;
				String driverClass_tDBInput_12 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tDBInput_12);

				String url_tDBInput_12 = null;
				url_tDBInput_12 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + "localhost"
						+ ")(port=" + "1521" + "))(connect_data=(service_name=" + "XEPDB1" + ")))";

				String dbUser_tDBInput_12 = "system";

				final String decryptedPassword_tDBInput_12 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:ysj43hy0F9CEWRWkvbOKI2OeFf05JVHpEKi4oteKe17WCC3HV/c=");

				String dbPwd_tDBInput_12 = decryptedPassword_tDBInput_12;

				conn_tDBInput_12 = java.sql.DriverManager.getConnection(url_tDBInput_12, dbUser_tDBInput_12,
						dbPwd_tDBInput_12);
				java.sql.Statement stmtGetTZ_tDBInput_12 = conn_tDBInput_12.createStatement();
				java.sql.ResultSet rsGetTZ_tDBInput_12 = stmtGetTZ_tDBInput_12
						.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tDBInput_12 = java.util.TimeZone.getDefault().getID();
				while (rsGetTZ_tDBInput_12.next()) {
					sessionTimezone_tDBInput_12 = rsGetTZ_tDBInput_12.getString(1);
				}
				if (!(conn_tDBInput_12 instanceof oracle.jdbc.OracleConnection)
						&& conn_tDBInput_12.isWrapperFor(oracle.jdbc.OracleConnection.class)) {
					if (conn_tDBInput_12.unwrap(oracle.jdbc.OracleConnection.class) != null) {
						((oracle.jdbc.OracleConnection) conn_tDBInput_12.unwrap(oracle.jdbc.OracleConnection.class))
								.setSessionTimeZone(sessionTimezone_tDBInput_12);
					}
				} else {
					((oracle.jdbc.OracleConnection) conn_tDBInput_12).setSessionTimeZone(sessionTimezone_tDBInput_12);
				}

				java.sql.Statement stmt_tDBInput_12 = conn_tDBInput_12.createStatement();

				String dbquery_tDBInput_12 = "SELECT \n  SYSTEM.DIM_ATTENDANCE.ATTENDANCEID_SK, \n  SYSTEM.DIM_ATTENDANCE.ATTENDANCEID, \n  SYSTEM.DIM_ATTENDANCE.EMPLOY"
						+ "EE_ID, \n  SYSTEM.DIM_ATTENDANCE.ATTENDANCEDATE, \n  SYSTEM.DIM_ATTENDANCE.SCHEDULED_START_TIME, \n  SYSTEM.DIM_ATTENDANCE."
						+ "ACTUAL_START_TIME, \n  SYSTEM.DIM_ATTENDANCE.LATE_MINUTES, \n  SYSTEM.DIM_ATTENDANCE.ATTENDANCE_STATUS, \n  SYSTEM.DIM_ATTE"
						+ "NDANCE.ABSENCE_REASON\nFROM SYSTEM.DIM_ATTENDANCE";

				globalMap.put("tDBInput_12_QUERY", dbquery_tDBInput_12);
				java.sql.ResultSet rs_tDBInput_12 = null;

				try {
					rs_tDBInput_12 = stmt_tDBInput_12.executeQuery(dbquery_tDBInput_12);
					java.sql.ResultSetMetaData rsmd_tDBInput_12 = rs_tDBInput_12.getMetaData();
					int colQtyInRs_tDBInput_12 = rsmd_tDBInput_12.getColumnCount();

					String tmpContent_tDBInput_12 = null;

					while (rs_tDBInput_12.next()) {
						nb_line_tDBInput_12++;

						if (colQtyInRs_tDBInput_12 < 1) {
							row49.ATTENDANCEID_SK = 0;
						} else {

							if (rs_tDBInput_12.getObject(1) != null) {
								row49.ATTENDANCEID_SK = rs_tDBInput_12.getInt(1);
							} else {

								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_12 < 2) {
							row49.ATTENDANCEID = null;
						} else {

							if (rs_tDBInput_12.getObject(2) != null) {
								row49.ATTENDANCEID = rs_tDBInput_12.getInt(2);
							} else {

								row49.ATTENDANCEID = null;
							}
						}
						if (colQtyInRs_tDBInput_12 < 3) {
							row49.EMPLOYEE_ID = null;
						} else {

							if (rs_tDBInput_12.getObject(3) != null) {
								row49.EMPLOYEE_ID = rs_tDBInput_12.getBigDecimal(3);
							} else {

								row49.EMPLOYEE_ID = null;
							}
						}
						if (colQtyInRs_tDBInput_12 < 4) {
							row49.ATTENDANCEDATE = null;
						} else {

							row49.ATTENDANCEDATE = routines.system.JDBCUtil.getDate(rs_tDBInput_12, 4);
						}
						if (colQtyInRs_tDBInput_12 < 5) {
							row49.SCHEDULED_START_TIME = null;
						} else {

							row49.SCHEDULED_START_TIME = routines.system.JDBCUtil.getString(rs_tDBInput_12, 5, false);
						}
						if (colQtyInRs_tDBInput_12 < 6) {
							row49.ACTUAL_START_TIME = null;
						} else {

							row49.ACTUAL_START_TIME = routines.system.JDBCUtil.getString(rs_tDBInput_12, 6, false);
						}
						if (colQtyInRs_tDBInput_12 < 7) {
							row49.LATE_MINUTES = null;
						} else {

							if (rs_tDBInput_12.getObject(7) != null) {
								row49.LATE_MINUTES = rs_tDBInput_12.getBigDecimal(7);
							} else {

								row49.LATE_MINUTES = null;
							}
						}
						if (colQtyInRs_tDBInput_12 < 8) {
							row49.ATTENDANCE_STATUS = null;
						} else {

							row49.ATTENDANCE_STATUS = routines.system.JDBCUtil.getString(rs_tDBInput_12, 8, false);
						}
						if (colQtyInRs_tDBInput_12 < 9) {
							row49.ABSENCE_REASON = null;
						} else {

							row49.ABSENCE_REASON = routines.system.JDBCUtil.getString(rs_tDBInput_12, 9, false);
						}

						/**
						 * [tDBInput_12 begin ] stop
						 */

						/**
						 * [tDBInput_12 main ] start
						 */

						currentComponent = "tDBInput_12";

						tos_count_tDBInput_12++;

						/**
						 * [tDBInput_12 main ] stop
						 */

						/**
						 * [tDBInput_12 process_data_begin ] start
						 */

						currentComponent = "tDBInput_12";

						/**
						 * [tDBInput_12 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row49 main ] start
						 */

						currentComponent = "tAdvancedHash_row49";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row49"

							);
						}

						row49Struct row49_HashRow = new row49Struct();

						row49_HashRow.ATTENDANCEID_SK = row49.ATTENDANCEID_SK;

						row49_HashRow.ATTENDANCEID = row49.ATTENDANCEID;

						row49_HashRow.EMPLOYEE_ID = row49.EMPLOYEE_ID;

						row49_HashRow.ATTENDANCEDATE = row49.ATTENDANCEDATE;

						row49_HashRow.SCHEDULED_START_TIME = row49.SCHEDULED_START_TIME;

						row49_HashRow.ACTUAL_START_TIME = row49.ACTUAL_START_TIME;

						row49_HashRow.LATE_MINUTES = row49.LATE_MINUTES;

						row49_HashRow.ATTENDANCE_STATUS = row49.ATTENDANCE_STATUS;

						row49_HashRow.ABSENCE_REASON = row49.ABSENCE_REASON;

						tHash_Lookup_row49.put(row49_HashRow);

						tos_count_tAdvancedHash_row49++;

						/**
						 * [tAdvancedHash_row49 main ] stop
						 */

						/**
						 * [tAdvancedHash_row49 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row49";

						/**
						 * [tAdvancedHash_row49 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row49 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row49";

						/**
						 * [tAdvancedHash_row49 process_data_end ] stop
						 */

						/**
						 * [tDBInput_12 process_data_end ] start
						 */

						currentComponent = "tDBInput_12";

						/**
						 * [tDBInput_12 process_data_end ] stop
						 */

						/**
						 * [tDBInput_12 end ] start
						 */

						currentComponent = "tDBInput_12";

					}
				} finally {
					if (rs_tDBInput_12 != null) {
						rs_tDBInput_12.close();
					}
					if (stmt_tDBInput_12 != null) {
						stmt_tDBInput_12.close();
					}
					if (conn_tDBInput_12 != null && !conn_tDBInput_12.isClosed()) {

						conn_tDBInput_12.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}

				globalMap.put("tDBInput_12_NB_LINE", nb_line_tDBInput_12);

				ok_Hash.put("tDBInput_12", true);
				end_Hash.put("tDBInput_12", System.currentTimeMillis());

				/**
				 * [tDBInput_12 end ] stop
				 */

				/**
				 * [tAdvancedHash_row49 end ] start
				 */

				currentComponent = "tAdvancedHash_row49";

				tHash_Lookup_row49.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row49");
				}

				ok_Hash.put("tAdvancedHash_row49", true);
				end_Hash.put("tAdvancedHash_row49", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row49 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_12 finally ] start
				 */

				currentComponent = "tDBInput_12";

				/**
				 * [tDBInput_12 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row49 finally ] start
				 */

				currentComponent = "tAdvancedHash_row49";

				/**
				 * [tAdvancedHash_row49 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_12_SUBPROCESS_STATE", 1);
	}

	public static class row50Struct implements routines.system.IPersistableComparableLookupRow<row50Struct> {
		final static byte[] commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];
		static byte[] commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int EMPLOYEEID_SK;

		public int getEMPLOYEEID_SK() {
			return this.EMPLOYEEID_SK;
		}

		public BigDecimal EMPLOYEEID;

		public BigDecimal getEMPLOYEEID() {
			return this.EMPLOYEEID;
		}

		public String FIRST_NAME;

		public String getFIRST_NAME() {
			return this.FIRST_NAME;
		}

		public String LAST_NAME;

		public String getLAST_NAME() {
			return this.LAST_NAME;
		}

		public String DEPARTMENT;

		public String getDEPARTMENT() {
			return this.DEPARTMENT;
		}

		public String JOB_TITLE;

		public String getJOB_TITLE() {
			return this.JOB_TITLE;
		}

		public java.util.Date HIRE_DATE;

		public java.util.Date getHIRE_DATE() {
			return this.HIRE_DATE;
		}

		public String SALARY_GRADE;

		public String getSALARY_GRADE() {
			return this.SALARY_GRADE;
		}

		public java.util.Date START_DATE;

		public java.util.Date getSTART_DATE() {
			return this.START_DATE;
		}

		public java.util.Date END_DATE;

		public java.util.Date getEND_DATE() {
			return this.END_DATE;
		}

		public String IS_CURRENT;

		public String getIS_CURRENT() {
			return this.IS_CURRENT;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.EMPLOYEEID == null) ? 0 : new Double(this.EMPLOYEEID.doubleValue()).hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row50Struct other = (row50Struct) obj;

			if (this.EMPLOYEEID == null) {
				if (other.EMPLOYEEID != null)
					return false;

			} else if ((other.EMPLOYEEID == null) || (this.EMPLOYEEID.compareTo(other.EMPLOYEEID) != 0))

				return false;

			return true;
		}

		public void copyDataTo(row50Struct other) {

			other.EMPLOYEEID_SK = this.EMPLOYEEID_SK;
			other.EMPLOYEEID = this.EMPLOYEEID;
			other.FIRST_NAME = this.FIRST_NAME;
			other.LAST_NAME = this.LAST_NAME;
			other.DEPARTMENT = this.DEPARTMENT;
			other.JOB_TITLE = this.JOB_TITLE;
			other.HIRE_DATE = this.HIRE_DATE;
			other.SALARY_GRADE = this.SALARY_GRADE;
			other.START_DATE = this.START_DATE;
			other.END_DATE = this.END_DATE;
			other.IS_CURRENT = this.IS_CURRENT;

		}

		public void copyKeysDataTo(row50Struct other) {

			other.EMPLOYEEID = this.EMPLOYEEID;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				unmarshaller.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.EMPLOYEEID = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.EMPLOYEEID = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.EMPLOYEEID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
			try {

				// BigDecimal

				dos.writeObject(this.EMPLOYEEID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.EMPLOYEEID_SK = dis.readInt();

				this.FIRST_NAME = readString(dis, ois);

				this.LAST_NAME = readString(dis, ois);

				this.DEPARTMENT = readString(dis, ois);

				this.JOB_TITLE = readString(dis, ois);

				this.HIRE_DATE = readDate(dis, ois);

				this.SALARY_GRADE = readString(dis, ois);

				this.START_DATE = readDate(dis, ois);

				this.END_DATE = readDate(dis, ois);

				this.IS_CURRENT = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
			try {
				int length = 0;

				this.EMPLOYEEID_SK = objectIn.readInt();

				this.FIRST_NAME = readString(dis, objectIn);

				this.LAST_NAME = readString(dis, objectIn);

				this.DEPARTMENT = readString(dis, objectIn);

				this.JOB_TITLE = readString(dis, objectIn);

				this.HIRE_DATE = readDate(dis, objectIn);

				this.SALARY_GRADE = readString(dis, objectIn);

				this.START_DATE = readDate(dis, objectIn);

				this.END_DATE = readDate(dis, objectIn);

				this.IS_CURRENT = readString(dis, objectIn);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.EMPLOYEEID_SK);

				writeString(this.FIRST_NAME, dos, oos);

				writeString(this.LAST_NAME, dos, oos);

				writeString(this.DEPARTMENT, dos, oos);

				writeString(this.JOB_TITLE, dos, oos);

				writeDate(this.HIRE_DATE, dos, oos);

				writeString(this.SALARY_GRADE, dos, oos);

				writeDate(this.START_DATE, dos, oos);

				writeDate(this.END_DATE, dos, oos);

				writeString(this.IS_CURRENT, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut) {
			try {

				objectOut.writeInt(this.EMPLOYEEID_SK);

				writeString(this.FIRST_NAME, dos, objectOut);

				writeString(this.LAST_NAME, dos, objectOut);

				writeString(this.DEPARTMENT, dos, objectOut);

				writeString(this.JOB_TITLE, dos, objectOut);

				writeDate(this.HIRE_DATE, dos, objectOut);

				writeString(this.SALARY_GRADE, dos, objectOut);

				writeDate(this.START_DATE, dos, objectOut);

				writeDate(this.END_DATE, dos, objectOut);

				writeString(this.IS_CURRENT, dos, objectOut);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}

		public boolean supportMarshaller() {
			return true;
		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("EMPLOYEEID_SK=" + String.valueOf(EMPLOYEEID_SK));
			sb.append(",EMPLOYEEID=" + String.valueOf(EMPLOYEEID));
			sb.append(",FIRST_NAME=" + FIRST_NAME);
			sb.append(",LAST_NAME=" + LAST_NAME);
			sb.append(",DEPARTMENT=" + DEPARTMENT);
			sb.append(",JOB_TITLE=" + JOB_TITLE);
			sb.append(",HIRE_DATE=" + String.valueOf(HIRE_DATE));
			sb.append(",SALARY_GRADE=" + SALARY_GRADE);
			sb.append(",START_DATE=" + String.valueOf(START_DATE));
			sb.append(",END_DATE=" + String.valueOf(END_DATE));
			sb.append(",IS_CURRENT=" + IS_CURRENT);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row50Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.EMPLOYEEID, other.EMPLOYEEID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_13_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row50Struct row50 = new row50Struct();

				/**
				 * [tAdvancedHash_row50 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row50", false);
				start_Hash.put("tAdvancedHash_row50", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row50";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row50");
				}

				int tos_count_tAdvancedHash_row50 = 0;

				// connection name:row50
				// source node:tDBInput_13 - inputs:(after_tDBInput_9) outputs:(row50,row50) |
				// target node:tAdvancedHash_row50 - inputs:(row50) outputs:()
				// linked node: tMap_4 - inputs:(row48,row49,row50)
				// outputs:(FactEmployeePerformance_out)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row50 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row50Struct> tHash_Lookup_row50 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row50Struct>getLookup(matchingModeEnum_row50);

				globalMap.put("tHash_Lookup_row50", tHash_Lookup_row50);

				/**
				 * [tAdvancedHash_row50 begin ] stop
				 */

				/**
				 * [tDBInput_13 begin ] start
				 */

				ok_Hash.put("tDBInput_13", false);
				start_Hash.put("tDBInput_13", System.currentTimeMillis());

				currentComponent = "tDBInput_13";

				int tos_count_tDBInput_13 = 0;

				int nb_line_tDBInput_13 = 0;
				java.sql.Connection conn_tDBInput_13 = null;
				String driverClass_tDBInput_13 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tDBInput_13);

				String url_tDBInput_13 = null;
				url_tDBInput_13 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + "localhost"
						+ ")(port=" + "1521" + "))(connect_data=(service_name=" + "XEPDB1" + ")))";

				String dbUser_tDBInput_13 = "system";

				final String decryptedPassword_tDBInput_13 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:BxDTfSuVMvRMWFseq1+URzqBFb9w8D3ncdlGx7nm/xfq7HRQ0aY=");

				String dbPwd_tDBInput_13 = decryptedPassword_tDBInput_13;

				conn_tDBInput_13 = java.sql.DriverManager.getConnection(url_tDBInput_13, dbUser_tDBInput_13,
						dbPwd_tDBInput_13);
				java.sql.Statement stmtGetTZ_tDBInput_13 = conn_tDBInput_13.createStatement();
				java.sql.ResultSet rsGetTZ_tDBInput_13 = stmtGetTZ_tDBInput_13
						.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tDBInput_13 = java.util.TimeZone.getDefault().getID();
				while (rsGetTZ_tDBInput_13.next()) {
					sessionTimezone_tDBInput_13 = rsGetTZ_tDBInput_13.getString(1);
				}
				if (!(conn_tDBInput_13 instanceof oracle.jdbc.OracleConnection)
						&& conn_tDBInput_13.isWrapperFor(oracle.jdbc.OracleConnection.class)) {
					if (conn_tDBInput_13.unwrap(oracle.jdbc.OracleConnection.class) != null) {
						((oracle.jdbc.OracleConnection) conn_tDBInput_13.unwrap(oracle.jdbc.OracleConnection.class))
								.setSessionTimeZone(sessionTimezone_tDBInput_13);
					}
				} else {
					((oracle.jdbc.OracleConnection) conn_tDBInput_13).setSessionTimeZone(sessionTimezone_tDBInput_13);
				}

				java.sql.Statement stmt_tDBInput_13 = conn_tDBInput_13.createStatement();

				String dbquery_tDBInput_13 = "SELECT \n  SYSTEM.DIM_EMPLOYEEINFO.EMPLOYEEID_SK, \n  SYSTEM.DIM_EMPLOYEEINFO.EMPLOYEEID, \n  SYSTEM.DIM_EMPLOYEEINFO.FIRS"
						+ "T_NAME, \n  SYSTEM.DIM_EMPLOYEEINFO.LAST_NAME, \n  SYSTEM.DIM_EMPLOYEEINFO.DEPARTMENT, \n  SYSTEM.DIM_EMPLOYEEINFO.JOB_TITL"
						+ "E, \n  SYSTEM.DIM_EMPLOYEEINFO.HIRE_DATE, \n  SYSTEM.DIM_EMPLOYEEINFO.SALARY_GRADE, \n  SYSTEM.DIM_EMPLOYEEINFO.START_DATE,"
						+ " \n  SYSTEM.DIM_EMPLOYEEINFO.END_DATE, \n  SYSTEM.DIM_EMPLOYEEINFO.IS_CURRENT\nFROM SYSTEM.DIM_EMPLOYEEINFO";

				globalMap.put("tDBInput_13_QUERY", dbquery_tDBInput_13);
				java.sql.ResultSet rs_tDBInput_13 = null;

				try {
					rs_tDBInput_13 = stmt_tDBInput_13.executeQuery(dbquery_tDBInput_13);
					java.sql.ResultSetMetaData rsmd_tDBInput_13 = rs_tDBInput_13.getMetaData();
					int colQtyInRs_tDBInput_13 = rsmd_tDBInput_13.getColumnCount();

					String tmpContent_tDBInput_13 = null;

					while (rs_tDBInput_13.next()) {
						nb_line_tDBInput_13++;

						if (colQtyInRs_tDBInput_13 < 1) {
							row50.EMPLOYEEID_SK = 0;
						} else {

							if (rs_tDBInput_13.getObject(1) != null) {
								row50.EMPLOYEEID_SK = rs_tDBInput_13.getInt(1);
							} else {

								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_13 < 2) {
							row50.EMPLOYEEID = null;
						} else {

							if (rs_tDBInput_13.getObject(2) != null) {
								row50.EMPLOYEEID = rs_tDBInput_13.getBigDecimal(2);
							} else {

								row50.EMPLOYEEID = null;
							}
						}
						if (colQtyInRs_tDBInput_13 < 3) {
							row50.FIRST_NAME = null;
						} else {

							row50.FIRST_NAME = routines.system.JDBCUtil.getString(rs_tDBInput_13, 3, false);
						}
						if (colQtyInRs_tDBInput_13 < 4) {
							row50.LAST_NAME = null;
						} else {

							row50.LAST_NAME = routines.system.JDBCUtil.getString(rs_tDBInput_13, 4, false);
						}
						if (colQtyInRs_tDBInput_13 < 5) {
							row50.DEPARTMENT = null;
						} else {

							row50.DEPARTMENT = routines.system.JDBCUtil.getString(rs_tDBInput_13, 5, false);
						}
						if (colQtyInRs_tDBInput_13 < 6) {
							row50.JOB_TITLE = null;
						} else {

							row50.JOB_TITLE = routines.system.JDBCUtil.getString(rs_tDBInput_13, 6, false);
						}
						if (colQtyInRs_tDBInput_13 < 7) {
							row50.HIRE_DATE = null;
						} else {

							row50.HIRE_DATE = routines.system.JDBCUtil.getDate(rs_tDBInput_13, 7);
						}
						if (colQtyInRs_tDBInput_13 < 8) {
							row50.SALARY_GRADE = null;
						} else {

							row50.SALARY_GRADE = routines.system.JDBCUtil.getString(rs_tDBInput_13, 8, false);
						}
						if (colQtyInRs_tDBInput_13 < 9) {
							row50.START_DATE = null;
						} else {

							row50.START_DATE = routines.system.JDBCUtil.getDate(rs_tDBInput_13, 9);
						}
						if (colQtyInRs_tDBInput_13 < 10) {
							row50.END_DATE = null;
						} else {

							row50.END_DATE = routines.system.JDBCUtil.getDate(rs_tDBInput_13, 10);
						}
						if (colQtyInRs_tDBInput_13 < 11) {
							row50.IS_CURRENT = null;
						} else {

							row50.IS_CURRENT = routines.system.JDBCUtil.getString(rs_tDBInput_13, 11, false);
						}

						/**
						 * [tDBInput_13 begin ] stop
						 */

						/**
						 * [tDBInput_13 main ] start
						 */

						currentComponent = "tDBInput_13";

						tos_count_tDBInput_13++;

						/**
						 * [tDBInput_13 main ] stop
						 */

						/**
						 * [tDBInput_13 process_data_begin ] start
						 */

						currentComponent = "tDBInput_13";

						/**
						 * [tDBInput_13 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row50 main ] start
						 */

						currentComponent = "tAdvancedHash_row50";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row50"

							);
						}

						row50Struct row50_HashRow = new row50Struct();

						row50_HashRow.EMPLOYEEID_SK = row50.EMPLOYEEID_SK;

						row50_HashRow.EMPLOYEEID = row50.EMPLOYEEID;

						row50_HashRow.FIRST_NAME = row50.FIRST_NAME;

						row50_HashRow.LAST_NAME = row50.LAST_NAME;

						row50_HashRow.DEPARTMENT = row50.DEPARTMENT;

						row50_HashRow.JOB_TITLE = row50.JOB_TITLE;

						row50_HashRow.HIRE_DATE = row50.HIRE_DATE;

						row50_HashRow.SALARY_GRADE = row50.SALARY_GRADE;

						row50_HashRow.START_DATE = row50.START_DATE;

						row50_HashRow.END_DATE = row50.END_DATE;

						row50_HashRow.IS_CURRENT = row50.IS_CURRENT;

						tHash_Lookup_row50.put(row50_HashRow);

						tos_count_tAdvancedHash_row50++;

						/**
						 * [tAdvancedHash_row50 main ] stop
						 */

						/**
						 * [tAdvancedHash_row50 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row50";

						/**
						 * [tAdvancedHash_row50 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row50 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row50";

						/**
						 * [tAdvancedHash_row50 process_data_end ] stop
						 */

						/**
						 * [tDBInput_13 process_data_end ] start
						 */

						currentComponent = "tDBInput_13";

						/**
						 * [tDBInput_13 process_data_end ] stop
						 */

						/**
						 * [tDBInput_13 end ] start
						 */

						currentComponent = "tDBInput_13";

					}
				} finally {
					if (rs_tDBInput_13 != null) {
						rs_tDBInput_13.close();
					}
					if (stmt_tDBInput_13 != null) {
						stmt_tDBInput_13.close();
					}
					if (conn_tDBInput_13 != null && !conn_tDBInput_13.isClosed()) {

						conn_tDBInput_13.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}

				globalMap.put("tDBInput_13_NB_LINE", nb_line_tDBInput_13);

				ok_Hash.put("tDBInput_13", true);
				end_Hash.put("tDBInput_13", System.currentTimeMillis());

				/**
				 * [tDBInput_13 end ] stop
				 */

				/**
				 * [tAdvancedHash_row50 end ] start
				 */

				currentComponent = "tAdvancedHash_row50";

				tHash_Lookup_row50.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row50");
				}

				ok_Hash.put("tAdvancedHash_row50", true);
				end_Hash.put("tAdvancedHash_row50", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row50 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_13 finally ] start
				 */

				currentComponent = "tDBInput_13";

				/**
				 * [tDBInput_13 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row50 finally ] start
				 */

				currentComponent = "tAdvancedHash_row50";

				/**
				 * [tAdvancedHash_row50 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_13_SUBPROCESS_STATE", 1);
	}

	public static class copyOfSales_outStruct implements routines.system.IPersistableRow<copyOfSales_outStruct> {
		final static byte[] commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];
		static byte[] commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];

		public Integer SALESID;

		public Integer getSALESID() {
			return this.SALESID;
		}

		public Integer UNITS_SOLD;

		public Integer getUNITS_SOLD() {
			return this.UNITS_SOLD;
		}

		public String TITLE;

		public String getTITLE() {
			return this.TITLE;
		}

		public String TAGS;

		public String getTAGS() {
			return this.TAGS;
		}

		public Integer PRICE;

		public Integer getPRICE() {
			return this.PRICE;
		}

		public Integer BALANCE;

		public Integer getBALANCE() {
			return this.BALANCE;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length) {
					if (length < 1024 && commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length == 0) {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[1024];
					} else {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length);
				strReturn = new String(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length) {
					if (length < 1024 && commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length == 0) {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[1024];
					} else {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length);
				strReturn = new String(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.SALESID = readInteger(dis);

					this.UNITS_SOLD = readInteger(dis);

					this.TITLE = readString(dis);

					this.TAGS = readString(dis);

					this.PRICE = readInteger(dis);

					this.BALANCE = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.SALESID = readInteger(dis);

					this.UNITS_SOLD = readInteger(dis);

					this.TITLE = readString(dis);

					this.TAGS = readString(dis);

					this.PRICE = readInteger(dis);

					this.BALANCE = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.SALESID, dos);

				// Integer

				writeInteger(this.UNITS_SOLD, dos);

				// String

				writeString(this.TITLE, dos);

				// String

				writeString(this.TAGS, dos);

				// Integer

				writeInteger(this.PRICE, dos);

				// Integer

				writeInteger(this.BALANCE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.SALESID, dos);

				// Integer

				writeInteger(this.UNITS_SOLD, dos);

				// String

				writeString(this.TITLE, dos);

				// String

				writeString(this.TAGS, dos);

				// Integer

				writeInteger(this.PRICE, dos);

				// Integer

				writeInteger(this.BALANCE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SALESID=" + String.valueOf(SALESID));
			sb.append(",UNITS_SOLD=" + String.valueOf(UNITS_SOLD));
			sb.append(",TITLE=" + TITLE);
			sb.append(",TAGS=" + TAGS);
			sb.append(",PRICE=" + String.valueOf(PRICE));
			sb.append(",BALANCE=" + String.valueOf(BALANCE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfSales_outStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row21Struct implements routines.system.IPersistableRow<row21Struct> {
		final static byte[] commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];
		static byte[] commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];

		public int SalesID;

		public int getSalesID() {
			return this.SalesID;
		}

		public int CustomerID;

		public int getCustomerID() {
			return this.CustomerID;
		}

		public int PaymentTypeID;

		public int getPaymentTypeID() {
			return this.PaymentTypeID;
		}

		public String Type;

		public String getType() {
			return this.Type;
		}

		public int ItemsCountPurchased;

		public int getItemsCountPurchased() {
			return this.ItemsCountPurchased;
		}

		public int CashierID;

		public int getCashierID() {
			return this.CashierID;
		}

		public java.util.Date Date;

		public java.util.Date getDate() {
			return this.Date;
		}

		public java.util.Date Time;

		public java.util.Date getTime() {
			return this.Time;
		}

		public Double TotalAmount;

		public Double getTotalAmount() {
			return this.TotalAmount;
		}

		public Double NetTotal;

		public Double getNetTotal() {
			return this.NetTotal;
		}

		public Double GivenAmount;

		public Double getGivenAmount() {
			return this.GivenAmount;
		}

		public Double DiscountedAmount;

		public Double getDiscountedAmount() {
			return this.DiscountedAmount;
		}

		public Double Balance;

		public Double getBalance() {
			return this.Balance;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length) {
					if (length < 1024 && commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length == 0) {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[1024];
					} else {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length);
				strReturn = new String(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length) {
					if (length < 1024 && commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length == 0) {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[1024];
					} else {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length);
				strReturn = new String(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.SalesID = dis.readInt();

					this.CustomerID = dis.readInt();

					this.PaymentTypeID = dis.readInt();

					this.Type = readString(dis);

					this.ItemsCountPurchased = dis.readInt();

					this.CashierID = dis.readInt();

					this.Date = readDate(dis);

					this.Time = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.TotalAmount = null;
					} else {
						this.TotalAmount = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.NetTotal = null;
					} else {
						this.NetTotal = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.GivenAmount = null;
					} else {
						this.GivenAmount = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.DiscountedAmount = null;
					} else {
						this.DiscountedAmount = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Balance = null;
					} else {
						this.Balance = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.SalesID = dis.readInt();

					this.CustomerID = dis.readInt();

					this.PaymentTypeID = dis.readInt();

					this.Type = readString(dis);

					this.ItemsCountPurchased = dis.readInt();

					this.CashierID = dis.readInt();

					this.Date = readDate(dis);

					this.Time = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.TotalAmount = null;
					} else {
						this.TotalAmount = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.NetTotal = null;
					} else {
						this.NetTotal = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.GivenAmount = null;
					} else {
						this.GivenAmount = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.DiscountedAmount = null;
					} else {
						this.DiscountedAmount = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Balance = null;
					} else {
						this.Balance = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.SalesID);

				// int

				dos.writeInt(this.CustomerID);

				// int

				dos.writeInt(this.PaymentTypeID);

				// String

				writeString(this.Type, dos);

				// int

				dos.writeInt(this.ItemsCountPurchased);

				// int

				dos.writeInt(this.CashierID);

				// java.util.Date

				writeDate(this.Date, dos);

				// java.util.Date

				writeDate(this.Time, dos);

				// Double

				if (this.TotalAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.TotalAmount);
				}

				// Double

				if (this.NetTotal == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.NetTotal);
				}

				// Double

				if (this.GivenAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.GivenAmount);
				}

				// Double

				if (this.DiscountedAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.DiscountedAmount);
				}

				// Double

				if (this.Balance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Balance);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.SalesID);

				// int

				dos.writeInt(this.CustomerID);

				// int

				dos.writeInt(this.PaymentTypeID);

				// String

				writeString(this.Type, dos);

				// int

				dos.writeInt(this.ItemsCountPurchased);

				// int

				dos.writeInt(this.CashierID);

				// java.util.Date

				writeDate(this.Date, dos);

				// java.util.Date

				writeDate(this.Time, dos);

				// Double

				if (this.TotalAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.TotalAmount);
				}

				// Double

				if (this.NetTotal == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.NetTotal);
				}

				// Double

				if (this.GivenAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.GivenAmount);
				}

				// Double

				if (this.DiscountedAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.DiscountedAmount);
				}

				// Double

				if (this.Balance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Balance);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SalesID=" + String.valueOf(SalesID));
			sb.append(",CustomerID=" + String.valueOf(CustomerID));
			sb.append(",PaymentTypeID=" + String.valueOf(PaymentTypeID));
			sb.append(",Type=" + Type);
			sb.append(",ItemsCountPurchased=" + String.valueOf(ItemsCountPurchased));
			sb.append(",CashierID=" + String.valueOf(CashierID));
			sb.append(",Date=" + String.valueOf(Date));
			sb.append(",Time=" + String.valueOf(Time));
			sb.append(",TotalAmount=" + String.valueOf(TotalAmount));
			sb.append(",NetTotal=" + String.valueOf(NetTotal));
			sb.append(",GivenAmount=" + String.valueOf(GivenAmount));
			sb.append(",DiscountedAmount=" + String.valueOf(DiscountedAmount));
			sb.append(",Balance=" + String.valueOf(Balance));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row21Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tDBInput_15Struct implements routines.system.IPersistableRow<after_tDBInput_15Struct> {
		final static byte[] commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];
		static byte[] commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int SalesID;

		public int getSalesID() {
			return this.SalesID;
		}

		public int CustomerID;

		public int getCustomerID() {
			return this.CustomerID;
		}

		public int PaymentTypeID;

		public int getPaymentTypeID() {
			return this.PaymentTypeID;
		}

		public String Type;

		public String getType() {
			return this.Type;
		}

		public int ItemsCountPurchased;

		public int getItemsCountPurchased() {
			return this.ItemsCountPurchased;
		}

		public int CashierID;

		public int getCashierID() {
			return this.CashierID;
		}

		public java.util.Date Date;

		public java.util.Date getDate() {
			return this.Date;
		}

		public java.util.Date Time;

		public java.util.Date getTime() {
			return this.Time;
		}

		public Double TotalAmount;

		public Double getTotalAmount() {
			return this.TotalAmount;
		}

		public Double NetTotal;

		public Double getNetTotal() {
			return this.NetTotal;
		}

		public Double GivenAmount;

		public Double getGivenAmount() {
			return this.GivenAmount;
		}

		public Double DiscountedAmount;

		public Double getDiscountedAmount() {
			return this.DiscountedAmount;
		}

		public Double Balance;

		public Double getBalance() {
			return this.Balance;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.SalesID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tDBInput_15Struct other = (after_tDBInput_15Struct) obj;

			if (this.SalesID != other.SalesID)
				return false;

			return true;
		}

		public void copyDataTo(after_tDBInput_15Struct other) {

			other.SalesID = this.SalesID;
			other.CustomerID = this.CustomerID;
			other.PaymentTypeID = this.PaymentTypeID;
			other.Type = this.Type;
			other.ItemsCountPurchased = this.ItemsCountPurchased;
			other.CashierID = this.CashierID;
			other.Date = this.Date;
			other.Time = this.Time;
			other.TotalAmount = this.TotalAmount;
			other.NetTotal = this.NetTotal;
			other.GivenAmount = this.GivenAmount;
			other.DiscountedAmount = this.DiscountedAmount;
			other.Balance = this.Balance;

		}

		public void copyKeysDataTo(after_tDBInput_15Struct other) {

			other.SalesID = this.SalesID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length) {
					if (length < 1024 && commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length == 0) {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[1024];
					} else {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length);
				strReturn = new String(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length) {
					if (length < 1024 && commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length == 0) {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[1024];
					} else {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length);
				strReturn = new String(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.SalesID = dis.readInt();

					this.CustomerID = dis.readInt();

					this.PaymentTypeID = dis.readInt();

					this.Type = readString(dis);

					this.ItemsCountPurchased = dis.readInt();

					this.CashierID = dis.readInt();

					this.Date = readDate(dis);

					this.Time = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.TotalAmount = null;
					} else {
						this.TotalAmount = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.NetTotal = null;
					} else {
						this.NetTotal = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.GivenAmount = null;
					} else {
						this.GivenAmount = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.DiscountedAmount = null;
					} else {
						this.DiscountedAmount = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Balance = null;
					} else {
						this.Balance = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.SalesID = dis.readInt();

					this.CustomerID = dis.readInt();

					this.PaymentTypeID = dis.readInt();

					this.Type = readString(dis);

					this.ItemsCountPurchased = dis.readInt();

					this.CashierID = dis.readInt();

					this.Date = readDate(dis);

					this.Time = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.TotalAmount = null;
					} else {
						this.TotalAmount = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.NetTotal = null;
					} else {
						this.NetTotal = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.GivenAmount = null;
					} else {
						this.GivenAmount = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.DiscountedAmount = null;
					} else {
						this.DiscountedAmount = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Balance = null;
					} else {
						this.Balance = dis.readDouble();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.SalesID);

				// int

				dos.writeInt(this.CustomerID);

				// int

				dos.writeInt(this.PaymentTypeID);

				// String

				writeString(this.Type, dos);

				// int

				dos.writeInt(this.ItemsCountPurchased);

				// int

				dos.writeInt(this.CashierID);

				// java.util.Date

				writeDate(this.Date, dos);

				// java.util.Date

				writeDate(this.Time, dos);

				// Double

				if (this.TotalAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.TotalAmount);
				}

				// Double

				if (this.NetTotal == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.NetTotal);
				}

				// Double

				if (this.GivenAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.GivenAmount);
				}

				// Double

				if (this.DiscountedAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.DiscountedAmount);
				}

				// Double

				if (this.Balance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Balance);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.SalesID);

				// int

				dos.writeInt(this.CustomerID);

				// int

				dos.writeInt(this.PaymentTypeID);

				// String

				writeString(this.Type, dos);

				// int

				dos.writeInt(this.ItemsCountPurchased);

				// int

				dos.writeInt(this.CashierID);

				// java.util.Date

				writeDate(this.Date, dos);

				// java.util.Date

				writeDate(this.Time, dos);

				// Double

				if (this.TotalAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.TotalAmount);
				}

				// Double

				if (this.NetTotal == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.NetTotal);
				}

				// Double

				if (this.GivenAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.GivenAmount);
				}

				// Double

				if (this.DiscountedAmount == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.DiscountedAmount);
				}

				// Double

				if (this.Balance == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Balance);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SalesID=" + String.valueOf(SalesID));
			sb.append(",CustomerID=" + String.valueOf(CustomerID));
			sb.append(",PaymentTypeID=" + String.valueOf(PaymentTypeID));
			sb.append(",Type=" + Type);
			sb.append(",ItemsCountPurchased=" + String.valueOf(ItemsCountPurchased));
			sb.append(",CashierID=" + String.valueOf(CashierID));
			sb.append(",Date=" + String.valueOf(Date));
			sb.append(",Time=" + String.valueOf(Time));
			sb.append(",TotalAmount=" + String.valueOf(TotalAmount));
			sb.append(",NetTotal=" + String.valueOf(NetTotal));
			sb.append(",GivenAmount=" + String.valueOf(GivenAmount));
			sb.append(",DiscountedAmount=" + String.valueOf(DiscountedAmount));
			sb.append(",Balance=" + String.valueOf(Balance));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tDBInput_15Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.SalesID, other.SalesID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_15Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_15_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tDBInput_16Process(globalMap);
				tDBInput_17Process(globalMap);

				row21Struct row21 = new row21Struct();
				copyOfSales_outStruct copyOfSales_out = new copyOfSales_outStruct();

				/**
				 * [tDBOutput_13 begin ] start
				 */

				ok_Hash.put("tDBOutput_13", false);
				start_Hash.put("tDBOutput_13", System.currentTimeMillis());

				currentComponent = "tDBOutput_13";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfSales_out");
				}

				int tos_count_tDBOutput_13 = 0;

				int nb_line_tDBOutput_13 = 0;
				int nb_line_update_tDBOutput_13 = 0;
				int nb_line_inserted_tDBOutput_13 = 0;
				int nb_line_deleted_tDBOutput_13 = 0;
				int nb_line_rejected_tDBOutput_13 = 0;

				int tmp_batchUpdateCount_tDBOutput_13 = 0;

				int deletedCount_tDBOutput_13 = 0;
				int updatedCount_tDBOutput_13 = 0;
				int insertedCount_tDBOutput_13 = 0;
				int rowsToCommitCount_tDBOutput_13 = 0;
				int rejectedCount_tDBOutput_13 = 0;

				boolean whetherReject_tDBOutput_13 = false;

				java.sql.Connection conn_tDBOutput_13 = null;

				// optional table
				String dbschema_tDBOutput_13 = null;
				String tableName_tDBOutput_13 = null;
				String driverClass_tDBOutput_13 = "oracle.jdbc.OracleDriver";

				java.lang.Class.forName(driverClass_tDBOutput_13);
				String url_tDBOutput_13 = null;
				url_tDBOutput_13 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + "localhost"
						+ ")(port=" + "1521" + "))(connect_data=(service_name=" + "XEPDB1" + ")))";
				String dbUser_tDBOutput_13 = "system";

				final String decryptedPassword_tDBOutput_13 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:nMhIN1112JF7v0R08dt95G0Iktdnb6x98PnpG0MYJqHnc2tN8hs=");

				String dbPwd_tDBOutput_13 = decryptedPassword_tDBOutput_13;
				dbschema_tDBOutput_13 = "";

				conn_tDBOutput_13 = java.sql.DriverManager.getConnection(url_tDBOutput_13, dbUser_tDBOutput_13,
						dbPwd_tDBOutput_13);
				resourceMap.put("conn_tDBOutput_13", conn_tDBOutput_13);
				conn_tDBOutput_13.setAutoCommit(false);
				int commitEvery_tDBOutput_13 = 10000;
				int commitCounter_tDBOutput_13 = 0;
				int batchSize_tDBOutput_13 = 10000;
				int batchSizeCounter_tDBOutput_13 = 0;
				int count_tDBOutput_13 = 0;

				if (dbschema_tDBOutput_13 == null || dbschema_tDBOutput_13.trim().length() == 0) {
					tableName_tDBOutput_13 = ("DIM_SALES");
				} else {
					tableName_tDBOutput_13 = dbschema_tDBOutput_13 + "." + ("DIM_SALES");
				}
				String insert_tDBOutput_13 = "INSERT INTO " + tableName_tDBOutput_13
						+ " (SALESID,UNITS_SOLD,TITLE,TAGS,PRICE,BALANCE) VALUES (?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_13 = conn_tDBOutput_13.prepareStatement(insert_tDBOutput_13);
				resourceMap.put("pstmt_tDBOutput_13", pstmt_tDBOutput_13);

				/**
				 * [tDBOutput_13 begin ] stop
				 */

				/**
				 * [tMap_12 begin ] start
				 */

				ok_Hash.put("tMap_12", false);
				start_Hash.put("tMap_12", System.currentTimeMillis());

				currentComponent = "tMap_12";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row21");
				}

				int tos_count_tMap_12 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct> tHash_Lookup_row22 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct>) globalMap
						.get("tHash_Lookup_row22"));

				row22Struct row22HashKey = new row22Struct();
				row22Struct row22Default = new row22Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row32Struct> tHash_Lookup_row32 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row32Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row32Struct>) globalMap
						.get("tHash_Lookup_row32"));

				row32Struct row32HashKey = new row32Struct();
				row32Struct row32Default = new row32Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_12__Struct {
				}
				Var__tMap_12__Struct Var__tMap_12 = new Var__tMap_12__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfSales_outStruct copyOfSales_out_tmp = new copyOfSales_outStruct();
// ###############################

				/**
				 * [tMap_12 begin ] stop
				 */

				/**
				 * [tDBInput_15 begin ] start
				 */

				ok_Hash.put("tDBInput_15", false);
				start_Hash.put("tDBInput_15", System.currentTimeMillis());

				currentComponent = "tDBInput_15";

				int tos_count_tDBInput_15 = 0;

				java.util.Calendar calendar_tDBInput_15 = java.util.Calendar.getInstance();
				calendar_tDBInput_15.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_15 = calendar_tDBInput_15.getTime();
				int nb_line_tDBInput_15 = 0;
				java.sql.Connection conn_tDBInput_15 = null;
				String driverClass_tDBInput_15 = "com.mysql.cj.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_15 = java.lang.Class.forName(driverClass_tDBInput_15);
				String dbUser_tDBInput_15 = "root";

				final String decryptedPassword_tDBInput_15 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:qYl7DZcEtO10DQT2XrM3jrjjqDeiRRmSOnXXFeflG88WTIjg");

				String dbPwd_tDBInput_15 = decryptedPassword_tDBInput_15;

				String properties_tDBInput_15 = "noDatetimeStringSync=true&enabledTLSProtocols=TLSv1.2,TLSv1.1,TLSv1";
				if (properties_tDBInput_15 == null || properties_tDBInput_15.trim().length() == 0) {
					properties_tDBInput_15 = "";
				}
				String url_tDBInput_15 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "clothing_storeDB" + "?"
						+ properties_tDBInput_15;

				conn_tDBInput_15 = java.sql.DriverManager.getConnection(url_tDBInput_15, dbUser_tDBInput_15,
						dbPwd_tDBInput_15);

				java.sql.Statement stmt_tDBInput_15 = conn_tDBInput_15.createStatement();

				String dbquery_tDBInput_15 = "SELECT \n  `sales`.`SalesID`, \n  `sales`.`CustomerID`, \n  `sales`.`PaymentTypeID`, \n  `sales`.`Type`, \n  `sales`.`ItemsC"
						+ "ountPurchased`, \n  `sales`.`CashierID`, \n  `sales`.`Date`, \n  `sales`.`Time`, \n  `sales`.`TotalAmount`, \n  `sales`.`NetT"
						+ "otal`, \n  `sales`.`GivenAmount`, \n  `sales`.`DiscountedAmount`, \n  `sales`.`Balance`\nFROM `sales`";

				globalMap.put("tDBInput_15_QUERY", dbquery_tDBInput_15);
				java.sql.ResultSet rs_tDBInput_15 = null;

				try {
					rs_tDBInput_15 = stmt_tDBInput_15.executeQuery(dbquery_tDBInput_15);
					java.sql.ResultSetMetaData rsmd_tDBInput_15 = rs_tDBInput_15.getMetaData();
					int colQtyInRs_tDBInput_15 = rsmd_tDBInput_15.getColumnCount();

					String tmpContent_tDBInput_15 = null;

					while (rs_tDBInput_15.next()) {
						nb_line_tDBInput_15++;

						if (colQtyInRs_tDBInput_15 < 1) {
							row21.SalesID = 0;
						} else {

							row21.SalesID = rs_tDBInput_15.getInt(1);
							if (rs_tDBInput_15.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_15 < 2) {
							row21.CustomerID = 0;
						} else {

							row21.CustomerID = rs_tDBInput_15.getInt(2);
							if (rs_tDBInput_15.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_15 < 3) {
							row21.PaymentTypeID = 0;
						} else {

							row21.PaymentTypeID = rs_tDBInput_15.getInt(3);
							if (rs_tDBInput_15.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_15 < 4) {
							row21.Type = null;
						} else {

							row21.Type = routines.system.JDBCUtil.getString(rs_tDBInput_15, 4, false);
						}
						if (colQtyInRs_tDBInput_15 < 5) {
							row21.ItemsCountPurchased = 0;
						} else {

							row21.ItemsCountPurchased = rs_tDBInput_15.getInt(5);
							if (rs_tDBInput_15.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_15 < 6) {
							row21.CashierID = 0;
						} else {

							row21.CashierID = rs_tDBInput_15.getInt(6);
							if (rs_tDBInput_15.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_15 < 7) {
							row21.Date = null;
						} else {

							if (rs_tDBInput_15.getString(7) != null) {
								String dateString_tDBInput_15 = rs_tDBInput_15.getString(7);
								if (!("0000-00-00").equals(dateString_tDBInput_15)
										&& !("0000-00-00 00:00:00").equals(dateString_tDBInput_15)) {
									row21.Date = rs_tDBInput_15.getTimestamp(7);
								} else {
									row21.Date = (java.util.Date) year0_tDBInput_15.clone();
								}
							} else {
								row21.Date = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 8) {
							row21.Time = null;
						} else {

							if (rs_tDBInput_15.getString(8) != null) {
								String dateString_tDBInput_15 = rs_tDBInput_15.getString(8);
								if (!("0000-00-00").equals(dateString_tDBInput_15)
										&& !("0000-00-00 00:00:00").equals(dateString_tDBInput_15)) {
									row21.Time = rs_tDBInput_15.getTimestamp(8);
								} else {
									row21.Time = (java.util.Date) year0_tDBInput_15.clone();
								}
							} else {
								row21.Time = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 9) {
							row21.TotalAmount = null;
						} else {

							row21.TotalAmount = rs_tDBInput_15.getDouble(9);
							if (rs_tDBInput_15.wasNull()) {
								row21.TotalAmount = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 10) {
							row21.NetTotal = null;
						} else {

							row21.NetTotal = rs_tDBInput_15.getDouble(10);
							if (rs_tDBInput_15.wasNull()) {
								row21.NetTotal = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 11) {
							row21.GivenAmount = null;
						} else {

							row21.GivenAmount = rs_tDBInput_15.getDouble(11);
							if (rs_tDBInput_15.wasNull()) {
								row21.GivenAmount = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 12) {
							row21.DiscountedAmount = null;
						} else {

							row21.DiscountedAmount = rs_tDBInput_15.getDouble(12);
							if (rs_tDBInput_15.wasNull()) {
								row21.DiscountedAmount = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 13) {
							row21.Balance = null;
						} else {

							row21.Balance = rs_tDBInput_15.getDouble(13);
							if (rs_tDBInput_15.wasNull()) {
								row21.Balance = null;
							}
						}

						/**
						 * [tDBInput_15 begin ] stop
						 */

						/**
						 * [tDBInput_15 main ] start
						 */

						currentComponent = "tDBInput_15";

						tos_count_tDBInput_15++;

						/**
						 * [tDBInput_15 main ] stop
						 */

						/**
						 * [tDBInput_15 process_data_begin ] start
						 */

						currentComponent = "tDBInput_15";

						/**
						 * [tDBInput_15 process_data_begin ] stop
						 */

						/**
						 * [tMap_12 main ] start
						 */

						currentComponent = "tMap_12";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row21"

							);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_12 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_12 = false;
						boolean mainRowRejected_tMap_12 = false;

						///////////////////////////////////////////////
						// Starting Lookup Table "row22"
						///////////////////////////////////////////////

						boolean forceLooprow22 = false;

						row22Struct row22ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_12) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_12 = false;

							Object exprKeyValue_row22__SalesID = row21.SalesID;
							if (exprKeyValue_row22__SalesID == null) {
								hasCasePrimitiveKeyWithNull_tMap_12 = true;
							} else {
								row22HashKey.SalesID = (int) (Integer) exprKeyValue_row22__SalesID;
							}

							row22HashKey.hashCodeDirty = true;

							if (!hasCasePrimitiveKeyWithNull_tMap_12) { // G_TM_M_091

								tHash_Lookup_row22.lookup(row22HashKey);

							} // G_TM_M_091

						} // G_TM_M_020

						if (tHash_Lookup_row22 != null && tHash_Lookup_row22.getCount(row22HashKey) > 1) { // G 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
							// 'row22' and it contains more one result from keys : row22.SalesID = '" +
							// row22HashKey.SalesID + "'");
						} // G 071

						row22Struct row22 = null;

						row22Struct fromLookup_row22 = null;
						row22 = row22Default;

						if (tHash_Lookup_row22 != null && tHash_Lookup_row22.hasNext()) { // G 099

							fromLookup_row22 = tHash_Lookup_row22.next();

						} // G 099

						if (fromLookup_row22 != null) {
							row22 = fromLookup_row22;
						}

						///////////////////////////////////////////////
						// Starting Lookup Table "row32"
						///////////////////////////////////////////////

						boolean forceLooprow32 = false;

						row32Struct row32ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_12) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_12 = false;

							Object exprKeyValue_row32__ProductID = row22.ProductID;
							if (exprKeyValue_row32__ProductID == null) {
								hasCasePrimitiveKeyWithNull_tMap_12 = true;
							} else {
								row32HashKey.ProductID = (int) (Integer) exprKeyValue_row32__ProductID;
							}

							row32HashKey.hashCodeDirty = true;

							if (!hasCasePrimitiveKeyWithNull_tMap_12) { // G_TM_M_091

								tHash_Lookup_row32.lookup(row32HashKey);

							} // G_TM_M_091

						} // G_TM_M_020

						if (tHash_Lookup_row32 != null && tHash_Lookup_row32.getCount(row32HashKey) > 1) { // G 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
							// 'row32' and it contains more one result from keys : row32.ProductID = '" +
							// row32HashKey.ProductID + "'");
						} // G 071

						row32Struct row32 = null;

						row32Struct fromLookup_row32 = null;
						row32 = row32Default;

						if (tHash_Lookup_row32 != null && tHash_Lookup_row32.hasNext()) { // G 099

							fromLookup_row32 = tHash_Lookup_row32.next();

						} // G 099

						if (fromLookup_row32 != null) {
							row32 = fromLookup_row32;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_12__Struct Var = Var__tMap_12;// ###############################
							// ###############################
							// # Output tables

							copyOfSales_out = null;

// # Output table : 'copyOfSales_out'
							copyOfSales_out_tmp.SALESID = row21.SalesID;
							copyOfSales_out_tmp.UNITS_SOLD = row21.ItemsCountPurchased;
							copyOfSales_out_tmp.TITLE = row32.ProductName;
							copyOfSales_out_tmp.TAGS = row21.Type;
							copyOfSales_out_tmp.PRICE = row21.NetTotal != null ? ((Double) row21.NetTotal).intValue()
									: null;
							copyOfSales_out_tmp.BALANCE = row21.Balance != null ? ((Double) row21.Balance).intValue()
									: null;
							copyOfSales_out = copyOfSales_out_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_12 = false;

						tos_count_tMap_12++;

						/**
						 * [tMap_12 main ] stop
						 */

						/**
						 * [tMap_12 process_data_begin ] start
						 */

						currentComponent = "tMap_12";

						/**
						 * [tMap_12 process_data_begin ] stop
						 */
// Start of branch "copyOfSales_out"
						if (copyOfSales_out != null) {

							/**
							 * [tDBOutput_13 main ] start
							 */

							currentComponent = "tDBOutput_13";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "copyOfSales_out"

								);
							}

							whetherReject_tDBOutput_13 = false;
							if (copyOfSales_out.SALESID == null) {
								pstmt_tDBOutput_13.setNull(1, java.sql.Types.INTEGER);
							} else {
								pstmt_tDBOutput_13.setInt(1, copyOfSales_out.SALESID);
							}

							if (copyOfSales_out.UNITS_SOLD == null) {
								pstmt_tDBOutput_13.setNull(2, java.sql.Types.INTEGER);
							} else {
								pstmt_tDBOutput_13.setInt(2, copyOfSales_out.UNITS_SOLD);
							}

							if (copyOfSales_out.TITLE == null) {
								pstmt_tDBOutput_13.setNull(3, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_13.setString(3, copyOfSales_out.TITLE);
							}

							if (copyOfSales_out.TAGS == null) {
								pstmt_tDBOutput_13.setNull(4, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_13.setString(4, copyOfSales_out.TAGS);
							}

							if (copyOfSales_out.PRICE == null) {
								pstmt_tDBOutput_13.setNull(5, java.sql.Types.INTEGER);
							} else {
								pstmt_tDBOutput_13.setInt(5, copyOfSales_out.PRICE);
							}

							if (copyOfSales_out.BALANCE == null) {
								pstmt_tDBOutput_13.setNull(6, java.sql.Types.INTEGER);
							} else {
								pstmt_tDBOutput_13.setInt(6, copyOfSales_out.BALANCE);
							}

							pstmt_tDBOutput_13.addBatch();
							nb_line_tDBOutput_13++;
							batchSizeCounter_tDBOutput_13++;
							if (batchSize_tDBOutput_13 > 0 && batchSize_tDBOutput_13 <= batchSizeCounter_tDBOutput_13) {
								try {
									pstmt_tDBOutput_13.executeBatch();
								} catch (java.sql.BatchUpdateException e_tDBOutput_13) {
									globalMap.put("tDBOutput_13_ERROR_MESSAGE", e_tDBOutput_13.getMessage());
									java.sql.SQLException ne_tDBOutput_13 = e_tDBOutput_13.getNextException(),
											sqle_tDBOutput_13 = null;
									String errormessage_tDBOutput_13;
									if (ne_tDBOutput_13 != null) {
										// build new exception to provide the original cause
										sqle_tDBOutput_13 = new java.sql.SQLException(
												e_tDBOutput_13.getMessage() + "\ncaused by: "
														+ ne_tDBOutput_13.getMessage(),
												ne_tDBOutput_13.getSQLState(), ne_tDBOutput_13.getErrorCode(),
												ne_tDBOutput_13);
										errormessage_tDBOutput_13 = sqle_tDBOutput_13.getMessage();
									} else {
										errormessage_tDBOutput_13 = e_tDBOutput_13.getMessage();
									}

									System.err.println(errormessage_tDBOutput_13);

								}
								tmp_batchUpdateCount_tDBOutput_13 = pstmt_tDBOutput_13.getUpdateCount();
								insertedCount_tDBOutput_13 += (tmp_batchUpdateCount_tDBOutput_13 != -1
										? tmp_batchUpdateCount_tDBOutput_13
										: 0);
								rowsToCommitCount_tDBOutput_13 += (tmp_batchUpdateCount_tDBOutput_13 != -1
										? tmp_batchUpdateCount_tDBOutput_13
										: 0);
								batchSizeCounter_tDBOutput_13 = 0;
							}
							commitCounter_tDBOutput_13++;
							if (commitEvery_tDBOutput_13 <= commitCounter_tDBOutput_13) {
								if (batchSizeCounter_tDBOutput_13 > 0) {
									try {
										pstmt_tDBOutput_13.executeBatch();
									} catch (java.sql.BatchUpdateException e_tDBOutput_13) {
										globalMap.put("tDBOutput_13_ERROR_MESSAGE", e_tDBOutput_13.getMessage());
										java.sql.SQLException ne_tDBOutput_13 = e_tDBOutput_13.getNextException(),
												sqle_tDBOutput_13 = null;
										String errormessage_tDBOutput_13;
										if (ne_tDBOutput_13 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_13 = new java.sql.SQLException(
													e_tDBOutput_13.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_13.getMessage(),
													ne_tDBOutput_13.getSQLState(), ne_tDBOutput_13.getErrorCode(),
													ne_tDBOutput_13);
											errormessage_tDBOutput_13 = sqle_tDBOutput_13.getMessage();
										} else {
											errormessage_tDBOutput_13 = e_tDBOutput_13.getMessage();
										}

										System.err.println(errormessage_tDBOutput_13);

									}
									tmp_batchUpdateCount_tDBOutput_13 = pstmt_tDBOutput_13.getUpdateCount();
									insertedCount_tDBOutput_13 += (tmp_batchUpdateCount_tDBOutput_13 != -1
											? tmp_batchUpdateCount_tDBOutput_13
											: 0);
									rowsToCommitCount_tDBOutput_13 += (tmp_batchUpdateCount_tDBOutput_13 != -1
											? tmp_batchUpdateCount_tDBOutput_13
											: 0);
								}
								if (rowsToCommitCount_tDBOutput_13 != 0) {

								}
								conn_tDBOutput_13.commit();
								if (rowsToCommitCount_tDBOutput_13 != 0) {

									rowsToCommitCount_tDBOutput_13 = 0;
								}
								commitCounter_tDBOutput_13 = 0;
								batchSizeCounter_tDBOutput_13 = 0;
							}

							tos_count_tDBOutput_13++;

							/**
							 * [tDBOutput_13 main ] stop
							 */

							/**
							 * [tDBOutput_13 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_13";

							/**
							 * [tDBOutput_13 process_data_begin ] stop
							 */

							/**
							 * [tDBOutput_13 process_data_end ] start
							 */

							currentComponent = "tDBOutput_13";

							/**
							 * [tDBOutput_13 process_data_end ] stop
							 */

						} // End of branch "copyOfSales_out"

						/**
						 * [tMap_12 process_data_end ] start
						 */

						currentComponent = "tMap_12";

						/**
						 * [tMap_12 process_data_end ] stop
						 */

						/**
						 * [tDBInput_15 process_data_end ] start
						 */

						currentComponent = "tDBInput_15";

						/**
						 * [tDBInput_15 process_data_end ] stop
						 */

						/**
						 * [tDBInput_15 end ] start
						 */

						currentComponent = "tDBInput_15";

					}
				} finally {
					if (rs_tDBInput_15 != null) {
						rs_tDBInput_15.close();
					}
					if (stmt_tDBInput_15 != null) {
						stmt_tDBInput_15.close();
					}
					if (conn_tDBInput_15 != null && !conn_tDBInput_15.isClosed()) {

						conn_tDBInput_15.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}

				globalMap.put("tDBInput_15_NB_LINE", nb_line_tDBInput_15);

				ok_Hash.put("tDBInput_15", true);
				end_Hash.put("tDBInput_15", System.currentTimeMillis());

				/**
				 * [tDBInput_15 end ] stop
				 */

				/**
				 * [tMap_12 end ] start
				 */

				currentComponent = "tMap_12";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row22 != null) {
					tHash_Lookup_row22.endGet();
				}
				globalMap.remove("tHash_Lookup_row22");

				if (tHash_Lookup_row32 != null) {
					tHash_Lookup_row32.endGet();
				}
				globalMap.remove("tHash_Lookup_row32");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row21");
				}

				ok_Hash.put("tMap_12", true);
				end_Hash.put("tMap_12", System.currentTimeMillis());

				/**
				 * [tMap_12 end ] stop
				 */

				/**
				 * [tDBOutput_13 end ] start
				 */

				currentComponent = "tDBOutput_13";

				if (batchSizeCounter_tDBOutput_13 > 0) {
					try {
						if (pstmt_tDBOutput_13 != null) {

							pstmt_tDBOutput_13.executeBatch();

						}
					} catch (java.sql.BatchUpdateException e_tDBOutput_13) {
						globalMap.put("tDBOutput_13_ERROR_MESSAGE", e_tDBOutput_13.getMessage());
						java.sql.SQLException ne_tDBOutput_13 = e_tDBOutput_13.getNextException(),
								sqle_tDBOutput_13 = null;
						String errormessage_tDBOutput_13;
						if (ne_tDBOutput_13 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_13 = new java.sql.SQLException(
									e_tDBOutput_13.getMessage() + "\ncaused by: " + ne_tDBOutput_13.getMessage(),
									ne_tDBOutput_13.getSQLState(), ne_tDBOutput_13.getErrorCode(), ne_tDBOutput_13);
							errormessage_tDBOutput_13 = sqle_tDBOutput_13.getMessage();
						} else {
							errormessage_tDBOutput_13 = e_tDBOutput_13.getMessage();
						}

						System.err.println(errormessage_tDBOutput_13);

					}
					if (pstmt_tDBOutput_13 != null) {
						tmp_batchUpdateCount_tDBOutput_13 = pstmt_tDBOutput_13.getUpdateCount();

						insertedCount_tDBOutput_13

								+= (tmp_batchUpdateCount_tDBOutput_13 != -1 ? tmp_batchUpdateCount_tDBOutput_13 : 0);
						rowsToCommitCount_tDBOutput_13 += (tmp_batchUpdateCount_tDBOutput_13 != -1
								? tmp_batchUpdateCount_tDBOutput_13
								: 0);
					}
				}
				if (pstmt_tDBOutput_13 != null) {

					pstmt_tDBOutput_13.close();
					resourceMap.remove("pstmt_tDBOutput_13");

				}
				resourceMap.put("statementClosed_tDBOutput_13", true);
				if (commitCounter_tDBOutput_13 > 0 && rowsToCommitCount_tDBOutput_13 != 0) {

				}
				conn_tDBOutput_13.commit();
				if (commitCounter_tDBOutput_13 > 0 && rowsToCommitCount_tDBOutput_13 != 0) {

					rowsToCommitCount_tDBOutput_13 = 0;
				}
				commitCounter_tDBOutput_13 = 0;

				conn_tDBOutput_13.close();

				resourceMap.put("finish_tDBOutput_13", true);

				nb_line_deleted_tDBOutput_13 = nb_line_deleted_tDBOutput_13 + deletedCount_tDBOutput_13;
				nb_line_update_tDBOutput_13 = nb_line_update_tDBOutput_13 + updatedCount_tDBOutput_13;
				nb_line_inserted_tDBOutput_13 = nb_line_inserted_tDBOutput_13 + insertedCount_tDBOutput_13;
				nb_line_rejected_tDBOutput_13 = nb_line_rejected_tDBOutput_13 + rejectedCount_tDBOutput_13;

				globalMap.put("tDBOutput_13_NB_LINE", nb_line_tDBOutput_13);
				globalMap.put("tDBOutput_13_NB_LINE_UPDATED", nb_line_update_tDBOutput_13);
				globalMap.put("tDBOutput_13_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_13);
				globalMap.put("tDBOutput_13_NB_LINE_DELETED", nb_line_deleted_tDBOutput_13);
				globalMap.put("tDBOutput_13_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_13);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfSales_out");
				}

				ok_Hash.put("tDBOutput_13", true);
				end_Hash.put("tDBOutput_13", System.currentTimeMillis());

				/**
				 * [tDBOutput_13 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_12"
			globalMap.remove("tHash_Lookup_row22");

			// free memory for "tMap_12"
			globalMap.remove("tHash_Lookup_row32");

			try {

				/**
				 * [tDBInput_15 finally ] start
				 */

				currentComponent = "tDBInput_15";

				/**
				 * [tDBInput_15 finally ] stop
				 */

				/**
				 * [tMap_12 finally ] start
				 */

				currentComponent = "tMap_12";

				/**
				 * [tMap_12 finally ] stop
				 */

				/**
				 * [tDBOutput_13 finally ] start
				 */

				currentComponent = "tDBOutput_13";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_13") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_13 = null;
						if ((pstmtToClose_tDBOutput_13 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_13")) != null) {
							pstmtToClose_tDBOutput_13.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_13") == null) {
						java.sql.Connection ctn_tDBOutput_13 = null;
						if ((ctn_tDBOutput_13 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_13")) != null) {
							try {
								ctn_tDBOutput_13.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_13) {
								String errorMessage_tDBOutput_13 = "failed to close the connection in tDBOutput_13 :"
										+ sqlEx_tDBOutput_13.getMessage();
								System.err.println(errorMessage_tDBOutput_13);
							}
						}
					}
				}

				/**
				 * [tDBOutput_13 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_15_SUBPROCESS_STATE", 1);
	}

	public static class row22Struct implements routines.system.IPersistableComparableLookupRow<row22Struct> {
		final static byte[] commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];
		static byte[] commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int ItemID;

		public int getItemID() {
			return this.ItemID;
		}

		public int SalesID;

		public int getSalesID() {
			return this.SalesID;
		}

		public int ProductID;

		public int getProductID() {
			return this.ProductID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.SalesID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row22Struct other = (row22Struct) obj;

			if (this.SalesID != other.SalesID)
				return false;

			return true;
		}

		public void copyDataTo(row22Struct other) {

			other.ItemID = this.ItemID;
			other.SalesID = this.SalesID;
			other.ProductID = this.ProductID;

		}

		public void copyKeysDataTo(row22Struct other) {

			other.SalesID = this.SalesID;

		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.SalesID = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.SalesID = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.SalesID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.SalesID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.ItemID = dis.readInt();

				this.ProductID = dis.readInt();

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
			try {
				int length = 0;

				this.ItemID = objectIn.readInt();

				this.ProductID = objectIn.readInt();

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.ItemID);

				dos.writeInt(this.ProductID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut) {
			try {

				objectOut.writeInt(this.ItemID);

				objectOut.writeInt(this.ProductID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}

		public boolean supportMarshaller() {
			return true;
		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ItemID=" + String.valueOf(ItemID));
			sb.append(",SalesID=" + String.valueOf(SalesID));
			sb.append(",ProductID=" + String.valueOf(ProductID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row22Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.SalesID, other.SalesID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_16Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_16_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row22Struct row22 = new row22Struct();

				/**
				 * [tAdvancedHash_row22 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row22", false);
				start_Hash.put("tAdvancedHash_row22", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row22";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row22");
				}

				int tos_count_tAdvancedHash_row22 = 0;

				// connection name:row22
				// source node:tDBInput_16 - inputs:(after_tDBInput_15) outputs:(row22,row22) |
				// target node:tAdvancedHash_row22 - inputs:(row22) outputs:()
				// linked node: tMap_12 - inputs:(row21,row22,row32) outputs:(copyOfSales_out)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row22 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct> tHash_Lookup_row22 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row22Struct>getLookup(matchingModeEnum_row22);

				globalMap.put("tHash_Lookup_row22", tHash_Lookup_row22);

				/**
				 * [tAdvancedHash_row22 begin ] stop
				 */

				/**
				 * [tDBInput_16 begin ] start
				 */

				ok_Hash.put("tDBInput_16", false);
				start_Hash.put("tDBInput_16", System.currentTimeMillis());

				currentComponent = "tDBInput_16";

				int tos_count_tDBInput_16 = 0;

				java.util.Calendar calendar_tDBInput_16 = java.util.Calendar.getInstance();
				calendar_tDBInput_16.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_16 = calendar_tDBInput_16.getTime();
				int nb_line_tDBInput_16 = 0;
				java.sql.Connection conn_tDBInput_16 = null;
				String driverClass_tDBInput_16 = "com.mysql.cj.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_16 = java.lang.Class.forName(driverClass_tDBInput_16);
				String dbUser_tDBInput_16 = "root";

				final String decryptedPassword_tDBInput_16 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:YaNQIg6qh+TqB4eLVk2BUJ9W3naWo/B4+nYI0R6v0cXPauzE");

				String dbPwd_tDBInput_16 = decryptedPassword_tDBInput_16;

				String properties_tDBInput_16 = "noDatetimeStringSync=true&enabledTLSProtocols=TLSv1.2,TLSv1.1,TLSv1";
				if (properties_tDBInput_16 == null || properties_tDBInput_16.trim().length() == 0) {
					properties_tDBInput_16 = "";
				}
				String url_tDBInput_16 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "clothing_storeDB" + "?"
						+ properties_tDBInput_16;

				conn_tDBInput_16 = java.sql.DriverManager.getConnection(url_tDBInput_16, dbUser_tDBInput_16,
						dbPwd_tDBInput_16);

				java.sql.Statement stmt_tDBInput_16 = conn_tDBInput_16.createStatement();

				String dbquery_tDBInput_16 = "SELECT \n  `salesitems`.`ItemID`, \n  `salesitems`.`SalesID`, \n  `salesitems`.`ProductID`\nFROM `salesitems`";

				globalMap.put("tDBInput_16_QUERY", dbquery_tDBInput_16);
				java.sql.ResultSet rs_tDBInput_16 = null;

				try {
					rs_tDBInput_16 = stmt_tDBInput_16.executeQuery(dbquery_tDBInput_16);
					java.sql.ResultSetMetaData rsmd_tDBInput_16 = rs_tDBInput_16.getMetaData();
					int colQtyInRs_tDBInput_16 = rsmd_tDBInput_16.getColumnCount();

					String tmpContent_tDBInput_16 = null;

					while (rs_tDBInput_16.next()) {
						nb_line_tDBInput_16++;

						if (colQtyInRs_tDBInput_16 < 1) {
							row22.ItemID = 0;
						} else {

							row22.ItemID = rs_tDBInput_16.getInt(1);
							if (rs_tDBInput_16.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_16 < 2) {
							row22.SalesID = 0;
						} else {

							row22.SalesID = rs_tDBInput_16.getInt(2);
							if (rs_tDBInput_16.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_16 < 3) {
							row22.ProductID = 0;
						} else {

							row22.ProductID = rs_tDBInput_16.getInt(3);
							if (rs_tDBInput_16.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}

						/**
						 * [tDBInput_16 begin ] stop
						 */

						/**
						 * [tDBInput_16 main ] start
						 */

						currentComponent = "tDBInput_16";

						tos_count_tDBInput_16++;

						/**
						 * [tDBInput_16 main ] stop
						 */

						/**
						 * [tDBInput_16 process_data_begin ] start
						 */

						currentComponent = "tDBInput_16";

						/**
						 * [tDBInput_16 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row22 main ] start
						 */

						currentComponent = "tAdvancedHash_row22";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row22"

							);
						}

						row22Struct row22_HashRow = new row22Struct();

						row22_HashRow.ItemID = row22.ItemID;

						row22_HashRow.SalesID = row22.SalesID;

						row22_HashRow.ProductID = row22.ProductID;

						tHash_Lookup_row22.put(row22_HashRow);

						tos_count_tAdvancedHash_row22++;

						/**
						 * [tAdvancedHash_row22 main ] stop
						 */

						/**
						 * [tAdvancedHash_row22 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row22";

						/**
						 * [tAdvancedHash_row22 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row22 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row22";

						/**
						 * [tAdvancedHash_row22 process_data_end ] stop
						 */

						/**
						 * [tDBInput_16 process_data_end ] start
						 */

						currentComponent = "tDBInput_16";

						/**
						 * [tDBInput_16 process_data_end ] stop
						 */

						/**
						 * [tDBInput_16 end ] start
						 */

						currentComponent = "tDBInput_16";

					}
				} finally {
					if (rs_tDBInput_16 != null) {
						rs_tDBInput_16.close();
					}
					if (stmt_tDBInput_16 != null) {
						stmt_tDBInput_16.close();
					}
					if (conn_tDBInput_16 != null && !conn_tDBInput_16.isClosed()) {

						conn_tDBInput_16.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}

				globalMap.put("tDBInput_16_NB_LINE", nb_line_tDBInput_16);

				ok_Hash.put("tDBInput_16", true);
				end_Hash.put("tDBInput_16", System.currentTimeMillis());

				/**
				 * [tDBInput_16 end ] stop
				 */

				/**
				 * [tAdvancedHash_row22 end ] start
				 */

				currentComponent = "tAdvancedHash_row22";

				tHash_Lookup_row22.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row22");
				}

				ok_Hash.put("tAdvancedHash_row22", true);
				end_Hash.put("tAdvancedHash_row22", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row22 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_16 finally ] start
				 */

				currentComponent = "tDBInput_16";

				/**
				 * [tDBInput_16 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row22 finally ] start
				 */

				currentComponent = "tAdvancedHash_row22";

				/**
				 * [tAdvancedHash_row22 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_16_SUBPROCESS_STATE", 1);
	}

	public static class row32Struct implements routines.system.IPersistableComparableLookupRow<row32Struct> {
		final static byte[] commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];
		static byte[] commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int ProductID;

		public int getProductID() {
			return this.ProductID;
		}

		public String ProductName;

		public String getProductName() {
			return this.ProductName;
		}

		public BigDecimal SellingPrice;

		public BigDecimal getSellingPrice() {
			return this.SellingPrice;
		}

		public BigDecimal Rating;

		public BigDecimal getRating() {
			return this.Rating;
		}

		public Integer Amount_allocated;

		public Integer getAmount_allocated() {
			return this.Amount_allocated;
		}

		public Integer InventoryID;

		public Integer getInventoryID() {
			return this.InventoryID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.ProductID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row32Struct other = (row32Struct) obj;

			if (this.ProductID != other.ProductID)
				return false;

			return true;
		}

		public void copyDataTo(row32Struct other) {

			other.ProductID = this.ProductID;
			other.ProductName = this.ProductName;
			other.SellingPrice = this.SellingPrice;
			other.Rating = this.Rating;
			other.Amount_allocated = this.Amount_allocated;
			other.InventoryID = this.InventoryID;

		}

		public void copyKeysDataTo(row32Struct other) {

			other.ProductID = this.ProductID;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				unmarshaller.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = unmarshaller.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.ProductID = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.ProductID = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ProductID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.ProductID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.ProductName = readString(dis, ois);

				this.SellingPrice = (BigDecimal) ois.readObject();

				this.Rating = (BigDecimal) ois.readObject();

				this.Amount_allocated = readInteger(dis, ois);

				this.InventoryID = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
			try {
				int length = 0;

				this.ProductName = readString(dis, objectIn);

				this.SellingPrice = (BigDecimal) objectIn.readObject();

				this.Rating = (BigDecimal) objectIn.readObject();

				this.Amount_allocated = readInteger(dis, objectIn);

				this.InventoryID = readInteger(dis, objectIn);

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.ProductName, dos, oos);

				oos.writeObject(this.SellingPrice);

				oos.writeObject(this.Rating);

				writeInteger(this.Amount_allocated, dos, oos);

				writeInteger(this.InventoryID, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut) {
			try {

				writeString(this.ProductName, dos, objectOut);

				objectOut.writeObject(this.SellingPrice);

				objectOut.writeObject(this.Rating);

				writeInteger(this.Amount_allocated, dos, objectOut);

				writeInteger(this.InventoryID, dos, objectOut);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}

		public boolean supportMarshaller() {
			return true;
		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ProductID=" + String.valueOf(ProductID));
			sb.append(",ProductName=" + ProductName);
			sb.append(",SellingPrice=" + String.valueOf(SellingPrice));
			sb.append(",Rating=" + String.valueOf(Rating));
			sb.append(",Amount_allocated=" + String.valueOf(Amount_allocated));
			sb.append(",InventoryID=" + String.valueOf(InventoryID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row32Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ProductID, other.ProductID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_17Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_17_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row32Struct row32 = new row32Struct();

				/**
				 * [tAdvancedHash_row32 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row32", false);
				start_Hash.put("tAdvancedHash_row32", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row32";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row32");
				}

				int tos_count_tAdvancedHash_row32 = 0;

				// connection name:row32
				// source node:tDBInput_17 - inputs:(after_tDBInput_15) outputs:(row32,row32) |
				// target node:tAdvancedHash_row32 - inputs:(row32) outputs:()
				// linked node: tMap_12 - inputs:(row21,row22,row32) outputs:(copyOfSales_out)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row32 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row32Struct> tHash_Lookup_row32 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row32Struct>getLookup(matchingModeEnum_row32);

				globalMap.put("tHash_Lookup_row32", tHash_Lookup_row32);

				/**
				 * [tAdvancedHash_row32 begin ] stop
				 */

				/**
				 * [tDBInput_17 begin ] start
				 */

				ok_Hash.put("tDBInput_17", false);
				start_Hash.put("tDBInput_17", System.currentTimeMillis());

				currentComponent = "tDBInput_17";

				int tos_count_tDBInput_17 = 0;

				java.util.Calendar calendar_tDBInput_17 = java.util.Calendar.getInstance();
				calendar_tDBInput_17.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_17 = calendar_tDBInput_17.getTime();
				int nb_line_tDBInput_17 = 0;
				java.sql.Connection conn_tDBInput_17 = null;
				String driverClass_tDBInput_17 = "com.mysql.cj.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_17 = java.lang.Class.forName(driverClass_tDBInput_17);
				String dbUser_tDBInput_17 = "root";

				final String decryptedPassword_tDBInput_17 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:gVgPaCOR/n+i0ek0J+nde8wEAYEeieQscSes3I461GVWyW0C");

				String dbPwd_tDBInput_17 = decryptedPassword_tDBInput_17;

				String properties_tDBInput_17 = "noDatetimeStringSync=true&enabledTLSProtocols=TLSv1.2,TLSv1.1,TLSv1";
				if (properties_tDBInput_17 == null || properties_tDBInput_17.trim().length() == 0) {
					properties_tDBInput_17 = "";
				}
				String url_tDBInput_17 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "clothing_storeDB" + "?"
						+ properties_tDBInput_17;

				conn_tDBInput_17 = java.sql.DriverManager.getConnection(url_tDBInput_17, dbUser_tDBInput_17,
						dbPwd_tDBInput_17);

				java.sql.Statement stmt_tDBInput_17 = conn_tDBInput_17.createStatement();

				String dbquery_tDBInput_17 = "SELECT \n  `product`.`ProductID`, \n  `product`.`ProductName`, \n  `product`.`SellingPrice`, \n  `product`.`Rating`, \n  `pr"
						+ "oduct`.`Amount_allocated`, \n  `product`.`InventoryID`\nFROM `product`";

				globalMap.put("tDBInput_17_QUERY", dbquery_tDBInput_17);
				java.sql.ResultSet rs_tDBInput_17 = null;

				try {
					rs_tDBInput_17 = stmt_tDBInput_17.executeQuery(dbquery_tDBInput_17);
					java.sql.ResultSetMetaData rsmd_tDBInput_17 = rs_tDBInput_17.getMetaData();
					int colQtyInRs_tDBInput_17 = rsmd_tDBInput_17.getColumnCount();

					String tmpContent_tDBInput_17 = null;

					while (rs_tDBInput_17.next()) {
						nb_line_tDBInput_17++;

						if (colQtyInRs_tDBInput_17 < 1) {
							row32.ProductID = 0;
						} else {

							row32.ProductID = rs_tDBInput_17.getInt(1);
							if (rs_tDBInput_17.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_17 < 2) {
							row32.ProductName = null;
						} else {

							row32.ProductName = routines.system.JDBCUtil.getString(rs_tDBInput_17, 2, false);
						}
						if (colQtyInRs_tDBInput_17 < 3) {
							row32.SellingPrice = null;
						} else {

							row32.SellingPrice = rs_tDBInput_17.getBigDecimal(3);
							if (rs_tDBInput_17.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_17 < 4) {
							row32.Rating = null;
						} else {

							row32.Rating = rs_tDBInput_17.getBigDecimal(4);
							if (rs_tDBInput_17.wasNull()) {
								row32.Rating = null;
							}
						}
						if (colQtyInRs_tDBInput_17 < 5) {
							row32.Amount_allocated = null;
						} else {

							row32.Amount_allocated = rs_tDBInput_17.getInt(5);
							if (rs_tDBInput_17.wasNull()) {
								row32.Amount_allocated = null;
							}
						}
						if (colQtyInRs_tDBInput_17 < 6) {
							row32.InventoryID = null;
						} else {

							row32.InventoryID = rs_tDBInput_17.getInt(6);
							if (rs_tDBInput_17.wasNull()) {
								row32.InventoryID = null;
							}
						}

						/**
						 * [tDBInput_17 begin ] stop
						 */

						/**
						 * [tDBInput_17 main ] start
						 */

						currentComponent = "tDBInput_17";

						tos_count_tDBInput_17++;

						/**
						 * [tDBInput_17 main ] stop
						 */

						/**
						 * [tDBInput_17 process_data_begin ] start
						 */

						currentComponent = "tDBInput_17";

						/**
						 * [tDBInput_17 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row32 main ] start
						 */

						currentComponent = "tAdvancedHash_row32";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row32"

							);
						}

						row32Struct row32_HashRow = new row32Struct();

						row32_HashRow.ProductID = row32.ProductID;

						row32_HashRow.ProductName = row32.ProductName;

						row32_HashRow.SellingPrice = row32.SellingPrice;

						row32_HashRow.Rating = row32.Rating;

						row32_HashRow.Amount_allocated = row32.Amount_allocated;

						row32_HashRow.InventoryID = row32.InventoryID;

						tHash_Lookup_row32.put(row32_HashRow);

						tos_count_tAdvancedHash_row32++;

						/**
						 * [tAdvancedHash_row32 main ] stop
						 */

						/**
						 * [tAdvancedHash_row32 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row32";

						/**
						 * [tAdvancedHash_row32 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row32 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row32";

						/**
						 * [tAdvancedHash_row32 process_data_end ] stop
						 */

						/**
						 * [tDBInput_17 process_data_end ] start
						 */

						currentComponent = "tDBInput_17";

						/**
						 * [tDBInput_17 process_data_end ] stop
						 */

						/**
						 * [tDBInput_17 end ] start
						 */

						currentComponent = "tDBInput_17";

					}
				} finally {
					if (rs_tDBInput_17 != null) {
						rs_tDBInput_17.close();
					}
					if (stmt_tDBInput_17 != null) {
						stmt_tDBInput_17.close();
					}
					if (conn_tDBInput_17 != null && !conn_tDBInput_17.isClosed()) {

						conn_tDBInput_17.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}

				globalMap.put("tDBInput_17_NB_LINE", nb_line_tDBInput_17);

				ok_Hash.put("tDBInput_17", true);
				end_Hash.put("tDBInput_17", System.currentTimeMillis());

				/**
				 * [tDBInput_17 end ] stop
				 */

				/**
				 * [tAdvancedHash_row32 end ] start
				 */

				currentComponent = "tAdvancedHash_row32";

				tHash_Lookup_row32.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row32");
				}

				ok_Hash.put("tAdvancedHash_row32", true);
				end_Hash.put("tAdvancedHash_row32", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row32 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_17 finally ] start
				 */

				currentComponent = "tDBInput_17";

				/**
				 * [tDBInput_17 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row32 finally ] start
				 */

				currentComponent = "tAdvancedHash_row32";

				/**
				 * [tAdvancedHash_row32 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_17_SUBPROCESS_STATE", 1);
	}

	public static class row37Struct implements routines.system.IPersistableRow<row37Struct> {
		final static byte[] commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];
		static byte[] commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];

		public Integer CUSTOMERID;

		public Integer getCUSTOMERID() {
			return this.CUSTOMERID;
		}

		public String CUSTOMERNAME;

		public String getCUSTOMERNAME() {
			return this.CUSTOMERNAME;
		}

		public String EMAIL;

		public String getEMAIL() {
			return this.EMAIL;
		}

		public String PHONENO;

		public String getPHONENO() {
			return this.PHONENO;
		}

		public String CUSTOMERADDRESS;

		public String getCUSTOMERADDRESS() {
			return this.CUSTOMERADDRESS;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length) {
					if (length < 1024 && commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length == 0) {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[1024];
					} else {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length);
				strReturn = new String(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length) {
					if (length < 1024 && commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length == 0) {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[1024];
					} else {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length);
				strReturn = new String(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.CUSTOMERID = readInteger(dis);

					this.CUSTOMERNAME = readString(dis);

					this.EMAIL = readString(dis);

					this.PHONENO = readString(dis);

					this.CUSTOMERADDRESS = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.CUSTOMERID = readInteger(dis);

					this.CUSTOMERNAME = readString(dis);

					this.EMAIL = readString(dis);

					this.PHONENO = readString(dis);

					this.CUSTOMERADDRESS = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.CUSTOMERID, dos);

				// String

				writeString(this.CUSTOMERNAME, dos);

				// String

				writeString(this.EMAIL, dos);

				// String

				writeString(this.PHONENO, dos);

				// String

				writeString(this.CUSTOMERADDRESS, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.CUSTOMERID, dos);

				// String

				writeString(this.CUSTOMERNAME, dos);

				// String

				writeString(this.EMAIL, dos);

				// String

				writeString(this.PHONENO, dos);

				// String

				writeString(this.CUSTOMERADDRESS, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CUSTOMERID=" + String.valueOf(CUSTOMERID));
			sb.append(",CUSTOMERNAME=" + CUSTOMERNAME);
			sb.append(",EMAIL=" + EMAIL);
			sb.append(",PHONENO=" + PHONENO);
			sb.append(",CUSTOMERADDRESS=" + CUSTOMERADDRESS);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row37Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfcustomer_outStruct implements routines.system.IPersistableRow<copyOfcustomer_outStruct> {
		final static byte[] commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];
		static byte[] commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];

		public Integer CUSTOMERID;

		public Integer getCUSTOMERID() {
			return this.CUSTOMERID;
		}

		public String CUSTOMERNAME;

		public String getCUSTOMERNAME() {
			return this.CUSTOMERNAME;
		}

		public String EMAIL;

		public String getEMAIL() {
			return this.EMAIL;
		}

		public String PHONENO;

		public String getPHONENO() {
			return this.PHONENO;
		}

		public String CUSTOMERADDRESS;

		public String getCUSTOMERADDRESS() {
			return this.CUSTOMERADDRESS;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length) {
					if (length < 1024 && commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length == 0) {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[1024];
					} else {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length);
				strReturn = new String(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length) {
					if (length < 1024 && commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length == 0) {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[1024];
					} else {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length);
				strReturn = new String(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.CUSTOMERID = readInteger(dis);

					this.CUSTOMERNAME = readString(dis);

					this.EMAIL = readString(dis);

					this.PHONENO = readString(dis);

					this.CUSTOMERADDRESS = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.CUSTOMERID = readInteger(dis);

					this.CUSTOMERNAME = readString(dis);

					this.EMAIL = readString(dis);

					this.PHONENO = readString(dis);

					this.CUSTOMERADDRESS = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.CUSTOMERID, dos);

				// String

				writeString(this.CUSTOMERNAME, dos);

				// String

				writeString(this.EMAIL, dos);

				// String

				writeString(this.PHONENO, dos);

				// String

				writeString(this.CUSTOMERADDRESS, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.CUSTOMERID, dos);

				// String

				writeString(this.CUSTOMERNAME, dos);

				// String

				writeString(this.EMAIL, dos);

				// String

				writeString(this.PHONENO, dos);

				// String

				writeString(this.CUSTOMERADDRESS, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CUSTOMERID=" + String.valueOf(CUSTOMERID));
			sb.append(",CUSTOMERNAME=" + CUSTOMERNAME);
			sb.append(",EMAIL=" + EMAIL);
			sb.append(",PHONENO=" + PHONENO);
			sb.append(",CUSTOMERADDRESS=" + CUSTOMERADDRESS);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfcustomer_outStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row36Struct implements routines.system.IPersistableRow<row36Struct> {
		final static byte[] commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];
		static byte[] commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];

		public int CustomerID;

		public int getCustomerID() {
			return this.CustomerID;
		}

		public String FirstName;

		public String getFirstName() {
			return this.FirstName;
		}

		public String LastName;

		public String getLastName() {
			return this.LastName;
		}

		public String Email;

		public String getEmail() {
			return this.Email;
		}

		public String ContactNo;

		public String getContactNo() {
			return this.ContactNo;
		}

		public String Address;

		public String getAddress() {
			return this.Address;
		}

		public String City;

		public String getCity() {
			return this.City;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length) {
					if (length < 1024 && commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length == 0) {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[1024];
					} else {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length);
				strReturn = new String(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length) {
					if (length < 1024 && commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length == 0) {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[1024];
					} else {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length);
				strReturn = new String(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.CustomerID = dis.readInt();

					this.FirstName = readString(dis);

					this.LastName = readString(dis);

					this.Email = readString(dis);

					this.ContactNo = readString(dis);

					this.Address = readString(dis);

					this.City = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.CustomerID = dis.readInt();

					this.FirstName = readString(dis);

					this.LastName = readString(dis);

					this.Email = readString(dis);

					this.ContactNo = readString(dis);

					this.Address = readString(dis);

					this.City = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.CustomerID);

				// String

				writeString(this.FirstName, dos);

				// String

				writeString(this.LastName, dos);

				// String

				writeString(this.Email, dos);

				// String

				writeString(this.ContactNo, dos);

				// String

				writeString(this.Address, dos);

				// String

				writeString(this.City, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.CustomerID);

				// String

				writeString(this.FirstName, dos);

				// String

				writeString(this.LastName, dos);

				// String

				writeString(this.Email, dos);

				// String

				writeString(this.ContactNo, dos);

				// String

				writeString(this.Address, dos);

				// String

				writeString(this.City, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CustomerID=" + String.valueOf(CustomerID));
			sb.append(",FirstName=" + FirstName);
			sb.append(",LastName=" + LastName);
			sb.append(",Email=" + Email);
			sb.append(",ContactNo=" + ContactNo);
			sb.append(",Address=" + Address);
			sb.append(",City=" + City);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row36Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row35Struct implements routines.system.IPersistableRow<row35Struct> {
		final static byte[] commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];
		static byte[] commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int CustomerID;

		public int getCustomerID() {
			return this.CustomerID;
		}

		public String FirstName;

		public String getFirstName() {
			return this.FirstName;
		}

		public String LastName;

		public String getLastName() {
			return this.LastName;
		}

		public String Email;

		public String getEmail() {
			return this.Email;
		}

		public String ContactNo;

		public String getContactNo() {
			return this.ContactNo;
		}

		public String Address;

		public String getAddress() {
			return this.Address;
		}

		public String City;

		public String getCity() {
			return this.City;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.CustomerID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row35Struct other = (row35Struct) obj;

			if (this.CustomerID != other.CustomerID)
				return false;

			return true;
		}

		public void copyDataTo(row35Struct other) {

			other.CustomerID = this.CustomerID;
			other.FirstName = this.FirstName;
			other.LastName = this.LastName;
			other.Email = this.Email;
			other.ContactNo = this.ContactNo;
			other.Address = this.Address;
			other.City = this.City;

		}

		public void copyKeysDataTo(row35Struct other) {

			other.CustomerID = this.CustomerID;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length) {
					if (length < 1024 && commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length == 0) {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[1024];
					} else {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length);
				strReturn = new String(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length) {
					if (length < 1024 && commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length == 0) {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[1024];
					} else {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length);
				strReturn = new String(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.CustomerID = dis.readInt();

					this.FirstName = readString(dis);

					this.LastName = readString(dis);

					this.Email = readString(dis);

					this.ContactNo = readString(dis);

					this.Address = readString(dis);

					this.City = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.CustomerID = dis.readInt();

					this.FirstName = readString(dis);

					this.LastName = readString(dis);

					this.Email = readString(dis);

					this.ContactNo = readString(dis);

					this.Address = readString(dis);

					this.City = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.CustomerID);

				// String

				writeString(this.FirstName, dos);

				// String

				writeString(this.LastName, dos);

				// String

				writeString(this.Email, dos);

				// String

				writeString(this.ContactNo, dos);

				// String

				writeString(this.Address, dos);

				// String

				writeString(this.City, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.CustomerID);

				// String

				writeString(this.FirstName, dos);

				// String

				writeString(this.LastName, dos);

				// String

				writeString(this.Email, dos);

				// String

				writeString(this.ContactNo, dos);

				// String

				writeString(this.Address, dos);

				// String

				writeString(this.City, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CustomerID=" + String.valueOf(CustomerID));
			sb.append(",FirstName=" + FirstName);
			sb.append(",LastName=" + LastName);
			sb.append(",Email=" + Email);
			sb.append(",ContactNo=" + ContactNo);
			sb.append(",Address=" + Address);
			sb.append(",City=" + City);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row35Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CustomerID, other.CustomerID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_18Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_18_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row35Struct row35 = new row35Struct();
				row36Struct row36 = new row36Struct();
				copyOfcustomer_outStruct copyOfcustomer_out = new copyOfcustomer_outStruct();
				row37Struct row37 = new row37Struct();

				/**
				 * [tDBOutput_14 begin ] start
				 */

				ok_Hash.put("tDBOutput_14", false);
				start_Hash.put("tDBOutput_14", System.currentTimeMillis());

				currentComponent = "tDBOutput_14";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row37");
				}

				int tos_count_tDBOutput_14 = 0;

				int nb_line_tDBOutput_14 = 0;
				int nb_line_update_tDBOutput_14 = 0;
				int nb_line_inserted_tDBOutput_14 = 0;
				int nb_line_deleted_tDBOutput_14 = 0;
				int nb_line_rejected_tDBOutput_14 = 0;

				int tmp_batchUpdateCount_tDBOutput_14 = 0;

				int deletedCount_tDBOutput_14 = 0;
				int updatedCount_tDBOutput_14 = 0;
				int insertedCount_tDBOutput_14 = 0;
				int rowsToCommitCount_tDBOutput_14 = 0;
				int rejectedCount_tDBOutput_14 = 0;

				boolean whetherReject_tDBOutput_14 = false;

				java.sql.Connection conn_tDBOutput_14 = null;

				// optional table
				String dbschema_tDBOutput_14 = null;
				String tableName_tDBOutput_14 = null;
				String driverClass_tDBOutput_14 = "oracle.jdbc.OracleDriver";

				java.lang.Class.forName(driverClass_tDBOutput_14);
				String url_tDBOutput_14 = null;
				url_tDBOutput_14 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + "localhost"
						+ ")(port=" + "1521" + "))(connect_data=(service_name=" + "XEPDB1" + ")))";
				String dbUser_tDBOutput_14 = "system";

				final String decryptedPassword_tDBOutput_14 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:RJhdiIotIl4VsstSBggLRdOQM40c/oa+0K4qa6HFKqEABp7tYPs=");

				String dbPwd_tDBOutput_14 = decryptedPassword_tDBOutput_14;
				dbschema_tDBOutput_14 = "";

				conn_tDBOutput_14 = java.sql.DriverManager.getConnection(url_tDBOutput_14, dbUser_tDBOutput_14,
						dbPwd_tDBOutput_14);
				resourceMap.put("conn_tDBOutput_14", conn_tDBOutput_14);
				conn_tDBOutput_14.setAutoCommit(false);
				int commitEvery_tDBOutput_14 = 10000;
				int commitCounter_tDBOutput_14 = 0;
				int batchSize_tDBOutput_14 = 10000;
				int batchSizeCounter_tDBOutput_14 = 0;
				int count_tDBOutput_14 = 0;

				if (dbschema_tDBOutput_14 == null || dbschema_tDBOutput_14.trim().length() == 0) {
					tableName_tDBOutput_14 = ("DIM_CUSTOMER");
				} else {
					tableName_tDBOutput_14 = dbschema_tDBOutput_14 + "." + ("DIM_CUSTOMER");
				}
				String insert_tDBOutput_14 = "INSERT INTO " + tableName_tDBOutput_14
						+ " (CUSTOMERID,CUSTOMERNAME,EMAIL,PHONENO,CUSTOMERADDRESS) VALUES (?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_14 = conn_tDBOutput_14.prepareStatement(insert_tDBOutput_14);
				resourceMap.put("pstmt_tDBOutput_14", pstmt_tDBOutput_14);

				/**
				 * [tDBOutput_14 begin ] stop
				 */

				/**
				 * [tUniqRow_6 begin ] start
				 */

				ok_Hash.put("tUniqRow_6", false);
				start_Hash.put("tUniqRow_6", System.currentTimeMillis());

				currentComponent = "tUniqRow_6";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfcustomer_out");
				}

				int tos_count_tUniqRow_6 = 0;

				int nb_uniques_tUniqRow_6 = 0;
				int nb_duplicates_tUniqRow_6 = 0;

				/**
				 * [tUniqRow_6 begin ] stop
				 */

				/**
				 * [tMap_13 begin ] start
				 */

				ok_Hash.put("tMap_13", false);
				start_Hash.put("tMap_13", System.currentTimeMillis());

				currentComponent = "tMap_13";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row36");
				}

				int tos_count_tMap_13 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_13__Struct {
					String CustomerName;
				}
				Var__tMap_13__Struct Var__tMap_13 = new Var__tMap_13__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfcustomer_outStruct copyOfcustomer_out_tmp = new copyOfcustomer_outStruct();
// ###############################

				/**
				 * [tMap_13 begin ] stop
				 */

				/**
				 * [tFilterRow_3 begin ] start
				 */

				ok_Hash.put("tFilterRow_3", false);
				start_Hash.put("tFilterRow_3", System.currentTimeMillis());

				currentComponent = "tFilterRow_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row35");
				}

				int tos_count_tFilterRow_3 = 0;

				int nb_line_tFilterRow_3 = 0;
				int nb_line_ok_tFilterRow_3 = 0;
				int nb_line_reject_tFilterRow_3 = 0;

				class Operator_tFilterRow_3 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_3(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_3 begin ] stop
				 */

				/**
				 * [tDBInput_18 begin ] start
				 */

				ok_Hash.put("tDBInput_18", false);
				start_Hash.put("tDBInput_18", System.currentTimeMillis());

				currentComponent = "tDBInput_18";

				int tos_count_tDBInput_18 = 0;

				java.util.Calendar calendar_tDBInput_18 = java.util.Calendar.getInstance();
				calendar_tDBInput_18.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_18 = calendar_tDBInput_18.getTime();
				int nb_line_tDBInput_18 = 0;
				java.sql.Connection conn_tDBInput_18 = null;
				String driverClass_tDBInput_18 = "com.mysql.cj.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_18 = java.lang.Class.forName(driverClass_tDBInput_18);
				String dbUser_tDBInput_18 = "root";

				final String decryptedPassword_tDBInput_18 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:zbi0fCQrou9XsjCFMcurBKLZwsYXVNQiEut4wJtJwciA//O1");

				String dbPwd_tDBInput_18 = decryptedPassword_tDBInput_18;

				String properties_tDBInput_18 = "noDatetimeStringSync=true&enabledTLSProtocols=TLSv1.2,TLSv1.1,TLSv1";
				if (properties_tDBInput_18 == null || properties_tDBInput_18.trim().length() == 0) {
					properties_tDBInput_18 = "";
				}
				String url_tDBInput_18 = "jdbc:mysql://" + "localhost" + ":" + "3306" + "/" + "clothing_storeDB" + "?"
						+ properties_tDBInput_18;

				conn_tDBInput_18 = java.sql.DriverManager.getConnection(url_tDBInput_18, dbUser_tDBInput_18,
						dbPwd_tDBInput_18);

				java.sql.Statement stmt_tDBInput_18 = conn_tDBInput_18.createStatement();

				String dbquery_tDBInput_18 = "SELECT \n  `customer`.`CustomerID`, \n  `customer`.`FirstName`, \n  `customer`.`LastName`, \n  `customer`.`Email`, \n  `cust"
						+ "omer`.`ContactNo`, \n  `customer`.`Address`, \n  `customer`.`City`\nFROM `customer`";

				globalMap.put("tDBInput_18_QUERY", dbquery_tDBInput_18);
				java.sql.ResultSet rs_tDBInput_18 = null;

				try {
					rs_tDBInput_18 = stmt_tDBInput_18.executeQuery(dbquery_tDBInput_18);
					java.sql.ResultSetMetaData rsmd_tDBInput_18 = rs_tDBInput_18.getMetaData();
					int colQtyInRs_tDBInput_18 = rsmd_tDBInput_18.getColumnCount();

					String tmpContent_tDBInput_18 = null;

					while (rs_tDBInput_18.next()) {
						nb_line_tDBInput_18++;

						if (colQtyInRs_tDBInput_18 < 1) {
							row35.CustomerID = 0;
						} else {

							row35.CustomerID = rs_tDBInput_18.getInt(1);
							if (rs_tDBInput_18.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_18 < 2) {
							row35.FirstName = null;
						} else {

							row35.FirstName = routines.system.JDBCUtil.getString(rs_tDBInput_18, 2, false);
						}
						if (colQtyInRs_tDBInput_18 < 3) {
							row35.LastName = null;
						} else {

							row35.LastName = routines.system.JDBCUtil.getString(rs_tDBInput_18, 3, false);
						}
						if (colQtyInRs_tDBInput_18 < 4) {
							row35.Email = null;
						} else {

							row35.Email = routines.system.JDBCUtil.getString(rs_tDBInput_18, 4, false);
						}
						if (colQtyInRs_tDBInput_18 < 5) {
							row35.ContactNo = null;
						} else {

							row35.ContactNo = routines.system.JDBCUtil.getString(rs_tDBInput_18, 5, false);
						}
						if (colQtyInRs_tDBInput_18 < 6) {
							row35.Address = null;
						} else {

							row35.Address = routines.system.JDBCUtil.getString(rs_tDBInput_18, 6, false);
						}
						if (colQtyInRs_tDBInput_18 < 7) {
							row35.City = null;
						} else {

							row35.City = routines.system.JDBCUtil.getString(rs_tDBInput_18, 7, false);
						}

						/**
						 * [tDBInput_18 begin ] stop
						 */

						/**
						 * [tDBInput_18 main ] start
						 */

						currentComponent = "tDBInput_18";

						tos_count_tDBInput_18++;

						/**
						 * [tDBInput_18 main ] stop
						 */

						/**
						 * [tDBInput_18 process_data_begin ] start
						 */

						currentComponent = "tDBInput_18";

						/**
						 * [tDBInput_18 process_data_begin ] stop
						 */

						/**
						 * [tFilterRow_3 main ] start
						 */

						currentComponent = "tFilterRow_3";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row35"

							);
						}

						row36 = null;
						Operator_tFilterRow_3 ope_tFilterRow_3 = new Operator_tFilterRow_3("&&");
						ope_tFilterRow_3.matches((row35.CustomerID > 0), "CustomerID>0 failed");
						ope_tFilterRow_3.matches(
								(row35.FirstName == null ? false : row35.FirstName.compareTo(" ") != 0),
								"FirstName.compareTo(\" \") != 0 failed");
						ope_tFilterRow_3.matches((row35.LastName == null ? false : row35.LastName.compareTo(" ") != 0),
								"LastName.compareTo(\" \") != 0 failed");
						ope_tFilterRow_3.matches((row35.Email == null ? false : row35.Email.compareTo(" ") != 0),
								"Email.compareTo(\" \") != 0 failed");
						ope_tFilterRow_3.matches(
								(row35.ContactNo == null ? false : row35.ContactNo.compareTo(" ") != 0),
								"ContactNo.compareTo(\" \") != 0 failed");
						ope_tFilterRow_3.matches((row35.Address == null ? false : row35.Address.compareTo(" ") != 0),
								"Address.compareTo(\" \") != 0 failed");

						if (ope_tFilterRow_3.getMatchFlag()) {
							if (row36 == null) {
								row36 = new row36Struct();
							}
							row36.CustomerID = row35.CustomerID;
							row36.FirstName = row35.FirstName;
							row36.LastName = row35.LastName;
							row36.Email = row35.Email;
							row36.ContactNo = row35.ContactNo;
							row36.Address = row35.Address;
							row36.City = row35.City;
							nb_line_ok_tFilterRow_3++;
						} else {
							nb_line_reject_tFilterRow_3++;
						}

						nb_line_tFilterRow_3++;

						tos_count_tFilterRow_3++;

						/**
						 * [tFilterRow_3 main ] stop
						 */

						/**
						 * [tFilterRow_3 process_data_begin ] start
						 */

						currentComponent = "tFilterRow_3";

						/**
						 * [tFilterRow_3 process_data_begin ] stop
						 */
// Start of branch "row36"
						if (row36 != null) {

							/**
							 * [tMap_13 main ] start
							 */

							currentComponent = "tMap_13";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row36"

								);
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_13 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_13 = false;
							boolean mainRowRejected_tMap_13 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_13__Struct Var = Var__tMap_13;
								Var.CustomerName = row36.FirstName.trim() + " " + row36.LastName.trim();// ###############################
								// ###############################
								// # Output tables

								copyOfcustomer_out = null;

// # Output table : 'copyOfcustomer_out'
								copyOfcustomer_out_tmp.CUSTOMERID = row36.CustomerID;
								copyOfcustomer_out_tmp.CUSTOMERNAME = Var.CustomerName;
								copyOfcustomer_out_tmp.EMAIL = row36.Email;
								copyOfcustomer_out_tmp.PHONENO = row36.ContactNo;
								copyOfcustomer_out_tmp.CUSTOMERADDRESS = row36.Address;
								copyOfcustomer_out = copyOfcustomer_out_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_13 = false;

							tos_count_tMap_13++;

							/**
							 * [tMap_13 main ] stop
							 */

							/**
							 * [tMap_13 process_data_begin ] start
							 */

							currentComponent = "tMap_13";

							/**
							 * [tMap_13 process_data_begin ] stop
							 */
// Start of branch "copyOfcustomer_out"
							if (copyOfcustomer_out != null) {

								/**
								 * [tUniqRow_6 main ] start
								 */

								currentComponent = "tUniqRow_6";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "copyOfcustomer_out"

									);
								}

								row37.CUSTOMERID = copyOfcustomer_out.CUSTOMERID;
								row37.CUSTOMERNAME = copyOfcustomer_out.CUSTOMERNAME;
								row37.EMAIL = copyOfcustomer_out.EMAIL;
								row37.PHONENO = copyOfcustomer_out.PHONENO;
								row37.CUSTOMERADDRESS = copyOfcustomer_out.CUSTOMERADDRESS;

								tos_count_tUniqRow_6++;

								/**
								 * [tUniqRow_6 main ] stop
								 */

								/**
								 * [tUniqRow_6 process_data_begin ] start
								 */

								currentComponent = "tUniqRow_6";

								/**
								 * [tUniqRow_6 process_data_begin ] stop
								 */
// Start of branch "row37"
								if (row37 != null) {

									/**
									 * [tDBOutput_14 main ] start
									 */

									currentComponent = "tDBOutput_14";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "row37"

										);
									}

									whetherReject_tDBOutput_14 = false;
									if (row37.CUSTOMERID == null) {
										pstmt_tDBOutput_14.setNull(1, java.sql.Types.INTEGER);
									} else {
										pstmt_tDBOutput_14.setInt(1, row37.CUSTOMERID);
									}

									if (row37.CUSTOMERNAME == null) {
										pstmt_tDBOutput_14.setNull(2, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_14.setString(2, row37.CUSTOMERNAME);
									}

									if (row37.EMAIL == null) {
										pstmt_tDBOutput_14.setNull(3, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_14.setString(3, row37.EMAIL);
									}

									if (row37.PHONENO == null) {
										pstmt_tDBOutput_14.setNull(4, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_14.setString(4, row37.PHONENO);
									}

									if (row37.CUSTOMERADDRESS == null) {
										pstmt_tDBOutput_14.setNull(5, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_14.setString(5, row37.CUSTOMERADDRESS);
									}

									pstmt_tDBOutput_14.addBatch();
									nb_line_tDBOutput_14++;
									batchSizeCounter_tDBOutput_14++;
									if (batchSize_tDBOutput_14 > 0
											&& batchSize_tDBOutput_14 <= batchSizeCounter_tDBOutput_14) {
										try {
											pstmt_tDBOutput_14.executeBatch();
										} catch (java.sql.BatchUpdateException e_tDBOutput_14) {
											globalMap.put("tDBOutput_14_ERROR_MESSAGE", e_tDBOutput_14.getMessage());
											java.sql.SQLException ne_tDBOutput_14 = e_tDBOutput_14.getNextException(),
													sqle_tDBOutput_14 = null;
											String errormessage_tDBOutput_14;
											if (ne_tDBOutput_14 != null) {
												// build new exception to provide the original cause
												sqle_tDBOutput_14 = new java.sql.SQLException(
														e_tDBOutput_14.getMessage() + "\ncaused by: "
																+ ne_tDBOutput_14.getMessage(),
														ne_tDBOutput_14.getSQLState(), ne_tDBOutput_14.getErrorCode(),
														ne_tDBOutput_14);
												errormessage_tDBOutput_14 = sqle_tDBOutput_14.getMessage();
											} else {
												errormessage_tDBOutput_14 = e_tDBOutput_14.getMessage();
											}

											System.err.println(errormessage_tDBOutput_14);

										}
										tmp_batchUpdateCount_tDBOutput_14 = pstmt_tDBOutput_14.getUpdateCount();
										insertedCount_tDBOutput_14 += (tmp_batchUpdateCount_tDBOutput_14 != -1
												? tmp_batchUpdateCount_tDBOutput_14
												: 0);
										rowsToCommitCount_tDBOutput_14 += (tmp_batchUpdateCount_tDBOutput_14 != -1
												? tmp_batchUpdateCount_tDBOutput_14
												: 0);
										batchSizeCounter_tDBOutput_14 = 0;
									}
									commitCounter_tDBOutput_14++;
									if (commitEvery_tDBOutput_14 <= commitCounter_tDBOutput_14) {
										if (batchSizeCounter_tDBOutput_14 > 0) {
											try {
												pstmt_tDBOutput_14.executeBatch();
											} catch (java.sql.BatchUpdateException e_tDBOutput_14) {
												globalMap.put("tDBOutput_14_ERROR_MESSAGE",
														e_tDBOutput_14.getMessage());
												java.sql.SQLException ne_tDBOutput_14 = e_tDBOutput_14
														.getNextException(), sqle_tDBOutput_14 = null;
												String errormessage_tDBOutput_14;
												if (ne_tDBOutput_14 != null) {
													// build new exception to provide the original cause
													sqle_tDBOutput_14 = new java.sql.SQLException(
															e_tDBOutput_14.getMessage() + "\ncaused by: "
																	+ ne_tDBOutput_14.getMessage(),
															ne_tDBOutput_14.getSQLState(),
															ne_tDBOutput_14.getErrorCode(), ne_tDBOutput_14);
													errormessage_tDBOutput_14 = sqle_tDBOutput_14.getMessage();
												} else {
													errormessage_tDBOutput_14 = e_tDBOutput_14.getMessage();
												}

												System.err.println(errormessage_tDBOutput_14);

											}
											tmp_batchUpdateCount_tDBOutput_14 = pstmt_tDBOutput_14.getUpdateCount();
											insertedCount_tDBOutput_14 += (tmp_batchUpdateCount_tDBOutput_14 != -1
													? tmp_batchUpdateCount_tDBOutput_14
													: 0);
											rowsToCommitCount_tDBOutput_14 += (tmp_batchUpdateCount_tDBOutput_14 != -1
													? tmp_batchUpdateCount_tDBOutput_14
													: 0);
										}
										if (rowsToCommitCount_tDBOutput_14 != 0) {

										}
										conn_tDBOutput_14.commit();
										if (rowsToCommitCount_tDBOutput_14 != 0) {

											rowsToCommitCount_tDBOutput_14 = 0;
										}
										commitCounter_tDBOutput_14 = 0;
										batchSizeCounter_tDBOutput_14 = 0;
									}

									tos_count_tDBOutput_14++;

									/**
									 * [tDBOutput_14 main ] stop
									 */

									/**
									 * [tDBOutput_14 process_data_begin ] start
									 */

									currentComponent = "tDBOutput_14";

									/**
									 * [tDBOutput_14 process_data_begin ] stop
									 */

									/**
									 * [tDBOutput_14 process_data_end ] start
									 */

									currentComponent = "tDBOutput_14";

									/**
									 * [tDBOutput_14 process_data_end ] stop
									 */

								} // End of branch "row37"

								/**
								 * [tUniqRow_6 process_data_end ] start
								 */

								currentComponent = "tUniqRow_6";

								/**
								 * [tUniqRow_6 process_data_end ] stop
								 */

							} // End of branch "copyOfcustomer_out"

							/**
							 * [tMap_13 process_data_end ] start
							 */

							currentComponent = "tMap_13";

							/**
							 * [tMap_13 process_data_end ] stop
							 */

						} // End of branch "row36"

						/**
						 * [tFilterRow_3 process_data_end ] start
						 */

						currentComponent = "tFilterRow_3";

						/**
						 * [tFilterRow_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_18 process_data_end ] start
						 */

						currentComponent = "tDBInput_18";

						/**
						 * [tDBInput_18 process_data_end ] stop
						 */

						/**
						 * [tDBInput_18 end ] start
						 */

						currentComponent = "tDBInput_18";

					}
				} finally {
					if (rs_tDBInput_18 != null) {
						rs_tDBInput_18.close();
					}
					if (stmt_tDBInput_18 != null) {
						stmt_tDBInput_18.close();
					}
					if (conn_tDBInput_18 != null && !conn_tDBInput_18.isClosed()) {

						conn_tDBInput_18.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}

				globalMap.put("tDBInput_18_NB_LINE", nb_line_tDBInput_18);

				ok_Hash.put("tDBInput_18", true);
				end_Hash.put("tDBInput_18", System.currentTimeMillis());

				/**
				 * [tDBInput_18 end ] stop
				 */

				/**
				 * [tFilterRow_3 end ] start
				 */

				currentComponent = "tFilterRow_3";

				globalMap.put("tFilterRow_3_NB_LINE", nb_line_tFilterRow_3);
				globalMap.put("tFilterRow_3_NB_LINE_OK", nb_line_ok_tFilterRow_3);
				globalMap.put("tFilterRow_3_NB_LINE_REJECT", nb_line_reject_tFilterRow_3);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row35");
				}

				ok_Hash.put("tFilterRow_3", true);
				end_Hash.put("tFilterRow_3", System.currentTimeMillis());

				/**
				 * [tFilterRow_3 end ] stop
				 */

				/**
				 * [tMap_13 end ] start
				 */

				currentComponent = "tMap_13";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row36");
				}

				ok_Hash.put("tMap_13", true);
				end_Hash.put("tMap_13", System.currentTimeMillis());

				/**
				 * [tMap_13 end ] stop
				 */

				/**
				 * [tUniqRow_6 end ] start
				 */

				currentComponent = "tUniqRow_6";

				globalMap.put("tUniqRow_6_NB_UNIQUES", nb_uniques_tUniqRow_6);
				globalMap.put("tUniqRow_6_NB_DUPLICATES", nb_duplicates_tUniqRow_6);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfcustomer_out");
				}

				ok_Hash.put("tUniqRow_6", true);
				end_Hash.put("tUniqRow_6", System.currentTimeMillis());

				/**
				 * [tUniqRow_6 end ] stop
				 */

				/**
				 * [tDBOutput_14 end ] start
				 */

				currentComponent = "tDBOutput_14";

				if (batchSizeCounter_tDBOutput_14 > 0) {
					try {
						if (pstmt_tDBOutput_14 != null) {

							pstmt_tDBOutput_14.executeBatch();

						}
					} catch (java.sql.BatchUpdateException e_tDBOutput_14) {
						globalMap.put("tDBOutput_14_ERROR_MESSAGE", e_tDBOutput_14.getMessage());
						java.sql.SQLException ne_tDBOutput_14 = e_tDBOutput_14.getNextException(),
								sqle_tDBOutput_14 = null;
						String errormessage_tDBOutput_14;
						if (ne_tDBOutput_14 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_14 = new java.sql.SQLException(
									e_tDBOutput_14.getMessage() + "\ncaused by: " + ne_tDBOutput_14.getMessage(),
									ne_tDBOutput_14.getSQLState(), ne_tDBOutput_14.getErrorCode(), ne_tDBOutput_14);
							errormessage_tDBOutput_14 = sqle_tDBOutput_14.getMessage();
						} else {
							errormessage_tDBOutput_14 = e_tDBOutput_14.getMessage();
						}

						System.err.println(errormessage_tDBOutput_14);

					}
					if (pstmt_tDBOutput_14 != null) {
						tmp_batchUpdateCount_tDBOutput_14 = pstmt_tDBOutput_14.getUpdateCount();

						insertedCount_tDBOutput_14

								+= (tmp_batchUpdateCount_tDBOutput_14 != -1 ? tmp_batchUpdateCount_tDBOutput_14 : 0);
						rowsToCommitCount_tDBOutput_14 += (tmp_batchUpdateCount_tDBOutput_14 != -1
								? tmp_batchUpdateCount_tDBOutput_14
								: 0);
					}
				}
				if (pstmt_tDBOutput_14 != null) {

					pstmt_tDBOutput_14.close();
					resourceMap.remove("pstmt_tDBOutput_14");

				}
				resourceMap.put("statementClosed_tDBOutput_14", true);
				if (commitCounter_tDBOutput_14 > 0 && rowsToCommitCount_tDBOutput_14 != 0) {

				}
				conn_tDBOutput_14.commit();
				if (commitCounter_tDBOutput_14 > 0 && rowsToCommitCount_tDBOutput_14 != 0) {

					rowsToCommitCount_tDBOutput_14 = 0;
				}
				commitCounter_tDBOutput_14 = 0;

				conn_tDBOutput_14.close();

				resourceMap.put("finish_tDBOutput_14", true);

				nb_line_deleted_tDBOutput_14 = nb_line_deleted_tDBOutput_14 + deletedCount_tDBOutput_14;
				nb_line_update_tDBOutput_14 = nb_line_update_tDBOutput_14 + updatedCount_tDBOutput_14;
				nb_line_inserted_tDBOutput_14 = nb_line_inserted_tDBOutput_14 + insertedCount_tDBOutput_14;
				nb_line_rejected_tDBOutput_14 = nb_line_rejected_tDBOutput_14 + rejectedCount_tDBOutput_14;

				globalMap.put("tDBOutput_14_NB_LINE", nb_line_tDBOutput_14);
				globalMap.put("tDBOutput_14_NB_LINE_UPDATED", nb_line_update_tDBOutput_14);
				globalMap.put("tDBOutput_14_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_14);
				globalMap.put("tDBOutput_14_NB_LINE_DELETED", nb_line_deleted_tDBOutput_14);
				globalMap.put("tDBOutput_14_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_14);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row37");
				}

				ok_Hash.put("tDBOutput_14", true);
				end_Hash.put("tDBOutput_14", System.currentTimeMillis());

				/**
				 * [tDBOutput_14 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_18 finally ] start
				 */

				currentComponent = "tDBInput_18";

				/**
				 * [tDBInput_18 finally ] stop
				 */

				/**
				 * [tFilterRow_3 finally ] start
				 */

				currentComponent = "tFilterRow_3";

				/**
				 * [tFilterRow_3 finally ] stop
				 */

				/**
				 * [tMap_13 finally ] start
				 */

				currentComponent = "tMap_13";

				/**
				 * [tMap_13 finally ] stop
				 */

				/**
				 * [tUniqRow_6 finally ] start
				 */

				currentComponent = "tUniqRow_6";

				/**
				 * [tUniqRow_6 finally ] stop
				 */

				/**
				 * [tDBOutput_14 finally ] start
				 */

				currentComponent = "tDBOutput_14";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_14") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_14 = null;
						if ((pstmtToClose_tDBOutput_14 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_14")) != null) {
							pstmtToClose_tDBOutput_14.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_14") == null) {
						java.sql.Connection ctn_tDBOutput_14 = null;
						if ((ctn_tDBOutput_14 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_14")) != null) {
							try {
								ctn_tDBOutput_14.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_14) {
								String errorMessage_tDBOutput_14 = "failed to close the connection in tDBOutput_14 :"
										+ sqlEx_tDBOutput_14.getMessage();
								System.err.println(errorMessage_tDBOutput_14);
							}
						}
					}
				}

				/**
				 * [tDBOutput_14 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_18_SUBPROCESS_STATE", 1);
	}

	public static class row17Struct implements routines.system.IPersistableRow<row17Struct> {
		final static byte[] commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];
		static byte[] commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];

		public Integer SUPPLIERID;

		public Integer getSUPPLIERID() {
			return this.SUPPLIERID;
		}

		public String NAME;

		public String getNAME() {
			return this.NAME;
		}

		public String REGION;

		public String getREGION() {
			return this.REGION;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length) {
					if (length < 1024 && commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length == 0) {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[1024];
					} else {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length);
				strReturn = new String(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length) {
					if (length < 1024 && commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length == 0) {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[1024];
					} else {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length);
				strReturn = new String(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.SUPPLIERID = readInteger(dis);

					this.NAME = readString(dis);

					this.REGION = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.SUPPLIERID = readInteger(dis);

					this.NAME = readString(dis);

					this.REGION = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.SUPPLIERID, dos);

				// String

				writeString(this.NAME, dos);

				// String

				writeString(this.REGION, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.SUPPLIERID, dos);

				// String

				writeString(this.NAME, dos);

				// String

				writeString(this.REGION, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SUPPLIERID=" + String.valueOf(SUPPLIERID));
			sb.append(",NAME=" + NAME);
			sb.append(",REGION=" + REGION);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row17Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class supplier_outStruct implements routines.system.IPersistableRow<supplier_outStruct> {
		final static byte[] commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];
		static byte[] commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];

		public Integer SUPPLIERID;

		public Integer getSUPPLIERID() {
			return this.SUPPLIERID;
		}

		public String NAME;

		public String getNAME() {
			return this.NAME;
		}

		public String REGION;

		public String getREGION() {
			return this.REGION;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length) {
					if (length < 1024 && commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length == 0) {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[1024];
					} else {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length);
				strReturn = new String(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length) {
					if (length < 1024 && commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length == 0) {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[1024];
					} else {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length);
				strReturn = new String(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.SUPPLIERID = readInteger(dis);

					this.NAME = readString(dis);

					this.REGION = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.SUPPLIERID = readInteger(dis);

					this.NAME = readString(dis);

					this.REGION = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.SUPPLIERID, dos);

				// String

				writeString(this.NAME, dos);

				// String

				writeString(this.REGION, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.SUPPLIERID, dos);

				// String

				writeString(this.NAME, dos);

				// String

				writeString(this.REGION, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SUPPLIERID=" + String.valueOf(SUPPLIERID));
			sb.append(",NAME=" + NAME);
			sb.append(",REGION=" + REGION);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(supplier_outStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];
		static byte[] commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];

		public Integer Id;

		public Integer getId() {
			return this.Id;
		}

		public String Supplier_Name;

		public String getSupplier_Name() {
			return this.Supplier_Name;
		}

		public String Region;

		public String getRegion() {
			return this.Region;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length) {
					if (length < 1024 && commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length == 0) {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[1024];
					} else {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length);
				strReturn = new String(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length) {
					if (length < 1024 && commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length == 0) {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[1024];
					} else {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length);
				strReturn = new String(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.Id = readInteger(dis);

					this.Supplier_Name = readString(dis);

					this.Region = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.Id = readInteger(dis);

					this.Supplier_Name = readString(dis);

					this.Region = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Id, dos);

				// String

				writeString(this.Supplier_Name, dos);

				// String

				writeString(this.Region, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.Id, dos);

				// String

				writeString(this.Supplier_Name, dos);

				// String

				writeString(this.Region, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Id=" + String.valueOf(Id));
			sb.append(",Supplier_Name=" + Supplier_Name);
			sb.append(",Region=" + Region);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputExcel_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row12Struct row12 = new row12Struct();
				supplier_outStruct supplier_out = new supplier_outStruct();
				row17Struct row17 = new row17Struct();

				/**
				 * [tDBOutput_6 begin ] start
				 */

				ok_Hash.put("tDBOutput_6", false);
				start_Hash.put("tDBOutput_6", System.currentTimeMillis());

				currentComponent = "tDBOutput_6";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row17");
				}

				int tos_count_tDBOutput_6 = 0;

				int nb_line_tDBOutput_6 = 0;
				int nb_line_update_tDBOutput_6 = 0;
				int nb_line_inserted_tDBOutput_6 = 0;
				int nb_line_deleted_tDBOutput_6 = 0;
				int nb_line_rejected_tDBOutput_6 = 0;

				int tmp_batchUpdateCount_tDBOutput_6 = 0;

				int deletedCount_tDBOutput_6 = 0;
				int updatedCount_tDBOutput_6 = 0;
				int insertedCount_tDBOutput_6 = 0;
				int rowsToCommitCount_tDBOutput_6 = 0;
				int rejectedCount_tDBOutput_6 = 0;

				boolean whetherReject_tDBOutput_6 = false;

				java.sql.Connection conn_tDBOutput_6 = null;

				// optional table
				String dbschema_tDBOutput_6 = null;
				String tableName_tDBOutput_6 = null;
				String driverClass_tDBOutput_6 = "oracle.jdbc.OracleDriver";

				java.lang.Class.forName(driverClass_tDBOutput_6);
				String url_tDBOutput_6 = null;
				url_tDBOutput_6 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + "localhost"
						+ ")(port=" + "1521" + "))(connect_data=(service_name=" + "XEPDB1" + ")))";
				String dbUser_tDBOutput_6 = "system";

				final String decryptedPassword_tDBOutput_6 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:+F9hpyUtu/BucJHfrbKcq7q9FPj7363OrFP97kXKPJ4zSkqjBQU=");

				String dbPwd_tDBOutput_6 = decryptedPassword_tDBOutput_6;
				dbschema_tDBOutput_6 = "";

				conn_tDBOutput_6 = java.sql.DriverManager.getConnection(url_tDBOutput_6, dbUser_tDBOutput_6,
						dbPwd_tDBOutput_6);
				resourceMap.put("conn_tDBOutput_6", conn_tDBOutput_6);
				conn_tDBOutput_6.setAutoCommit(false);
				int commitEvery_tDBOutput_6 = 10000;
				int commitCounter_tDBOutput_6 = 0;
				int batchSize_tDBOutput_6 = 10000;
				int batchSizeCounter_tDBOutput_6 = 0;
				int count_tDBOutput_6 = 0;

				if (dbschema_tDBOutput_6 == null || dbschema_tDBOutput_6.trim().length() == 0) {
					tableName_tDBOutput_6 = ("DIM_SUPPLIER");
				} else {
					tableName_tDBOutput_6 = dbschema_tDBOutput_6 + "." + ("DIM_SUPPLIER");
				}
				String insert_tDBOutput_6 = "INSERT INTO " + tableName_tDBOutput_6
						+ " (SUPPLIERID,NAME,REGION) VALUES (?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_6 = conn_tDBOutput_6.prepareStatement(insert_tDBOutput_6);
				resourceMap.put("pstmt_tDBOutput_6", pstmt_tDBOutput_6);

				/**
				 * [tDBOutput_6 begin ] stop
				 */

				/**
				 * [tUniqRow_3 begin ] start
				 */

				ok_Hash.put("tUniqRow_3", false);
				start_Hash.put("tUniqRow_3", System.currentTimeMillis());

				currentComponent = "tUniqRow_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "supplier_out");
				}

				int tos_count_tUniqRow_3 = 0;

				int nb_uniques_tUniqRow_3 = 0;
				int nb_duplicates_tUniqRow_3 = 0;

				/**
				 * [tUniqRow_3 begin ] stop
				 */

				/**
				 * [tMap_6 begin ] start
				 */

				ok_Hash.put("tMap_6", false);
				start_Hash.put("tMap_6", System.currentTimeMillis());

				currentComponent = "tMap_6";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row12");
				}

				int tos_count_tMap_6 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_6__Struct {
				}
				Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
				supplier_outStruct supplier_out_tmp = new supplier_outStruct();
// ###############################

				/**
				 * [tMap_6 begin ] stop
				 */

				/**
				 * [tFileInputExcel_1 begin ] start
				 */

				ok_Hash.put("tFileInputExcel_1", false);
				start_Hash.put("tFileInputExcel_1", System.currentTimeMillis());

				currentComponent = "tFileInputExcel_1";

				int tos_count_tFileInputExcel_1 = 0;

				final String decryptedPassword_tFileInputExcel_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:HHHzl+VaGuwqEw0fR0YHWEhUFdTaAs70QRn6sg==");
				String password_tFileInputExcel_1 = decryptedPassword_tFileInputExcel_1;
				if (password_tFileInputExcel_1.isEmpty()) {
					password_tFileInputExcel_1 = null;
				}
				class RegexUtil_tFileInputExcel_1 {

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, String oneSheetName,
							boolean useRegex) {

						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

						if (useRegex) {// this part process the regex issue

							java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
							for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
								String sheetName = sheet.getSheetName();
								java.util.regex.Matcher matcher = pattern.matcher(sheetName);
								if (matcher.matches()) {
									if (sheet != null) {
										list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
									}
								}
							}

						} else {
							org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook
									.getSheet(oneSheetName);
							if (sheet != null) {
								list.add(sheet);
							}

						}

						return list;
					}

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, int index, boolean useRegex) {
						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
						org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook
								.getSheetAt(index);
						if (sheet != null) {
							list.add(sheet);
						}
						return list;
					}

				}
				RegexUtil_tFileInputExcel_1 regexUtil_tFileInputExcel_1 = new RegexUtil_tFileInputExcel_1();

				Object source_tFileInputExcel_1 = "D:/NIBM/Degree/HND/DWBI/courseWk/SachithaConfirm/sachitha_query/1751684201066x589448737489594200_20250706204420_supplier_data_with_region.xlsx";
				org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_1 = null;

				if (source_tFileInputExcel_1 instanceof String) {
					workbook_tFileInputExcel_1 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory
							.create(new java.io.File((String) source_tFileInputExcel_1), password_tFileInputExcel_1,
									true);
				} else if (source_tFileInputExcel_1 instanceof java.io.InputStream) {
					workbook_tFileInputExcel_1 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory
							.create((java.io.InputStream) source_tFileInputExcel_1, password_tFileInputExcel_1);
				} else {
					workbook_tFileInputExcel_1 = null;
					throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
				}
				try {

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_1 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					for (org.apache.poi.ss.usermodel.Sheet sheet_tFileInputExcel_1 : workbook_tFileInputExcel_1) {
						sheetList_tFileInputExcel_1
								.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet_tFileInputExcel_1);
					}
					if (sheetList_tFileInputExcel_1.size() <= 0) {
						throw new RuntimeException("Special sheets not exist!");
					}

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_1 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_1 : sheetList_tFileInputExcel_1) {
						if (sheet_FilterNull_tFileInputExcel_1 != null
								&& sheetList_FilterNull_tFileInputExcel_1.iterator() != null
								&& sheet_FilterNull_tFileInputExcel_1.iterator().hasNext()) {
							sheetList_FilterNull_tFileInputExcel_1.add(sheet_FilterNull_tFileInputExcel_1);
						}
					}
					sheetList_tFileInputExcel_1 = sheetList_FilterNull_tFileInputExcel_1;
					if (sheetList_tFileInputExcel_1.size() > 0) {
						int nb_line_tFileInputExcel_1 = 0;

						int begin_line_tFileInputExcel_1 = 1;

						int footer_input_tFileInputExcel_1 = 0;

						int end_line_tFileInputExcel_1 = 0;
						for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_1 : sheetList_tFileInputExcel_1) {
							end_line_tFileInputExcel_1 += (sheet_tFileInputExcel_1.getLastRowNum() + 1);
						}
						end_line_tFileInputExcel_1 -= footer_input_tFileInputExcel_1;
						int limit_tFileInputExcel_1 = -1;
						int start_column_tFileInputExcel_1 = 1 - 1;
						int end_column_tFileInputExcel_1 = -1;

						org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_1 = null;
						org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1
								.get(0);
						int rowCount_tFileInputExcel_1 = 0;
						int sheetIndex_tFileInputExcel_1 = 0;
						int currentRows_tFileInputExcel_1 = (sheetList_tFileInputExcel_1.get(0).getLastRowNum() + 1);

						// for the number format
						java.text.DecimalFormat df_tFileInputExcel_1 = new java.text.DecimalFormat(
								"#.####################################");
						char decimalChar_tFileInputExcel_1 = df_tFileInputExcel_1.getDecimalFormatSymbols()
								.getDecimalSeparator();

						for (int i_tFileInputExcel_1 = begin_line_tFileInputExcel_1; i_tFileInputExcel_1 < end_line_tFileInputExcel_1; i_tFileInputExcel_1++) {

							int emptyColumnCount_tFileInputExcel_1 = 0;

							if (limit_tFileInputExcel_1 != -1 && nb_line_tFileInputExcel_1 >= limit_tFileInputExcel_1) {
								break;
							}

							while (i_tFileInputExcel_1 >= rowCount_tFileInputExcel_1 + currentRows_tFileInputExcel_1) {
								rowCount_tFileInputExcel_1 += currentRows_tFileInputExcel_1;
								sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1
										.get(++sheetIndex_tFileInputExcel_1);
								currentRows_tFileInputExcel_1 = (sheet_tFileInputExcel_1.getLastRowNum() + 1);
							}
							globalMap.put("tFileInputExcel_1_CURRENT_SHEET", sheet_tFileInputExcel_1.getSheetName());
							if (rowCount_tFileInputExcel_1 <= i_tFileInputExcel_1) {
								row_tFileInputExcel_1 = sheet_tFileInputExcel_1
										.getRow(i_tFileInputExcel_1 - rowCount_tFileInputExcel_1);
							}
							row12 = null;
							int tempRowLength_tFileInputExcel_1 = 3;

							int columnIndex_tFileInputExcel_1 = 0;

							String[] temp_row_tFileInputExcel_1 = new String[tempRowLength_tFileInputExcel_1];
							int excel_end_column_tFileInputExcel_1;
							if (row_tFileInputExcel_1 == null) {
								excel_end_column_tFileInputExcel_1 = 0;
							} else {
								excel_end_column_tFileInputExcel_1 = row_tFileInputExcel_1.getLastCellNum();
							}
							int actual_end_column_tFileInputExcel_1;
							if (end_column_tFileInputExcel_1 == -1) {
								actual_end_column_tFileInputExcel_1 = excel_end_column_tFileInputExcel_1;
							} else {
								actual_end_column_tFileInputExcel_1 = end_column_tFileInputExcel_1 > excel_end_column_tFileInputExcel_1
										? excel_end_column_tFileInputExcel_1
										: end_column_tFileInputExcel_1;
							}
							org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_1 = null;
							for (int i = 0; i < tempRowLength_tFileInputExcel_1; i++) {
								if (i + start_column_tFileInputExcel_1 < actual_end_column_tFileInputExcel_1) {
									org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_1 = row_tFileInputExcel_1
											.getCell(i + start_column_tFileInputExcel_1);
									if (cell_tFileInputExcel_1 != null) {
										switch (cell_tFileInputExcel_1.getCellType()) {
										case STRING:
											temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1
													.getRichStringCellValue().getString();
											break;
										case NUMERIC:
											if (org.apache.poi.ss.usermodel.DateUtil
													.isCellDateFormatted(cell_tFileInputExcel_1)) {
												temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1
														.getDateCellValue().toString();
											} else {
												temp_row_tFileInputExcel_1[i] = df_tFileInputExcel_1
														.format(cell_tFileInputExcel_1.getNumericCellValue());
											}
											break;
										case BOOLEAN:
											temp_row_tFileInputExcel_1[i] = String
													.valueOf(cell_tFileInputExcel_1.getBooleanCellValue());
											break;
										case FORMULA:
											switch (cell_tFileInputExcel_1.getCachedFormulaResultType()) {
											case STRING:
												temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1
														.getRichStringCellValue().getString();
												break;
											case NUMERIC:
												if (org.apache.poi.ss.usermodel.DateUtil
														.isCellDateFormatted(cell_tFileInputExcel_1)) {
													temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1
															.getDateCellValue().toString();
												} else {
													ne_tFileInputExcel_1 = new org.apache.poi.ss.formula.eval.NumberEval(
															cell_tFileInputExcel_1.getNumericCellValue());
													temp_row_tFileInputExcel_1[i] = ne_tFileInputExcel_1
															.getStringValue();
												}
												break;
											case BOOLEAN:
												temp_row_tFileInputExcel_1[i] = String
														.valueOf(cell_tFileInputExcel_1.getBooleanCellValue());
												break;
											default:
												temp_row_tFileInputExcel_1[i] = "";
											}
											break;
										default:
											temp_row_tFileInputExcel_1[i] = "";
										}
									} else {
										temp_row_tFileInputExcel_1[i] = "";
									}

								} else {
									temp_row_tFileInputExcel_1[i] = "";
								}
							}
							boolean whetherReject_tFileInputExcel_1 = false;
							row12 = new row12Struct();
							int curColNum_tFileInputExcel_1 = -1;
							String curColName_tFileInputExcel_1 = "";
							try {
								columnIndex_tFileInputExcel_1 = 0;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Id";

									row12.Id = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null,
											'.' == decimalChar_tFileInputExcel_1 ? null
													: decimalChar_tFileInputExcel_1));
								} else {
									row12.Id = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 1;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Supplier_Name";

									row12.Supplier_Name = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									row12.Supplier_Name = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 2;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Region";

									row12.Region = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									row12.Region = null;
									emptyColumnCount_tFileInputExcel_1++;
								}

								nb_line_tFileInputExcel_1++;

							} catch (java.lang.Exception e) {
								globalMap.put("tFileInputExcel_1_ERROR_MESSAGE", e.getMessage());
								whetherReject_tFileInputExcel_1 = true;
								System.err.println(e.getMessage());
								row12 = null;
							}

							/**
							 * [tFileInputExcel_1 begin ] stop
							 */

							/**
							 * [tFileInputExcel_1 main ] start
							 */

							currentComponent = "tFileInputExcel_1";

							tos_count_tFileInputExcel_1++;

							/**
							 * [tFileInputExcel_1 main ] stop
							 */

							/**
							 * [tFileInputExcel_1 process_data_begin ] start
							 */

							currentComponent = "tFileInputExcel_1";

							/**
							 * [tFileInputExcel_1 process_data_begin ] stop
							 */
// Start of branch "row12"
							if (row12 != null) {

								/**
								 * [tMap_6 main ] start
								 */

								currentComponent = "tMap_6";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row12"

									);
								}

								boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_6 = false;
								boolean mainRowRejected_tMap_6 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
									// ###############################
									// # Output tables

									supplier_out = null;

// # Output table : 'supplier_out'
									supplier_out_tmp.SUPPLIERID = row12.Id;
									supplier_out_tmp.NAME = row12.Supplier_Name;
									supplier_out_tmp.REGION = row12.Region;
									supplier_out = supplier_out_tmp;
// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_6 = false;

								tos_count_tMap_6++;

								/**
								 * [tMap_6 main ] stop
								 */

								/**
								 * [tMap_6 process_data_begin ] start
								 */

								currentComponent = "tMap_6";

								/**
								 * [tMap_6 process_data_begin ] stop
								 */
// Start of branch "supplier_out"
								if (supplier_out != null) {

									/**
									 * [tUniqRow_3 main ] start
									 */

									currentComponent = "tUniqRow_3";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "supplier_out"

										);
									}

									row17.SUPPLIERID = supplier_out.SUPPLIERID;
									row17.NAME = supplier_out.NAME;
									row17.REGION = supplier_out.REGION;

									tos_count_tUniqRow_3++;

									/**
									 * [tUniqRow_3 main ] stop
									 */

									/**
									 * [tUniqRow_3 process_data_begin ] start
									 */

									currentComponent = "tUniqRow_3";

									/**
									 * [tUniqRow_3 process_data_begin ] stop
									 */
// Start of branch "row17"
									if (row17 != null) {

										/**
										 * [tDBOutput_6 main ] start
										 */

										currentComponent = "tDBOutput_6";

										if (execStat) {
											runStat.updateStatOnConnection(iterateId, 1, 1

													, "row17"

											);
										}

										whetherReject_tDBOutput_6 = false;
										if (row17.SUPPLIERID == null) {
											pstmt_tDBOutput_6.setNull(1, java.sql.Types.INTEGER);
										} else {
											pstmt_tDBOutput_6.setInt(1, row17.SUPPLIERID);
										}

										if (row17.NAME == null) {
											pstmt_tDBOutput_6.setNull(2, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_6.setString(2, row17.NAME);
										}

										if (row17.REGION == null) {
											pstmt_tDBOutput_6.setNull(3, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_6.setString(3, row17.REGION);
										}

										pstmt_tDBOutput_6.addBatch();
										nb_line_tDBOutput_6++;
										batchSizeCounter_tDBOutput_6++;
										if (batchSize_tDBOutput_6 > 0
												&& batchSize_tDBOutput_6 <= batchSizeCounter_tDBOutput_6) {
											try {
												pstmt_tDBOutput_6.executeBatch();
											} catch (java.sql.BatchUpdateException e_tDBOutput_6) {
												globalMap.put("tDBOutput_6_ERROR_MESSAGE", e_tDBOutput_6.getMessage());
												java.sql.SQLException ne_tDBOutput_6 = e_tDBOutput_6.getNextException(),
														sqle_tDBOutput_6 = null;
												String errormessage_tDBOutput_6;
												if (ne_tDBOutput_6 != null) {
													// build new exception to provide the original cause
													sqle_tDBOutput_6 = new java.sql.SQLException(
															e_tDBOutput_6.getMessage() + "\ncaused by: "
																	+ ne_tDBOutput_6.getMessage(),
															ne_tDBOutput_6.getSQLState(), ne_tDBOutput_6.getErrorCode(),
															ne_tDBOutput_6);
													errormessage_tDBOutput_6 = sqle_tDBOutput_6.getMessage();
												} else {
													errormessage_tDBOutput_6 = e_tDBOutput_6.getMessage();
												}

												System.err.println(errormessage_tDBOutput_6);

											}
											tmp_batchUpdateCount_tDBOutput_6 = pstmt_tDBOutput_6.getUpdateCount();
											insertedCount_tDBOutput_6 += (tmp_batchUpdateCount_tDBOutput_6 != -1
													? tmp_batchUpdateCount_tDBOutput_6
													: 0);
											rowsToCommitCount_tDBOutput_6 += (tmp_batchUpdateCount_tDBOutput_6 != -1
													? tmp_batchUpdateCount_tDBOutput_6
													: 0);
											batchSizeCounter_tDBOutput_6 = 0;
										}
										commitCounter_tDBOutput_6++;
										if (commitEvery_tDBOutput_6 <= commitCounter_tDBOutput_6) {
											if (batchSizeCounter_tDBOutput_6 > 0) {
												try {
													pstmt_tDBOutput_6.executeBatch();
												} catch (java.sql.BatchUpdateException e_tDBOutput_6) {
													globalMap.put("tDBOutput_6_ERROR_MESSAGE",
															e_tDBOutput_6.getMessage());
													java.sql.SQLException ne_tDBOutput_6 = e_tDBOutput_6
															.getNextException(), sqle_tDBOutput_6 = null;
													String errormessage_tDBOutput_6;
													if (ne_tDBOutput_6 != null) {
														// build new exception to provide the original cause
														sqle_tDBOutput_6 = new java.sql.SQLException(
																e_tDBOutput_6.getMessage() + "\ncaused by: "
																		+ ne_tDBOutput_6.getMessage(),
																ne_tDBOutput_6.getSQLState(),
																ne_tDBOutput_6.getErrorCode(), ne_tDBOutput_6);
														errormessage_tDBOutput_6 = sqle_tDBOutput_6.getMessage();
													} else {
														errormessage_tDBOutput_6 = e_tDBOutput_6.getMessage();
													}

													System.err.println(errormessage_tDBOutput_6);

												}
												tmp_batchUpdateCount_tDBOutput_6 = pstmt_tDBOutput_6.getUpdateCount();
												insertedCount_tDBOutput_6 += (tmp_batchUpdateCount_tDBOutput_6 != -1
														? tmp_batchUpdateCount_tDBOutput_6
														: 0);
												rowsToCommitCount_tDBOutput_6 += (tmp_batchUpdateCount_tDBOutput_6 != -1
														? tmp_batchUpdateCount_tDBOutput_6
														: 0);
											}
											if (rowsToCommitCount_tDBOutput_6 != 0) {

											}
											conn_tDBOutput_6.commit();
											if (rowsToCommitCount_tDBOutput_6 != 0) {

												rowsToCommitCount_tDBOutput_6 = 0;
											}
											commitCounter_tDBOutput_6 = 0;
											batchSizeCounter_tDBOutput_6 = 0;
										}

										tos_count_tDBOutput_6++;

										/**
										 * [tDBOutput_6 main ] stop
										 */

										/**
										 * [tDBOutput_6 process_data_begin ] start
										 */

										currentComponent = "tDBOutput_6";

										/**
										 * [tDBOutput_6 process_data_begin ] stop
										 */

										/**
										 * [tDBOutput_6 process_data_end ] start
										 */

										currentComponent = "tDBOutput_6";

										/**
										 * [tDBOutput_6 process_data_end ] stop
										 */

									} // End of branch "row17"

									/**
									 * [tUniqRow_3 process_data_end ] start
									 */

									currentComponent = "tUniqRow_3";

									/**
									 * [tUniqRow_3 process_data_end ] stop
									 */

								} // End of branch "supplier_out"

								/**
								 * [tMap_6 process_data_end ] start
								 */

								currentComponent = "tMap_6";

								/**
								 * [tMap_6 process_data_end ] stop
								 */

							} // End of branch "row12"

							/**
							 * [tFileInputExcel_1 process_data_end ] start
							 */

							currentComponent = "tFileInputExcel_1";

							/**
							 * [tFileInputExcel_1 process_data_end ] stop
							 */

							/**
							 * [tFileInputExcel_1 end ] start
							 */

							currentComponent = "tFileInputExcel_1";

						}

						globalMap.put("tFileInputExcel_1_NB_LINE", nb_line_tFileInputExcel_1);

					}

				} finally {

					if (!(source_tFileInputExcel_1 instanceof java.io.InputStream)) {
						workbook_tFileInputExcel_1.getPackage().revert();
					}

				}

				ok_Hash.put("tFileInputExcel_1", true);
				end_Hash.put("tFileInputExcel_1", System.currentTimeMillis());

				/**
				 * [tFileInputExcel_1 end ] stop
				 */

				/**
				 * [tMap_6 end ] start
				 */

				currentComponent = "tMap_6";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row12");
				}

				ok_Hash.put("tMap_6", true);
				end_Hash.put("tMap_6", System.currentTimeMillis());

				/**
				 * [tMap_6 end ] stop
				 */

				/**
				 * [tUniqRow_3 end ] start
				 */

				currentComponent = "tUniqRow_3";

				globalMap.put("tUniqRow_3_NB_UNIQUES", nb_uniques_tUniqRow_3);
				globalMap.put("tUniqRow_3_NB_DUPLICATES", nb_duplicates_tUniqRow_3);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "supplier_out");
				}

				ok_Hash.put("tUniqRow_3", true);
				end_Hash.put("tUniqRow_3", System.currentTimeMillis());

				/**
				 * [tUniqRow_3 end ] stop
				 */

				/**
				 * [tDBOutput_6 end ] start
				 */

				currentComponent = "tDBOutput_6";

				if (batchSizeCounter_tDBOutput_6 > 0) {
					try {
						if (pstmt_tDBOutput_6 != null) {

							pstmt_tDBOutput_6.executeBatch();

						}
					} catch (java.sql.BatchUpdateException e_tDBOutput_6) {
						globalMap.put("tDBOutput_6_ERROR_MESSAGE", e_tDBOutput_6.getMessage());
						java.sql.SQLException ne_tDBOutput_6 = e_tDBOutput_6.getNextException(),
								sqle_tDBOutput_6 = null;
						String errormessage_tDBOutput_6;
						if (ne_tDBOutput_6 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_6 = new java.sql.SQLException(
									e_tDBOutput_6.getMessage() + "\ncaused by: " + ne_tDBOutput_6.getMessage(),
									ne_tDBOutput_6.getSQLState(), ne_tDBOutput_6.getErrorCode(), ne_tDBOutput_6);
							errormessage_tDBOutput_6 = sqle_tDBOutput_6.getMessage();
						} else {
							errormessage_tDBOutput_6 = e_tDBOutput_6.getMessage();
						}

						System.err.println(errormessage_tDBOutput_6);

					}
					if (pstmt_tDBOutput_6 != null) {
						tmp_batchUpdateCount_tDBOutput_6 = pstmt_tDBOutput_6.getUpdateCount();

						insertedCount_tDBOutput_6

								+= (tmp_batchUpdateCount_tDBOutput_6 != -1 ? tmp_batchUpdateCount_tDBOutput_6 : 0);
						rowsToCommitCount_tDBOutput_6 += (tmp_batchUpdateCount_tDBOutput_6 != -1
								? tmp_batchUpdateCount_tDBOutput_6
								: 0);
					}
				}
				if (pstmt_tDBOutput_6 != null) {

					pstmt_tDBOutput_6.close();
					resourceMap.remove("pstmt_tDBOutput_6");

				}
				resourceMap.put("statementClosed_tDBOutput_6", true);
				if (commitCounter_tDBOutput_6 > 0 && rowsToCommitCount_tDBOutput_6 != 0) {

				}
				conn_tDBOutput_6.commit();
				if (commitCounter_tDBOutput_6 > 0 && rowsToCommitCount_tDBOutput_6 != 0) {

					rowsToCommitCount_tDBOutput_6 = 0;
				}
				commitCounter_tDBOutput_6 = 0;

				conn_tDBOutput_6.close();

				resourceMap.put("finish_tDBOutput_6", true);

				nb_line_deleted_tDBOutput_6 = nb_line_deleted_tDBOutput_6 + deletedCount_tDBOutput_6;
				nb_line_update_tDBOutput_6 = nb_line_update_tDBOutput_6 + updatedCount_tDBOutput_6;
				nb_line_inserted_tDBOutput_6 = nb_line_inserted_tDBOutput_6 + insertedCount_tDBOutput_6;
				nb_line_rejected_tDBOutput_6 = nb_line_rejected_tDBOutput_6 + rejectedCount_tDBOutput_6;

				globalMap.put("tDBOutput_6_NB_LINE", nb_line_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_UPDATED", nb_line_update_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_DELETED", nb_line_deleted_tDBOutput_6);
				globalMap.put("tDBOutput_6_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_6);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row17");
				}

				ok_Hash.put("tDBOutput_6", true);
				end_Hash.put("tDBOutput_6", System.currentTimeMillis());

				/**
				 * [tDBOutput_6 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputExcel_1 finally ] start
				 */

				currentComponent = "tFileInputExcel_1";

				/**
				 * [tFileInputExcel_1 finally ] stop
				 */

				/**
				 * [tMap_6 finally ] start
				 */

				currentComponent = "tMap_6";

				/**
				 * [tMap_6 finally ] stop
				 */

				/**
				 * [tUniqRow_3 finally ] start
				 */

				currentComponent = "tUniqRow_3";

				/**
				 * [tUniqRow_3 finally ] stop
				 */

				/**
				 * [tDBOutput_6 finally ] start
				 */

				currentComponent = "tDBOutput_6";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_6") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_6 = null;
						if ((pstmtToClose_tDBOutput_6 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_6")) != null) {
							pstmtToClose_tDBOutput_6.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_6") == null) {
						java.sql.Connection ctn_tDBOutput_6 = null;
						if ((ctn_tDBOutput_6 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_6")) != null) {
							try {
								ctn_tDBOutput_6.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_6) {
								String errorMessage_tDBOutput_6 = "failed to close the connection in tDBOutput_6 :"
										+ sqlEx_tDBOutput_6.getMessage();
								System.err.println(errorMessage_tDBOutput_6);
							}
						}
					}
				}

				/**
				 * [tDBOutput_6 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 1);
	}

	public static class row20Struct implements routines.system.IPersistableRow<row20Struct> {
		final static byte[] commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];
		static byte[] commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];

		public Integer SUPPLIERTYPEID;

		public Integer getSUPPLIERTYPEID() {
			return this.SUPPLIERTYPEID;
		}

		public String NAME;

		public String getNAME() {
			return this.NAME;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length) {
					if (length < 1024 && commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length == 0) {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[1024];
					} else {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length);
				strReturn = new String(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length) {
					if (length < 1024 && commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length == 0) {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[1024];
					} else {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length);
				strReturn = new String(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.SUPPLIERTYPEID = readInteger(dis);

					this.NAME = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.SUPPLIERTYPEID = readInteger(dis);

					this.NAME = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.SUPPLIERTYPEID, dos);

				// String

				writeString(this.NAME, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.SUPPLIERTYPEID, dos);

				// String

				writeString(this.NAME, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SUPPLIERTYPEID=" + String.valueOf(SUPPLIERTYPEID));
			sb.append(",NAME=" + NAME);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row20Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class suppliertype_outStruct implements routines.system.IPersistableRow<suppliertype_outStruct> {
		final static byte[] commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];
		static byte[] commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];

		public Integer SUPPLIERTYPEID;

		public Integer getSUPPLIERTYPEID() {
			return this.SUPPLIERTYPEID;
		}

		public String NAME;

		public String getNAME() {
			return this.NAME;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length) {
					if (length < 1024 && commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length == 0) {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[1024];
					} else {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length);
				strReturn = new String(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length) {
					if (length < 1024 && commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length == 0) {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[1024];
					} else {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length);
				strReturn = new String(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.SUPPLIERTYPEID = readInteger(dis);

					this.NAME = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.SUPPLIERTYPEID = readInteger(dis);

					this.NAME = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.SUPPLIERTYPEID, dos);

				// String

				writeString(this.NAME, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.SUPPLIERTYPEID, dos);

				// String

				writeString(this.NAME, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SUPPLIERTYPEID=" + String.valueOf(SUPPLIERTYPEID));
			sb.append(",NAME=" + NAME);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(suppliertype_outStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row19Struct implements routines.system.IPersistableRow<row19Struct> {
		final static byte[] commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];
		static byte[] commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];

		public Integer SupplierTypeID;

		public Integer getSupplierTypeID() {
			return this.SupplierTypeID;
		}

		public String Name;

		public String getName() {
			return this.Name;
		}

		public String Description;

		public String getDescription() {
			return this.Description;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length) {
					if (length < 1024 && commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length == 0) {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[1024];
					} else {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length);
				strReturn = new String(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length) {
					if (length < 1024 && commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length == 0) {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[1024];
					} else {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length);
				strReturn = new String(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.SupplierTypeID = readInteger(dis);

					this.Name = readString(dis);

					this.Description = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.SupplierTypeID = readInteger(dis);

					this.Name = readString(dis);

					this.Description = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.SupplierTypeID, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Description, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.SupplierTypeID, dos);

				// String

				writeString(this.Name, dos);

				// String

				writeString(this.Description, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("SupplierTypeID=" + String.valueOf(SupplierTypeID));
			sb.append(",Name=" + Name);
			sb.append(",Description=" + Description);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row19Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputExcel_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputExcel_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row19Struct row19 = new row19Struct();
				suppliertype_outStruct suppliertype_out = new suppliertype_outStruct();
				row20Struct row20 = new row20Struct();

				/**
				 * [tDBOutput_9 begin ] start
				 */

				ok_Hash.put("tDBOutput_9", false);
				start_Hash.put("tDBOutput_9", System.currentTimeMillis());

				currentComponent = "tDBOutput_9";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row20");
				}

				int tos_count_tDBOutput_9 = 0;

				int nb_line_tDBOutput_9 = 0;
				int nb_line_update_tDBOutput_9 = 0;
				int nb_line_inserted_tDBOutput_9 = 0;
				int nb_line_deleted_tDBOutput_9 = 0;
				int nb_line_rejected_tDBOutput_9 = 0;

				int tmp_batchUpdateCount_tDBOutput_9 = 0;

				int deletedCount_tDBOutput_9 = 0;
				int updatedCount_tDBOutput_9 = 0;
				int insertedCount_tDBOutput_9 = 0;
				int rowsToCommitCount_tDBOutput_9 = 0;
				int rejectedCount_tDBOutput_9 = 0;

				boolean whetherReject_tDBOutput_9 = false;

				java.sql.Connection conn_tDBOutput_9 = null;

				// optional table
				String dbschema_tDBOutput_9 = null;
				String tableName_tDBOutput_9 = null;
				String driverClass_tDBOutput_9 = "oracle.jdbc.OracleDriver";

				java.lang.Class.forName(driverClass_tDBOutput_9);
				String url_tDBOutput_9 = null;
				url_tDBOutput_9 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + "localhost"
						+ ")(port=" + "1521" + "))(connect_data=(service_name=" + "XEPDB1" + ")))";
				String dbUser_tDBOutput_9 = "system";

				final String decryptedPassword_tDBOutput_9 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:wJ1voDlKzibixo/sFBiXa4YMcutIb9VAMJiJyuAlIhzzVlkjSBA=");

				String dbPwd_tDBOutput_9 = decryptedPassword_tDBOutput_9;
				dbschema_tDBOutput_9 = "";

				conn_tDBOutput_9 = java.sql.DriverManager.getConnection(url_tDBOutput_9, dbUser_tDBOutput_9,
						dbPwd_tDBOutput_9);
				resourceMap.put("conn_tDBOutput_9", conn_tDBOutput_9);
				conn_tDBOutput_9.setAutoCommit(false);
				int commitEvery_tDBOutput_9 = 10000;
				int commitCounter_tDBOutput_9 = 0;
				int batchSize_tDBOutput_9 = 10000;
				int batchSizeCounter_tDBOutput_9 = 0;
				int count_tDBOutput_9 = 0;

				if (dbschema_tDBOutput_9 == null || dbschema_tDBOutput_9.trim().length() == 0) {
					tableName_tDBOutput_9 = ("DIM_SUPPLIERTYPE");
				} else {
					tableName_tDBOutput_9 = dbschema_tDBOutput_9 + "." + ("DIM_SUPPLIERTYPE");
				}
				String insert_tDBOutput_9 = "INSERT INTO " + tableName_tDBOutput_9
						+ " (SUPPLIERTYPEID,NAME) VALUES (?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_9 = conn_tDBOutput_9.prepareStatement(insert_tDBOutput_9);
				resourceMap.put("pstmt_tDBOutput_9", pstmt_tDBOutput_9);

				/**
				 * [tDBOutput_9 begin ] stop
				 */

				/**
				 * [tUniqRow_5 begin ] start
				 */

				ok_Hash.put("tUniqRow_5", false);
				start_Hash.put("tUniqRow_5", System.currentTimeMillis());

				currentComponent = "tUniqRow_5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "suppliertype_out");
				}

				int tos_count_tUniqRow_5 = 0;

				int nb_uniques_tUniqRow_5 = 0;
				int nb_duplicates_tUniqRow_5 = 0;

				/**
				 * [tUniqRow_5 begin ] stop
				 */

				/**
				 * [tMap_9 begin ] start
				 */

				ok_Hash.put("tMap_9", false);
				start_Hash.put("tMap_9", System.currentTimeMillis());

				currentComponent = "tMap_9";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row19");
				}

				int tos_count_tMap_9 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_9__Struct {
				}
				Var__tMap_9__Struct Var__tMap_9 = new Var__tMap_9__Struct();
// ###############################

// ###############################
// # Outputs initialization
				suppliertype_outStruct suppliertype_out_tmp = new suppliertype_outStruct();
// ###############################

				/**
				 * [tMap_9 begin ] stop
				 */

				/**
				 * [tFileInputExcel_2 begin ] start
				 */

				ok_Hash.put("tFileInputExcel_2", false);
				start_Hash.put("tFileInputExcel_2", System.currentTimeMillis());

				currentComponent = "tFileInputExcel_2";

				int tos_count_tFileInputExcel_2 = 0;

				final String decryptedPassword_tFileInputExcel_2 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:X11clSH2ssxm8FSO1esv/DVvDFOtxYsbdJF7CQ==");
				String password_tFileInputExcel_2 = decryptedPassword_tFileInputExcel_2;
				if (password_tFileInputExcel_2.isEmpty()) {
					password_tFileInputExcel_2 = null;
				}
				class RegexUtil_tFileInputExcel_2 {

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, String oneSheetName,
							boolean useRegex) {

						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

						if (useRegex) {// this part process the regex issue

							java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
							for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
								String sheetName = sheet.getSheetName();
								java.util.regex.Matcher matcher = pattern.matcher(sheetName);
								if (matcher.matches()) {
									if (sheet != null) {
										list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
									}
								}
							}

						} else {
							org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook
									.getSheet(oneSheetName);
							if (sheet != null) {
								list.add(sheet);
							}

						}

						return list;
					}

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, int index, boolean useRegex) {
						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
						org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook
								.getSheetAt(index);
						if (sheet != null) {
							list.add(sheet);
						}
						return list;
					}

				}
				RegexUtil_tFileInputExcel_2 regexUtil_tFileInputExcel_2 = new RegexUtil_tFileInputExcel_2();

				Object source_tFileInputExcel_2 = "D:/NIBM/Degree/HND/DWBI/courseWk/SachithaConfirm/SupplierType.xlsx";
				org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_2 = null;

				if (source_tFileInputExcel_2 instanceof String) {
					workbook_tFileInputExcel_2 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory
							.create(new java.io.File((String) source_tFileInputExcel_2), password_tFileInputExcel_2,
									true);
				} else if (source_tFileInputExcel_2 instanceof java.io.InputStream) {
					workbook_tFileInputExcel_2 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory
							.create((java.io.InputStream) source_tFileInputExcel_2, password_tFileInputExcel_2);
				} else {
					workbook_tFileInputExcel_2 = null;
					throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
				}
				try {

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_2 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					for (org.apache.poi.ss.usermodel.Sheet sheet_tFileInputExcel_2 : workbook_tFileInputExcel_2) {
						sheetList_tFileInputExcel_2
								.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet_tFileInputExcel_2);
					}
					if (sheetList_tFileInputExcel_2.size() <= 0) {
						throw new RuntimeException("Special sheets not exist!");
					}

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_2 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_2 : sheetList_tFileInputExcel_2) {
						if (sheet_FilterNull_tFileInputExcel_2 != null
								&& sheetList_FilterNull_tFileInputExcel_2.iterator() != null
								&& sheet_FilterNull_tFileInputExcel_2.iterator().hasNext()) {
							sheetList_FilterNull_tFileInputExcel_2.add(sheet_FilterNull_tFileInputExcel_2);
						}
					}
					sheetList_tFileInputExcel_2 = sheetList_FilterNull_tFileInputExcel_2;
					if (sheetList_tFileInputExcel_2.size() > 0) {
						int nb_line_tFileInputExcel_2 = 0;

						int begin_line_tFileInputExcel_2 = 1;

						int footer_input_tFileInputExcel_2 = 0;

						int end_line_tFileInputExcel_2 = 0;
						for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_2 : sheetList_tFileInputExcel_2) {
							end_line_tFileInputExcel_2 += (sheet_tFileInputExcel_2.getLastRowNum() + 1);
						}
						end_line_tFileInputExcel_2 -= footer_input_tFileInputExcel_2;
						int limit_tFileInputExcel_2 = -1;
						int start_column_tFileInputExcel_2 = 1 - 1;
						int end_column_tFileInputExcel_2 = -1;

						org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_2 = null;
						org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_2 = sheetList_tFileInputExcel_2
								.get(0);
						int rowCount_tFileInputExcel_2 = 0;
						int sheetIndex_tFileInputExcel_2 = 0;
						int currentRows_tFileInputExcel_2 = (sheetList_tFileInputExcel_2.get(0).getLastRowNum() + 1);

						// for the number format
						java.text.DecimalFormat df_tFileInputExcel_2 = new java.text.DecimalFormat(
								"#.####################################");
						char decimalChar_tFileInputExcel_2 = df_tFileInputExcel_2.getDecimalFormatSymbols()
								.getDecimalSeparator();

						for (int i_tFileInputExcel_2 = begin_line_tFileInputExcel_2; i_tFileInputExcel_2 < end_line_tFileInputExcel_2; i_tFileInputExcel_2++) {

							int emptyColumnCount_tFileInputExcel_2 = 0;

							if (limit_tFileInputExcel_2 != -1 && nb_line_tFileInputExcel_2 >= limit_tFileInputExcel_2) {
								break;
							}

							while (i_tFileInputExcel_2 >= rowCount_tFileInputExcel_2 + currentRows_tFileInputExcel_2) {
								rowCount_tFileInputExcel_2 += currentRows_tFileInputExcel_2;
								sheet_tFileInputExcel_2 = sheetList_tFileInputExcel_2
										.get(++sheetIndex_tFileInputExcel_2);
								currentRows_tFileInputExcel_2 = (sheet_tFileInputExcel_2.getLastRowNum() + 1);
							}
							globalMap.put("tFileInputExcel_2_CURRENT_SHEET", sheet_tFileInputExcel_2.getSheetName());
							if (rowCount_tFileInputExcel_2 <= i_tFileInputExcel_2) {
								row_tFileInputExcel_2 = sheet_tFileInputExcel_2
										.getRow(i_tFileInputExcel_2 - rowCount_tFileInputExcel_2);
							}
							row19 = null;
							int tempRowLength_tFileInputExcel_2 = 3;

							int columnIndex_tFileInputExcel_2 = 0;

							String[] temp_row_tFileInputExcel_2 = new String[tempRowLength_tFileInputExcel_2];
							int excel_end_column_tFileInputExcel_2;
							if (row_tFileInputExcel_2 == null) {
								excel_end_column_tFileInputExcel_2 = 0;
							} else {
								excel_end_column_tFileInputExcel_2 = row_tFileInputExcel_2.getLastCellNum();
							}
							int actual_end_column_tFileInputExcel_2;
							if (end_column_tFileInputExcel_2 == -1) {
								actual_end_column_tFileInputExcel_2 = excel_end_column_tFileInputExcel_2;
							} else {
								actual_end_column_tFileInputExcel_2 = end_column_tFileInputExcel_2 > excel_end_column_tFileInputExcel_2
										? excel_end_column_tFileInputExcel_2
										: end_column_tFileInputExcel_2;
							}
							org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_2 = null;
							for (int i = 0; i < tempRowLength_tFileInputExcel_2; i++) {
								if (i + start_column_tFileInputExcel_2 < actual_end_column_tFileInputExcel_2) {
									org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_2 = row_tFileInputExcel_2
											.getCell(i + start_column_tFileInputExcel_2);
									if (cell_tFileInputExcel_2 != null) {
										switch (cell_tFileInputExcel_2.getCellType()) {
										case STRING:
											temp_row_tFileInputExcel_2[i] = cell_tFileInputExcel_2
													.getRichStringCellValue().getString();
											break;
										case NUMERIC:
											if (org.apache.poi.ss.usermodel.DateUtil
													.isCellDateFormatted(cell_tFileInputExcel_2)) {
												temp_row_tFileInputExcel_2[i] = cell_tFileInputExcel_2
														.getDateCellValue().toString();
											} else {
												temp_row_tFileInputExcel_2[i] = df_tFileInputExcel_2
														.format(cell_tFileInputExcel_2.getNumericCellValue());
											}
											break;
										case BOOLEAN:
											temp_row_tFileInputExcel_2[i] = String
													.valueOf(cell_tFileInputExcel_2.getBooleanCellValue());
											break;
										case FORMULA:
											switch (cell_tFileInputExcel_2.getCachedFormulaResultType()) {
											case STRING:
												temp_row_tFileInputExcel_2[i] = cell_tFileInputExcel_2
														.getRichStringCellValue().getString();
												break;
											case NUMERIC:
												if (org.apache.poi.ss.usermodel.DateUtil
														.isCellDateFormatted(cell_tFileInputExcel_2)) {
													temp_row_tFileInputExcel_2[i] = cell_tFileInputExcel_2
															.getDateCellValue().toString();
												} else {
													ne_tFileInputExcel_2 = new org.apache.poi.ss.formula.eval.NumberEval(
															cell_tFileInputExcel_2.getNumericCellValue());
													temp_row_tFileInputExcel_2[i] = ne_tFileInputExcel_2
															.getStringValue();
												}
												break;
											case BOOLEAN:
												temp_row_tFileInputExcel_2[i] = String
														.valueOf(cell_tFileInputExcel_2.getBooleanCellValue());
												break;
											default:
												temp_row_tFileInputExcel_2[i] = "";
											}
											break;
										default:
											temp_row_tFileInputExcel_2[i] = "";
										}
									} else {
										temp_row_tFileInputExcel_2[i] = "";
									}

								} else {
									temp_row_tFileInputExcel_2[i] = "";
								}
							}
							boolean whetherReject_tFileInputExcel_2 = false;
							row19 = new row19Struct();
							int curColNum_tFileInputExcel_2 = -1;
							String curColName_tFileInputExcel_2 = "";
							try {
								columnIndex_tFileInputExcel_2 = 0;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "SupplierTypeID";

									row19.SupplierTypeID = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2], null,
											'.' == decimalChar_tFileInputExcel_2 ? null
													: decimalChar_tFileInputExcel_2));
								} else {
									row19.SupplierTypeID = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 1;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "Name";

									row19.Name = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
								} else {
									row19.Name = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 2;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "Description";

									row19.Description = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
								} else {
									row19.Description = null;
									emptyColumnCount_tFileInputExcel_2++;
								}

								nb_line_tFileInputExcel_2++;

							} catch (java.lang.Exception e) {
								globalMap.put("tFileInputExcel_2_ERROR_MESSAGE", e.getMessage());
								whetherReject_tFileInputExcel_2 = true;
								System.err.println(e.getMessage());
								row19 = null;
							}

							/**
							 * [tFileInputExcel_2 begin ] stop
							 */

							/**
							 * [tFileInputExcel_2 main ] start
							 */

							currentComponent = "tFileInputExcel_2";

							tos_count_tFileInputExcel_2++;

							/**
							 * [tFileInputExcel_2 main ] stop
							 */

							/**
							 * [tFileInputExcel_2 process_data_begin ] start
							 */

							currentComponent = "tFileInputExcel_2";

							/**
							 * [tFileInputExcel_2 process_data_begin ] stop
							 */
// Start of branch "row19"
							if (row19 != null) {

								/**
								 * [tMap_9 main ] start
								 */

								currentComponent = "tMap_9";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row19"

									);
								}

								boolean hasCasePrimitiveKeyWithNull_tMap_9 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_9 = false;
								boolean mainRowRejected_tMap_9 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_9__Struct Var = Var__tMap_9;// ###############################
									// ###############################
									// # Output tables

									suppliertype_out = null;

// # Output table : 'suppliertype_out'
									suppliertype_out_tmp.SUPPLIERTYPEID = row19.SupplierTypeID;
									suppliertype_out_tmp.NAME = row19.Name;
									suppliertype_out = suppliertype_out_tmp;
// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_9 = false;

								tos_count_tMap_9++;

								/**
								 * [tMap_9 main ] stop
								 */

								/**
								 * [tMap_9 process_data_begin ] start
								 */

								currentComponent = "tMap_9";

								/**
								 * [tMap_9 process_data_begin ] stop
								 */
// Start of branch "suppliertype_out"
								if (suppliertype_out != null) {

									/**
									 * [tUniqRow_5 main ] start
									 */

									currentComponent = "tUniqRow_5";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "suppliertype_out"

										);
									}

									row20.SUPPLIERTYPEID = suppliertype_out.SUPPLIERTYPEID;
									row20.NAME = suppliertype_out.NAME;

									tos_count_tUniqRow_5++;

									/**
									 * [tUniqRow_5 main ] stop
									 */

									/**
									 * [tUniqRow_5 process_data_begin ] start
									 */

									currentComponent = "tUniqRow_5";

									/**
									 * [tUniqRow_5 process_data_begin ] stop
									 */
// Start of branch "row20"
									if (row20 != null) {

										/**
										 * [tDBOutput_9 main ] start
										 */

										currentComponent = "tDBOutput_9";

										if (execStat) {
											runStat.updateStatOnConnection(iterateId, 1, 1

													, "row20"

											);
										}

										whetherReject_tDBOutput_9 = false;
										if (row20.SUPPLIERTYPEID == null) {
											pstmt_tDBOutput_9.setNull(1, java.sql.Types.INTEGER);
										} else {
											pstmt_tDBOutput_9.setInt(1, row20.SUPPLIERTYPEID);
										}

										if (row20.NAME == null) {
											pstmt_tDBOutput_9.setNull(2, java.sql.Types.VARCHAR);
										} else {
											pstmt_tDBOutput_9.setString(2, row20.NAME);
										}

										pstmt_tDBOutput_9.addBatch();
										nb_line_tDBOutput_9++;
										batchSizeCounter_tDBOutput_9++;
										if (batchSize_tDBOutput_9 > 0
												&& batchSize_tDBOutput_9 <= batchSizeCounter_tDBOutput_9) {
											try {
												pstmt_tDBOutput_9.executeBatch();
											} catch (java.sql.BatchUpdateException e_tDBOutput_9) {
												globalMap.put("tDBOutput_9_ERROR_MESSAGE", e_tDBOutput_9.getMessage());
												java.sql.SQLException ne_tDBOutput_9 = e_tDBOutput_9.getNextException(),
														sqle_tDBOutput_9 = null;
												String errormessage_tDBOutput_9;
												if (ne_tDBOutput_9 != null) {
													// build new exception to provide the original cause
													sqle_tDBOutput_9 = new java.sql.SQLException(
															e_tDBOutput_9.getMessage() + "\ncaused by: "
																	+ ne_tDBOutput_9.getMessage(),
															ne_tDBOutput_9.getSQLState(), ne_tDBOutput_9.getErrorCode(),
															ne_tDBOutput_9);
													errormessage_tDBOutput_9 = sqle_tDBOutput_9.getMessage();
												} else {
													errormessage_tDBOutput_9 = e_tDBOutput_9.getMessage();
												}

												System.err.println(errormessage_tDBOutput_9);

											}
											tmp_batchUpdateCount_tDBOutput_9 = pstmt_tDBOutput_9.getUpdateCount();
											insertedCount_tDBOutput_9 += (tmp_batchUpdateCount_tDBOutput_9 != -1
													? tmp_batchUpdateCount_tDBOutput_9
													: 0);
											rowsToCommitCount_tDBOutput_9 += (tmp_batchUpdateCount_tDBOutput_9 != -1
													? tmp_batchUpdateCount_tDBOutput_9
													: 0);
											batchSizeCounter_tDBOutput_9 = 0;
										}
										commitCounter_tDBOutput_9++;
										if (commitEvery_tDBOutput_9 <= commitCounter_tDBOutput_9) {
											if (batchSizeCounter_tDBOutput_9 > 0) {
												try {
													pstmt_tDBOutput_9.executeBatch();
												} catch (java.sql.BatchUpdateException e_tDBOutput_9) {
													globalMap.put("tDBOutput_9_ERROR_MESSAGE",
															e_tDBOutput_9.getMessage());
													java.sql.SQLException ne_tDBOutput_9 = e_tDBOutput_9
															.getNextException(), sqle_tDBOutput_9 = null;
													String errormessage_tDBOutput_9;
													if (ne_tDBOutput_9 != null) {
														// build new exception to provide the original cause
														sqle_tDBOutput_9 = new java.sql.SQLException(
																e_tDBOutput_9.getMessage() + "\ncaused by: "
																		+ ne_tDBOutput_9.getMessage(),
																ne_tDBOutput_9.getSQLState(),
																ne_tDBOutput_9.getErrorCode(), ne_tDBOutput_9);
														errormessage_tDBOutput_9 = sqle_tDBOutput_9.getMessage();
													} else {
														errormessage_tDBOutput_9 = e_tDBOutput_9.getMessage();
													}

													System.err.println(errormessage_tDBOutput_9);

												}
												tmp_batchUpdateCount_tDBOutput_9 = pstmt_tDBOutput_9.getUpdateCount();
												insertedCount_tDBOutput_9 += (tmp_batchUpdateCount_tDBOutput_9 != -1
														? tmp_batchUpdateCount_tDBOutput_9
														: 0);
												rowsToCommitCount_tDBOutput_9 += (tmp_batchUpdateCount_tDBOutput_9 != -1
														? tmp_batchUpdateCount_tDBOutput_9
														: 0);
											}
											if (rowsToCommitCount_tDBOutput_9 != 0) {

											}
											conn_tDBOutput_9.commit();
											if (rowsToCommitCount_tDBOutput_9 != 0) {

												rowsToCommitCount_tDBOutput_9 = 0;
											}
											commitCounter_tDBOutput_9 = 0;
											batchSizeCounter_tDBOutput_9 = 0;
										}

										tos_count_tDBOutput_9++;

										/**
										 * [tDBOutput_9 main ] stop
										 */

										/**
										 * [tDBOutput_9 process_data_begin ] start
										 */

										currentComponent = "tDBOutput_9";

										/**
										 * [tDBOutput_9 process_data_begin ] stop
										 */

										/**
										 * [tDBOutput_9 process_data_end ] start
										 */

										currentComponent = "tDBOutput_9";

										/**
										 * [tDBOutput_9 process_data_end ] stop
										 */

									} // End of branch "row20"

									/**
									 * [tUniqRow_5 process_data_end ] start
									 */

									currentComponent = "tUniqRow_5";

									/**
									 * [tUniqRow_5 process_data_end ] stop
									 */

								} // End of branch "suppliertype_out"

								/**
								 * [tMap_9 process_data_end ] start
								 */

								currentComponent = "tMap_9";

								/**
								 * [tMap_9 process_data_end ] stop
								 */

							} // End of branch "row19"

							/**
							 * [tFileInputExcel_2 process_data_end ] start
							 */

							currentComponent = "tFileInputExcel_2";

							/**
							 * [tFileInputExcel_2 process_data_end ] stop
							 */

							/**
							 * [tFileInputExcel_2 end ] start
							 */

							currentComponent = "tFileInputExcel_2";

						}

						globalMap.put("tFileInputExcel_2_NB_LINE", nb_line_tFileInputExcel_2);

					}

				} finally {

					if (!(source_tFileInputExcel_2 instanceof java.io.InputStream)) {
						workbook_tFileInputExcel_2.getPackage().revert();
					}

				}

				ok_Hash.put("tFileInputExcel_2", true);
				end_Hash.put("tFileInputExcel_2", System.currentTimeMillis());

				/**
				 * [tFileInputExcel_2 end ] stop
				 */

				/**
				 * [tMap_9 end ] start
				 */

				currentComponent = "tMap_9";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row19");
				}

				ok_Hash.put("tMap_9", true);
				end_Hash.put("tMap_9", System.currentTimeMillis());

				/**
				 * [tMap_9 end ] stop
				 */

				/**
				 * [tUniqRow_5 end ] start
				 */

				currentComponent = "tUniqRow_5";

				globalMap.put("tUniqRow_5_NB_UNIQUES", nb_uniques_tUniqRow_5);
				globalMap.put("tUniqRow_5_NB_DUPLICATES", nb_duplicates_tUniqRow_5);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "suppliertype_out");
				}

				ok_Hash.put("tUniqRow_5", true);
				end_Hash.put("tUniqRow_5", System.currentTimeMillis());

				/**
				 * [tUniqRow_5 end ] stop
				 */

				/**
				 * [tDBOutput_9 end ] start
				 */

				currentComponent = "tDBOutput_9";

				if (batchSizeCounter_tDBOutput_9 > 0) {
					try {
						if (pstmt_tDBOutput_9 != null) {

							pstmt_tDBOutput_9.executeBatch();

						}
					} catch (java.sql.BatchUpdateException e_tDBOutput_9) {
						globalMap.put("tDBOutput_9_ERROR_MESSAGE", e_tDBOutput_9.getMessage());
						java.sql.SQLException ne_tDBOutput_9 = e_tDBOutput_9.getNextException(),
								sqle_tDBOutput_9 = null;
						String errormessage_tDBOutput_9;
						if (ne_tDBOutput_9 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_9 = new java.sql.SQLException(
									e_tDBOutput_9.getMessage() + "\ncaused by: " + ne_tDBOutput_9.getMessage(),
									ne_tDBOutput_9.getSQLState(), ne_tDBOutput_9.getErrorCode(), ne_tDBOutput_9);
							errormessage_tDBOutput_9 = sqle_tDBOutput_9.getMessage();
						} else {
							errormessage_tDBOutput_9 = e_tDBOutput_9.getMessage();
						}

						System.err.println(errormessage_tDBOutput_9);

					}
					if (pstmt_tDBOutput_9 != null) {
						tmp_batchUpdateCount_tDBOutput_9 = pstmt_tDBOutput_9.getUpdateCount();

						insertedCount_tDBOutput_9

								+= (tmp_batchUpdateCount_tDBOutput_9 != -1 ? tmp_batchUpdateCount_tDBOutput_9 : 0);
						rowsToCommitCount_tDBOutput_9 += (tmp_batchUpdateCount_tDBOutput_9 != -1
								? tmp_batchUpdateCount_tDBOutput_9
								: 0);
					}
				}
				if (pstmt_tDBOutput_9 != null) {

					pstmt_tDBOutput_9.close();
					resourceMap.remove("pstmt_tDBOutput_9");

				}
				resourceMap.put("statementClosed_tDBOutput_9", true);
				if (commitCounter_tDBOutput_9 > 0 && rowsToCommitCount_tDBOutput_9 != 0) {

				}
				conn_tDBOutput_9.commit();
				if (commitCounter_tDBOutput_9 > 0 && rowsToCommitCount_tDBOutput_9 != 0) {

					rowsToCommitCount_tDBOutput_9 = 0;
				}
				commitCounter_tDBOutput_9 = 0;

				conn_tDBOutput_9.close();

				resourceMap.put("finish_tDBOutput_9", true);

				nb_line_deleted_tDBOutput_9 = nb_line_deleted_tDBOutput_9 + deletedCount_tDBOutput_9;
				nb_line_update_tDBOutput_9 = nb_line_update_tDBOutput_9 + updatedCount_tDBOutput_9;
				nb_line_inserted_tDBOutput_9 = nb_line_inserted_tDBOutput_9 + insertedCount_tDBOutput_9;
				nb_line_rejected_tDBOutput_9 = nb_line_rejected_tDBOutput_9 + rejectedCount_tDBOutput_9;

				globalMap.put("tDBOutput_9_NB_LINE", nb_line_tDBOutput_9);
				globalMap.put("tDBOutput_9_NB_LINE_UPDATED", nb_line_update_tDBOutput_9);
				globalMap.put("tDBOutput_9_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_9);
				globalMap.put("tDBOutput_9_NB_LINE_DELETED", nb_line_deleted_tDBOutput_9);
				globalMap.put("tDBOutput_9_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_9);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row20");
				}

				ok_Hash.put("tDBOutput_9", true);
				end_Hash.put("tDBOutput_9", System.currentTimeMillis());

				/**
				 * [tDBOutput_9 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputExcel_2 finally ] start
				 */

				currentComponent = "tFileInputExcel_2";

				/**
				 * [tFileInputExcel_2 finally ] stop
				 */

				/**
				 * [tMap_9 finally ] start
				 */

				currentComponent = "tMap_9";

				/**
				 * [tMap_9 finally ] stop
				 */

				/**
				 * [tUniqRow_5 finally ] start
				 */

				currentComponent = "tUniqRow_5";

				/**
				 * [tUniqRow_5 finally ] stop
				 */

				/**
				 * [tDBOutput_9 finally ] start
				 */

				currentComponent = "tDBOutput_9";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_9") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_9 = null;
						if ((pstmtToClose_tDBOutput_9 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_9")) != null) {
							pstmtToClose_tDBOutput_9.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_9") == null) {
						java.sql.Connection ctn_tDBOutput_9 = null;
						if ((ctn_tDBOutput_9 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_9")) != null) {
							try {
								ctn_tDBOutput_9.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_9) {
								String errorMessage_tDBOutput_9 = "failed to close the connection in tDBOutput_9 :"
										+ sqlEx_tDBOutput_9.getMessage();
								System.err.println(errorMessage_tDBOutput_9);
							}
						}
					}
				}

				/**
				 * [tDBOutput_9 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputExcel_2_SUBPROCESS_STATE", 1);
	}

	public static class row24Struct implements routines.system.IPersistableRow<row24Struct> {
		final static byte[] commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];
		static byte[] commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];

		public Integer PERFORMANCEID;

		public Integer getPERFORMANCEID() {
			return this.PERFORMANCEID;
		}

		public String PERFORMANCERATING;

		public String getPERFORMANCERATING() {
			return this.PERFORMANCERATING;
		}

		public java.util.Date REVIEWDATE;

		public java.util.Date getREVIEWDATE() {
			return this.REVIEWDATE;
		}

		public String REVIEWCYCLE;

		public String getREVIEWCYCLE() {
			return this.REVIEWCYCLE;
		}

		public Integer TARGETCOVERED;

		public Integer getTARGETCOVERED() {
			return this.TARGETCOVERED;
		}

		public Integer EMPLOYEEID;

		public Integer getEMPLOYEEID() {
			return this.EMPLOYEEID;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length) {
					if (length < 1024 && commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length == 0) {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[1024];
					} else {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length);
				strReturn = new String(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length) {
					if (length < 1024 && commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length == 0) {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[1024];
					} else {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length);
				strReturn = new String(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.PERFORMANCEID = readInteger(dis);

					this.PERFORMANCERATING = readString(dis);

					this.REVIEWDATE = readDate(dis);

					this.REVIEWCYCLE = readString(dis);

					this.TARGETCOVERED = readInteger(dis);

					this.EMPLOYEEID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.PERFORMANCEID = readInteger(dis);

					this.PERFORMANCERATING = readString(dis);

					this.REVIEWDATE = readDate(dis);

					this.REVIEWCYCLE = readString(dis);

					this.TARGETCOVERED = readInteger(dis);

					this.EMPLOYEEID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.PERFORMANCEID, dos);

				// String

				writeString(this.PERFORMANCERATING, dos);

				// java.util.Date

				writeDate(this.REVIEWDATE, dos);

				// String

				writeString(this.REVIEWCYCLE, dos);

				// Integer

				writeInteger(this.TARGETCOVERED, dos);

				// Integer

				writeInteger(this.EMPLOYEEID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.PERFORMANCEID, dos);

				// String

				writeString(this.PERFORMANCERATING, dos);

				// java.util.Date

				writeDate(this.REVIEWDATE, dos);

				// String

				writeString(this.REVIEWCYCLE, dos);

				// Integer

				writeInteger(this.TARGETCOVERED, dos);

				// Integer

				writeInteger(this.EMPLOYEEID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PERFORMANCEID=" + String.valueOf(PERFORMANCEID));
			sb.append(",PERFORMANCERATING=" + PERFORMANCERATING);
			sb.append(",REVIEWDATE=" + String.valueOf(REVIEWDATE));
			sb.append(",REVIEWCYCLE=" + REVIEWCYCLE);
			sb.append(",TARGETCOVERED=" + String.valueOf(TARGETCOVERED));
			sb.append(",EMPLOYEEID=" + String.valueOf(EMPLOYEEID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row24Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class performanceMetrix_outStruct
			implements routines.system.IPersistableRow<performanceMetrix_outStruct> {
		final static byte[] commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];
		static byte[] commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];

		public Integer PERFORMANCEID;

		public Integer getPERFORMANCEID() {
			return this.PERFORMANCEID;
		}

		public String PERFORMANCERATING;

		public String getPERFORMANCERATING() {
			return this.PERFORMANCERATING;
		}

		public java.util.Date REVIEWDATE;

		public java.util.Date getREVIEWDATE() {
			return this.REVIEWDATE;
		}

		public String REVIEWCYCLE;

		public String getREVIEWCYCLE() {
			return this.REVIEWCYCLE;
		}

		public Integer TARGETCOVERED;

		public Integer getTARGETCOVERED() {
			return this.TARGETCOVERED;
		}

		public Integer EMPLOYEEID;

		public Integer getEMPLOYEEID() {
			return this.EMPLOYEEID;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length) {
					if (length < 1024 && commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length == 0) {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[1024];
					} else {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length);
				strReturn = new String(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length) {
					if (length < 1024 && commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length == 0) {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[1024];
					} else {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length);
				strReturn = new String(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.PERFORMANCEID = readInteger(dis);

					this.PERFORMANCERATING = readString(dis);

					this.REVIEWDATE = readDate(dis);

					this.REVIEWCYCLE = readString(dis);

					this.TARGETCOVERED = readInteger(dis);

					this.EMPLOYEEID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.PERFORMANCEID = readInteger(dis);

					this.PERFORMANCERATING = readString(dis);

					this.REVIEWDATE = readDate(dis);

					this.REVIEWCYCLE = readString(dis);

					this.TARGETCOVERED = readInteger(dis);

					this.EMPLOYEEID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.PERFORMANCEID, dos);

				// String

				writeString(this.PERFORMANCERATING, dos);

				// java.util.Date

				writeDate(this.REVIEWDATE, dos);

				// String

				writeString(this.REVIEWCYCLE, dos);

				// Integer

				writeInteger(this.TARGETCOVERED, dos);

				// Integer

				writeInteger(this.EMPLOYEEID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.PERFORMANCEID, dos);

				// String

				writeString(this.PERFORMANCERATING, dos);

				// java.util.Date

				writeDate(this.REVIEWDATE, dos);

				// String

				writeString(this.REVIEWCYCLE, dos);

				// Integer

				writeInteger(this.TARGETCOVERED, dos);

				// Integer

				writeInteger(this.EMPLOYEEID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PERFORMANCEID=" + String.valueOf(PERFORMANCEID));
			sb.append(",PERFORMANCERATING=" + PERFORMANCERATING);
			sb.append(",REVIEWDATE=" + String.valueOf(REVIEWDATE));
			sb.append(",REVIEWCYCLE=" + REVIEWCYCLE);
			sb.append(",TARGETCOVERED=" + String.valueOf(TARGETCOVERED));
			sb.append(",EMPLOYEEID=" + String.valueOf(EMPLOYEEID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(performanceMetrix_outStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row23Struct implements routines.system.IPersistableRow<row23Struct> {
		final static byte[] commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];
		static byte[] commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];

		public Integer PerformanceID;

		public Integer getPerformanceID() {
			return this.PerformanceID;
		}

		public String ProformanceRating;

		public String getProformanceRating() {
			return this.ProformanceRating;
		}

		public java.util.Date ReviewDate;

		public java.util.Date getReviewDate() {
			return this.ReviewDate;
		}

		public String ReviewCycle;

		public String getReviewCycle() {
			return this.ReviewCycle;
		}

		public Integer KPI_Score;

		public Integer getKPI_Score() {
			return this.KPI_Score;
		}

		public Integer TargetCovered;

		public Integer getTargetCovered() {
			return this.TargetCovered;
		}

		public Integer EmployeeID;

		public Integer getEmployeeID() {
			return this.EmployeeID;
		}

		public String ManagerComments;

		public String getManagerComments() {
			return this.ManagerComments;
		}

		public String Department;

		public String getDepartment() {
			return this.Department;
		}

		public java.util.Date End_Date;

		public java.util.Date getEnd_Date() {
			return this.End_Date;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length) {
					if (length < 1024 && commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length == 0) {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[1024];
					} else {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length);
				strReturn = new String(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length) {
					if (length < 1024 && commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length == 0) {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[1024];
					} else {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length);
				strReturn = new String(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.PerformanceID = readInteger(dis);

					this.ProformanceRating = readString(dis);

					this.ReviewDate = readDate(dis);

					this.ReviewCycle = readString(dis);

					this.KPI_Score = readInteger(dis);

					this.TargetCovered = readInteger(dis);

					this.EmployeeID = readInteger(dis);

					this.ManagerComments = readString(dis);

					this.Department = readString(dis);

					this.End_Date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.PerformanceID = readInteger(dis);

					this.ProformanceRating = readString(dis);

					this.ReviewDate = readDate(dis);

					this.ReviewCycle = readString(dis);

					this.KPI_Score = readInteger(dis);

					this.TargetCovered = readInteger(dis);

					this.EmployeeID = readInteger(dis);

					this.ManagerComments = readString(dis);

					this.Department = readString(dis);

					this.End_Date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.PerformanceID, dos);

				// String

				writeString(this.ProformanceRating, dos);

				// java.util.Date

				writeDate(this.ReviewDate, dos);

				// String

				writeString(this.ReviewCycle, dos);

				// Integer

				writeInteger(this.KPI_Score, dos);

				// Integer

				writeInteger(this.TargetCovered, dos);

				// Integer

				writeInteger(this.EmployeeID, dos);

				// String

				writeString(this.ManagerComments, dos);

				// String

				writeString(this.Department, dos);

				// java.util.Date

				writeDate(this.End_Date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.PerformanceID, dos);

				// String

				writeString(this.ProformanceRating, dos);

				// java.util.Date

				writeDate(this.ReviewDate, dos);

				// String

				writeString(this.ReviewCycle, dos);

				// Integer

				writeInteger(this.KPI_Score, dos);

				// Integer

				writeInteger(this.TargetCovered, dos);

				// Integer

				writeInteger(this.EmployeeID, dos);

				// String

				writeString(this.ManagerComments, dos);

				// String

				writeString(this.Department, dos);

				// java.util.Date

				writeDate(this.End_Date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PerformanceID=" + String.valueOf(PerformanceID));
			sb.append(",ProformanceRating=" + ProformanceRating);
			sb.append(",ReviewDate=" + String.valueOf(ReviewDate));
			sb.append(",ReviewCycle=" + ReviewCycle);
			sb.append(",KPI_Score=" + String.valueOf(KPI_Score));
			sb.append(",TargetCovered=" + String.valueOf(TargetCovered));
			sb.append(",EmployeeID=" + String.valueOf(EmployeeID));
			sb.append(",ManagerComments=" + ManagerComments);
			sb.append(",Department=" + Department);
			sb.append(",End_Date=" + String.valueOf(End_Date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row23Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputJSON_1Struct
			implements routines.system.IPersistableRow<after_tFileInputJSON_1Struct> {
		final static byte[] commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];
		static byte[] commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];

		public Integer PerformanceID;

		public Integer getPerformanceID() {
			return this.PerformanceID;
		}

		public String ProformanceRating;

		public String getProformanceRating() {
			return this.ProformanceRating;
		}

		public java.util.Date ReviewDate;

		public java.util.Date getReviewDate() {
			return this.ReviewDate;
		}

		public String ReviewCycle;

		public String getReviewCycle() {
			return this.ReviewCycle;
		}

		public Integer KPI_Score;

		public Integer getKPI_Score() {
			return this.KPI_Score;
		}

		public Integer TargetCovered;

		public Integer getTargetCovered() {
			return this.TargetCovered;
		}

		public Integer EmployeeID;

		public Integer getEmployeeID() {
			return this.EmployeeID;
		}

		public String ManagerComments;

		public String getManagerComments() {
			return this.ManagerComments;
		}

		public String Department;

		public String getDepartment() {
			return this.Department;
		}

		public java.util.Date End_Date;

		public java.util.Date getEnd_Date() {
			return this.End_Date;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length) {
					if (length < 1024 && commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length == 0) {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[1024];
					} else {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length);
				strReturn = new String(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length) {
					if (length < 1024 && commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length == 0) {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[1024];
					} else {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length);
				strReturn = new String(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.PerformanceID = readInteger(dis);

					this.ProformanceRating = readString(dis);

					this.ReviewDate = readDate(dis);

					this.ReviewCycle = readString(dis);

					this.KPI_Score = readInteger(dis);

					this.TargetCovered = readInteger(dis);

					this.EmployeeID = readInteger(dis);

					this.ManagerComments = readString(dis);

					this.Department = readString(dis);

					this.End_Date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.PerformanceID = readInteger(dis);

					this.ProformanceRating = readString(dis);

					this.ReviewDate = readDate(dis);

					this.ReviewCycle = readString(dis);

					this.KPI_Score = readInteger(dis);

					this.TargetCovered = readInteger(dis);

					this.EmployeeID = readInteger(dis);

					this.ManagerComments = readString(dis);

					this.Department = readString(dis);

					this.End_Date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.PerformanceID, dos);

				// String

				writeString(this.ProformanceRating, dos);

				// java.util.Date

				writeDate(this.ReviewDate, dos);

				// String

				writeString(this.ReviewCycle, dos);

				// Integer

				writeInteger(this.KPI_Score, dos);

				// Integer

				writeInteger(this.TargetCovered, dos);

				// Integer

				writeInteger(this.EmployeeID, dos);

				// String

				writeString(this.ManagerComments, dos);

				// String

				writeString(this.Department, dos);

				// java.util.Date

				writeDate(this.End_Date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.PerformanceID, dos);

				// String

				writeString(this.ProformanceRating, dos);

				// java.util.Date

				writeDate(this.ReviewDate, dos);

				// String

				writeString(this.ReviewCycle, dos);

				// Integer

				writeInteger(this.KPI_Score, dos);

				// Integer

				writeInteger(this.TargetCovered, dos);

				// Integer

				writeInteger(this.EmployeeID, dos);

				// String

				writeString(this.ManagerComments, dos);

				// String

				writeString(this.Department, dos);

				// java.util.Date

				writeDate(this.End_Date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("PerformanceID=" + String.valueOf(PerformanceID));
			sb.append(",ProformanceRating=" + ProformanceRating);
			sb.append(",ReviewDate=" + String.valueOf(ReviewDate));
			sb.append(",ReviewCycle=" + ReviewCycle);
			sb.append(",KPI_Score=" + String.valueOf(KPI_Score));
			sb.append(",TargetCovered=" + String.valueOf(TargetCovered));
			sb.append(",EmployeeID=" + String.valueOf(EmployeeID));
			sb.append(",ManagerComments=" + ManagerComments);
			sb.append(",Department=" + Department);
			sb.append(",End_Date=" + String.valueOf(End_Date));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputJSON_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputJSON_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputJSON_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tFileInputJSON_2Process(globalMap);

				row23Struct row23 = new row23Struct();
				performanceMetrix_outStruct performanceMetrix_out = new performanceMetrix_outStruct();
				row24Struct row24 = new row24Struct();

				/**
				 * [tDBOutput_5 begin ] start
				 */

				ok_Hash.put("tDBOutput_5", false);
				start_Hash.put("tDBOutput_5", System.currentTimeMillis());

				currentComponent = "tDBOutput_5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row24");
				}

				int tos_count_tDBOutput_5 = 0;

				int nb_line_tDBOutput_5 = 0;
				int nb_line_update_tDBOutput_5 = 0;
				int nb_line_inserted_tDBOutput_5 = 0;
				int nb_line_deleted_tDBOutput_5 = 0;
				int nb_line_rejected_tDBOutput_5 = 0;

				int tmp_batchUpdateCount_tDBOutput_5 = 0;

				int deletedCount_tDBOutput_5 = 0;
				int updatedCount_tDBOutput_5 = 0;
				int insertedCount_tDBOutput_5 = 0;
				int rowsToCommitCount_tDBOutput_5 = 0;
				int rejectedCount_tDBOutput_5 = 0;

				boolean whetherReject_tDBOutput_5 = false;

				java.sql.Connection conn_tDBOutput_5 = null;

				// optional table
				String dbschema_tDBOutput_5 = null;
				String tableName_tDBOutput_5 = null;
				String driverClass_tDBOutput_5 = "oracle.jdbc.OracleDriver";

				java.lang.Class.forName(driverClass_tDBOutput_5);
				String url_tDBOutput_5 = null;
				url_tDBOutput_5 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + "localhost"
						+ ")(port=" + "1521" + "))(connect_data=(service_name=" + "XEPDB1" + ")))";
				String dbUser_tDBOutput_5 = "system";

				final String decryptedPassword_tDBOutput_5 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:x1++lBHfat5XXACEm5eOxvgAyXkLu93u4DHjxHBO2MgmwY6td50=");

				String dbPwd_tDBOutput_5 = decryptedPassword_tDBOutput_5;
				dbschema_tDBOutput_5 = "";

				conn_tDBOutput_5 = java.sql.DriverManager.getConnection(url_tDBOutput_5, dbUser_tDBOutput_5,
						dbPwd_tDBOutput_5);
				resourceMap.put("conn_tDBOutput_5", conn_tDBOutput_5);
				conn_tDBOutput_5.setAutoCommit(false);
				int commitEvery_tDBOutput_5 = 10000;
				int commitCounter_tDBOutput_5 = 0;
				int batchSize_tDBOutput_5 = 10000;
				int batchSizeCounter_tDBOutput_5 = 0;
				int count_tDBOutput_5 = 0;

				if (dbschema_tDBOutput_5 == null || dbschema_tDBOutput_5.trim().length() == 0) {
					tableName_tDBOutput_5 = ("DIM_PERFORMANCEMATRIX");
				} else {
					tableName_tDBOutput_5 = dbschema_tDBOutput_5 + "." + ("DIM_PERFORMANCEMATRIX");
				}
				String insert_tDBOutput_5 = "INSERT INTO " + tableName_tDBOutput_5
						+ " (PERFORMANCEID,PERFORMANCERATING,REVIEWDATE,REVIEWCYCLE,TARGETCOVERED,EMPLOYEEID) VALUES (?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_5 = conn_tDBOutput_5.prepareStatement(insert_tDBOutput_5);
				resourceMap.put("pstmt_tDBOutput_5", pstmt_tDBOutput_5);

				/**
				 * [tDBOutput_5 begin ] stop
				 */

				/**
				 * [tUniqRow_2 begin ] start
				 */

				ok_Hash.put("tUniqRow_2", false);
				start_Hash.put("tUniqRow_2", System.currentTimeMillis());

				currentComponent = "tUniqRow_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "performanceMetrix_out");
				}

				int tos_count_tUniqRow_2 = 0;

				class KeyStruct_tUniqRow_2 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					Integer PERFORMANCEID;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result
									+ ((this.PERFORMANCEID == null) ? 0 : this.PERFORMANCEID.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_2 other = (KeyStruct_tUniqRow_2) obj;

						if (this.PERFORMANCEID == null) {
							if (other.PERFORMANCEID != null)
								return false;

						} else if (!this.PERFORMANCEID.equals(other.PERFORMANCEID))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_2 = 0;
				int nb_duplicates_tUniqRow_2 = 0;
				KeyStruct_tUniqRow_2 finder_tUniqRow_2 = new KeyStruct_tUniqRow_2();
				java.util.Set<KeyStruct_tUniqRow_2> keystUniqRow_2 = new java.util.HashSet<KeyStruct_tUniqRow_2>();

				/**
				 * [tUniqRow_2 begin ] stop
				 */

				/**
				 * [tMap_5 begin ] start
				 */

				ok_Hash.put("tMap_5", false);
				start_Hash.put("tMap_5", System.currentTimeMillis());

				currentComponent = "tMap_5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row23");
				}

				int tos_count_tMap_5 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row28Struct> tHash_Lookup_row28 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row28Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row28Struct>) globalMap
						.get("tHash_Lookup_row28"));

				row28Struct row28HashKey = new row28Struct();
				row28Struct row28Default = new row28Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_5__Struct {
				}
				Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
				performanceMetrix_outStruct performanceMetrix_out_tmp = new performanceMetrix_outStruct();
// ###############################

				/**
				 * [tMap_5 begin ] stop
				 */

				/**
				 * [tFileInputJSON_1 begin ] start
				 */

				ok_Hash.put("tFileInputJSON_1", false);
				start_Hash.put("tFileInputJSON_1", System.currentTimeMillis());

				currentComponent = "tFileInputJSON_1";

				int tos_count_tFileInputJSON_1 = 0;

				class JsonPathCache_tFileInputJSON_1 {
					final java.util.Map<String, com.jayway.jsonpath.JsonPath> jsonPathString2compiledJsonPath = new java.util.HashMap<String, com.jayway.jsonpath.JsonPath>();

					public com.jayway.jsonpath.JsonPath getCompiledJsonPath(String jsonPath) {
						if (jsonPathString2compiledJsonPath.containsKey(jsonPath)) {
							return jsonPathString2compiledJsonPath.get(jsonPath);
						} else {
							com.jayway.jsonpath.JsonPath compiledLoopPath = com.jayway.jsonpath.JsonPath
									.compile(jsonPath);
							jsonPathString2compiledJsonPath.put(jsonPath, compiledLoopPath);
							return compiledLoopPath;
						}
					}
				}

				int nb_line_tFileInputJSON_1 = 0;

				JsonPathCache_tFileInputJSON_1 jsonPathCache_tFileInputJSON_1 = new JsonPathCache_tFileInputJSON_1();

				String loopPath_tFileInputJSON_1 = "$[*]";
				java.util.List<Object> resultset_tFileInputJSON_1 = new java.util.ArrayList<Object>();

				java.io.InputStream is_tFileInputJSON_1 = null;
				com.jayway.jsonpath.ParseContext parseContext_tFileInputJSON_1 = com.jayway.jsonpath.JsonPath
						.using(com.jayway.jsonpath.Configuration.defaultConfiguration());
				Object filenameOrStream_tFileInputJSON_1 = null;
				try {
					filenameOrStream_tFileInputJSON_1 = "D:/NIBM/Degree/HND/DWBI/courseWk/sachitha_query/Dim_PerformanceMatrix.json";
				} catch (java.lang.Exception e_tFileInputJSON_1) {
					globalMap.put("tFileInputJSON_1_ERROR_MESSAGE", e_tFileInputJSON_1.getMessage());

					globalMap.put("tFileInputJSON_1_ERROR_MESSAGE", e_tFileInputJSON_1.getMessage());
					System.err.println(e_tFileInputJSON_1.getMessage());
				}

				com.jayway.jsonpath.ReadContext document_tFileInputJSON_1 = null;
				try {
					if (filenameOrStream_tFileInputJSON_1 instanceof java.io.InputStream) {
						is_tFileInputJSON_1 = (java.io.InputStream) filenameOrStream_tFileInputJSON_1;
					} else {

						is_tFileInputJSON_1 = new java.io.FileInputStream((String) filenameOrStream_tFileInputJSON_1);

					}

					document_tFileInputJSON_1 = parseContext_tFileInputJSON_1.parse(is_tFileInputJSON_1, "UTF-8");
					com.jayway.jsonpath.JsonPath compiledLoopPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
							.getCompiledJsonPath(loopPath_tFileInputJSON_1);
					Object result_tFileInputJSON_1 = document_tFileInputJSON_1.read(compiledLoopPath_tFileInputJSON_1,
							net.minidev.json.JSONObject.class);
					if (result_tFileInputJSON_1 instanceof net.minidev.json.JSONArray) {
						resultset_tFileInputJSON_1 = (net.minidev.json.JSONArray) result_tFileInputJSON_1;
					} else {
						resultset_tFileInputJSON_1.add(result_tFileInputJSON_1);
					}
				} catch (java.lang.Exception e_tFileInputJSON_1) {
					globalMap.put("tFileInputJSON_1_ERROR_MESSAGE", e_tFileInputJSON_1.getMessage());
					globalMap.put("tFileInputJSON_1_ERROR_MESSAGE", e_tFileInputJSON_1.getMessage());
					System.err.println(e_tFileInputJSON_1.getMessage());
				} finally {
					if (is_tFileInputJSON_1 != null) {
						is_tFileInputJSON_1.close();
					}
				}

				String jsonPath_tFileInputJSON_1 = null;
				com.jayway.jsonpath.JsonPath compiledJsonPath_tFileInputJSON_1 = null;

				Object value_tFileInputJSON_1 = null;
				Object root_tFileInputJSON_1 = null;
				for (Object row_tFileInputJSON_1 : resultset_tFileInputJSON_1) {
					nb_line_tFileInputJSON_1++;
					row23 = null;
					boolean whetherReject_tFileInputJSON_1 = false;
					row23 = new row23Struct();

					try {
						jsonPath_tFileInputJSON_1 = "PerformanceID";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {

							if (jsonPath_tFileInputJSON_1.startsWith("$")) {
								if (root_tFileInputJSON_1 == null) {
									root_tFileInputJSON_1 = document_tFileInputJSON_1
											.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
							} else {
								value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
							}
							if (value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
								row23.PerformanceID = ParserUtils.parseTo_Integer(value_tFileInputJSON_1.toString());
							} else {
								row23.PerformanceID =

										null;
							}
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							globalMap.put("tFileInputJSON_1_ERROR_MESSAGE", e_tFileInputJSON_1.getMessage());
							row23.PerformanceID =

									null;
						}
						jsonPath_tFileInputJSON_1 = "ProformanceRating";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {

							if (jsonPath_tFileInputJSON_1.startsWith("$")) {
								if (root_tFileInputJSON_1 == null) {
									root_tFileInputJSON_1 = document_tFileInputJSON_1
											.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
							} else {
								value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
							}
							row23.ProformanceRating = value_tFileInputJSON_1 == null ?

									null : value_tFileInputJSON_1.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							globalMap.put("tFileInputJSON_1_ERROR_MESSAGE", e_tFileInputJSON_1.getMessage());
							row23.ProformanceRating =

									null;
						}
						jsonPath_tFileInputJSON_1 = "ReviewDate";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {

							if (jsonPath_tFileInputJSON_1.startsWith("$")) {
								if (root_tFileInputJSON_1 == null) {
									root_tFileInputJSON_1 = document_tFileInputJSON_1
											.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
							} else {
								value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
							}
							if (value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
								row23.ReviewDate = ParserUtils.parseTo_Date(value_tFileInputJSON_1.toString(),
										"dd-MM-yyyy");
							} else {
								row23.ReviewDate =

										null;
							}
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							globalMap.put("tFileInputJSON_1_ERROR_MESSAGE", e_tFileInputJSON_1.getMessage());
							row23.ReviewDate =

									null;
						}
						jsonPath_tFileInputJSON_1 = "ReviewCycle";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {

							if (jsonPath_tFileInputJSON_1.startsWith("$")) {
								if (root_tFileInputJSON_1 == null) {
									root_tFileInputJSON_1 = document_tFileInputJSON_1
											.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
							} else {
								value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
							}
							row23.ReviewCycle = value_tFileInputJSON_1 == null ?

									null : value_tFileInputJSON_1.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							globalMap.put("tFileInputJSON_1_ERROR_MESSAGE", e_tFileInputJSON_1.getMessage());
							row23.ReviewCycle =

									null;
						}
						jsonPath_tFileInputJSON_1 = "KPI_Score";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {

							if (jsonPath_tFileInputJSON_1.startsWith("$")) {
								if (root_tFileInputJSON_1 == null) {
									root_tFileInputJSON_1 = document_tFileInputJSON_1
											.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
							} else {
								value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
							}
							if (value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
								row23.KPI_Score = ParserUtils.parseTo_Integer(value_tFileInputJSON_1.toString());
							} else {
								row23.KPI_Score =

										null;
							}
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							globalMap.put("tFileInputJSON_1_ERROR_MESSAGE", e_tFileInputJSON_1.getMessage());
							row23.KPI_Score =

									null;
						}
						jsonPath_tFileInputJSON_1 = "TargetCovered";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {

							if (jsonPath_tFileInputJSON_1.startsWith("$")) {
								if (root_tFileInputJSON_1 == null) {
									root_tFileInputJSON_1 = document_tFileInputJSON_1
											.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
							} else {
								value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
							}
							if (value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
								row23.TargetCovered = ParserUtils.parseTo_Integer(value_tFileInputJSON_1.toString());
							} else {
								row23.TargetCovered =

										null;
							}
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							globalMap.put("tFileInputJSON_1_ERROR_MESSAGE", e_tFileInputJSON_1.getMessage());
							row23.TargetCovered =

									null;
						}
						jsonPath_tFileInputJSON_1 = "EmployeeID";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {

							if (jsonPath_tFileInputJSON_1.startsWith("$")) {
								if (root_tFileInputJSON_1 == null) {
									root_tFileInputJSON_1 = document_tFileInputJSON_1
											.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
							} else {
								value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
							}
							if (value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
								row23.EmployeeID = ParserUtils.parseTo_Integer(value_tFileInputJSON_1.toString());
							} else {
								row23.EmployeeID =

										null;
							}
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							globalMap.put("tFileInputJSON_1_ERROR_MESSAGE", e_tFileInputJSON_1.getMessage());
							row23.EmployeeID =

									null;
						}
						jsonPath_tFileInputJSON_1 = "ManagerComments";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {

							if (jsonPath_tFileInputJSON_1.startsWith("$")) {
								if (root_tFileInputJSON_1 == null) {
									root_tFileInputJSON_1 = document_tFileInputJSON_1
											.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
							} else {
								value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
							}
							row23.ManagerComments = value_tFileInputJSON_1 == null ?

									null : value_tFileInputJSON_1.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							globalMap.put("tFileInputJSON_1_ERROR_MESSAGE", e_tFileInputJSON_1.getMessage());
							row23.ManagerComments =

									null;
						}
						jsonPath_tFileInputJSON_1 = "Department";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {

							if (jsonPath_tFileInputJSON_1.startsWith("$")) {
								if (root_tFileInputJSON_1 == null) {
									root_tFileInputJSON_1 = document_tFileInputJSON_1
											.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
							} else {
								value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
							}
							row23.Department = value_tFileInputJSON_1 == null ?

									null : value_tFileInputJSON_1.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							globalMap.put("tFileInputJSON_1_ERROR_MESSAGE", e_tFileInputJSON_1.getMessage());
							row23.Department =

									null;
						}
						jsonPath_tFileInputJSON_1 = "End_Date";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {

							if (jsonPath_tFileInputJSON_1.startsWith("$")) {
								if (root_tFileInputJSON_1 == null) {
									root_tFileInputJSON_1 = document_tFileInputJSON_1
											.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
							} else {
								value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
							}
							if (value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
								row23.End_Date = ParserUtils.parseTo_Date(value_tFileInputJSON_1.toString(),
										"dd-MM-yyyy");
							} else {
								row23.End_Date =

										null;
							}
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							globalMap.put("tFileInputJSON_1_ERROR_MESSAGE", e_tFileInputJSON_1.getMessage());
							row23.End_Date =

									null;
						}
					} catch (java.lang.Exception e_tFileInputJSON_1) {
						globalMap.put("tFileInputJSON_1_ERROR_MESSAGE", e_tFileInputJSON_1.getMessage());
						whetherReject_tFileInputJSON_1 = true;
						System.err.println(e_tFileInputJSON_1.getMessage());
						row23 = null;
						globalMap.put("tFileInputJSON_1_ERROR_MESSAGE", e_tFileInputJSON_1.getMessage());
					}
//}

					/**
					 * [tFileInputJSON_1 begin ] stop
					 */

					/**
					 * [tFileInputJSON_1 main ] start
					 */

					currentComponent = "tFileInputJSON_1";

					tos_count_tFileInputJSON_1++;

					/**
					 * [tFileInputJSON_1 main ] stop
					 */

					/**
					 * [tFileInputJSON_1 process_data_begin ] start
					 */

					currentComponent = "tFileInputJSON_1";

					/**
					 * [tFileInputJSON_1 process_data_begin ] stop
					 */
// Start of branch "row23"
					if (row23 != null) {

						/**
						 * [tMap_5 main ] start
						 */

						currentComponent = "tMap_5";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row23"

							);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_5 = false;
						boolean mainRowRejected_tMap_5 = false;

						///////////////////////////////////////////////
						// Starting Lookup Table "row28"
						///////////////////////////////////////////////

						boolean forceLooprow28 = false;

						row28Struct row28ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_5) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_5 = false;

							row28HashKey.EmployeeID = row23.EmployeeID;

							row28HashKey.hashCodeDirty = true;

							tHash_Lookup_row28.lookup(row28HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row28 != null && tHash_Lookup_row28.getCount(row28HashKey) > 1) { // G 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
							// 'row28' and it contains more one result from keys : row28.EmployeeID = '" +
							// row28HashKey.EmployeeID + "'");
						} // G 071

						row28Struct row28 = null;

						row28Struct fromLookup_row28 = null;
						row28 = row28Default;

						if (tHash_Lookup_row28 != null && tHash_Lookup_row28.hasNext()) { // G 099

							fromLookup_row28 = tHash_Lookup_row28.next();

						} // G 099

						if (fromLookup_row28 != null) {
							row28 = fromLookup_row28;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
							// ###############################
							// # Output tables

							performanceMetrix_out = null;

// # Output table : 'performanceMetrix_out'
							performanceMetrix_out_tmp.PERFORMANCEID = row23.PerformanceID;
							performanceMetrix_out_tmp.PERFORMANCERATING = row23.ProformanceRating;
							performanceMetrix_out_tmp.REVIEWDATE = row23.ReviewDate;
							performanceMetrix_out_tmp.REVIEWCYCLE = row23.ReviewCycle;
							performanceMetrix_out_tmp.TARGETCOVERED = row23.TargetCovered;
							performanceMetrix_out_tmp.EMPLOYEEID = row23.EmployeeID;
							performanceMetrix_out = performanceMetrix_out_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_5 = false;

						tos_count_tMap_5++;

						/**
						 * [tMap_5 main ] stop
						 */

						/**
						 * [tMap_5 process_data_begin ] start
						 */

						currentComponent = "tMap_5";

						/**
						 * [tMap_5 process_data_begin ] stop
						 */
// Start of branch "performanceMetrix_out"
						if (performanceMetrix_out != null) {

							/**
							 * [tUniqRow_2 main ] start
							 */

							currentComponent = "tUniqRow_2";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "performanceMetrix_out"

								);
							}

							row24 = null;
							finder_tUniqRow_2.PERFORMANCEID = performanceMetrix_out.PERFORMANCEID;
							finder_tUniqRow_2.hashCodeDirty = true;
							if (!keystUniqRow_2.contains(finder_tUniqRow_2)) {
								KeyStruct_tUniqRow_2 new_tUniqRow_2 = new KeyStruct_tUniqRow_2();

								new_tUniqRow_2.PERFORMANCEID = performanceMetrix_out.PERFORMANCEID;

								keystUniqRow_2.add(new_tUniqRow_2);
								if (row24 == null) {

									row24 = new row24Struct();
								}
								row24.PERFORMANCEID = performanceMetrix_out.PERFORMANCEID;
								row24.PERFORMANCERATING = performanceMetrix_out.PERFORMANCERATING;
								row24.REVIEWDATE = performanceMetrix_out.REVIEWDATE;
								row24.REVIEWCYCLE = performanceMetrix_out.REVIEWCYCLE;
								row24.TARGETCOVERED = performanceMetrix_out.TARGETCOVERED;
								row24.EMPLOYEEID = performanceMetrix_out.EMPLOYEEID;
								nb_uniques_tUniqRow_2++;
							} else {
								nb_duplicates_tUniqRow_2++;
							}

							tos_count_tUniqRow_2++;

							/**
							 * [tUniqRow_2 main ] stop
							 */

							/**
							 * [tUniqRow_2 process_data_begin ] start
							 */

							currentComponent = "tUniqRow_2";

							/**
							 * [tUniqRow_2 process_data_begin ] stop
							 */
// Start of branch "row24"
							if (row24 != null) {

								/**
								 * [tDBOutput_5 main ] start
								 */

								currentComponent = "tDBOutput_5";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row24"

									);
								}

								whetherReject_tDBOutput_5 = false;
								if (row24.PERFORMANCEID == null) {
									pstmt_tDBOutput_5.setNull(1, java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_5.setInt(1, row24.PERFORMANCEID);
								}

								if (row24.PERFORMANCERATING == null) {
									pstmt_tDBOutput_5.setNull(2, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_5.setString(2, row24.PERFORMANCERATING);
								}

								if (row24.REVIEWDATE != null) {
									pstmt_tDBOutput_5.setObject(3, new java.sql.Timestamp(row24.REVIEWDATE.getTime()),
											java.sql.Types.DATE);
								} else {
									pstmt_tDBOutput_5.setNull(3, java.sql.Types.DATE);
								}

								if (row24.REVIEWCYCLE == null) {
									pstmt_tDBOutput_5.setNull(4, java.sql.Types.VARCHAR);
								} else {
									pstmt_tDBOutput_5.setString(4, row24.REVIEWCYCLE);
								}

								if (row24.TARGETCOVERED == null) {
									pstmt_tDBOutput_5.setNull(5, java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_5.setInt(5, row24.TARGETCOVERED);
								}

								if (row24.EMPLOYEEID == null) {
									pstmt_tDBOutput_5.setNull(6, java.sql.Types.INTEGER);
								} else {
									pstmt_tDBOutput_5.setInt(6, row24.EMPLOYEEID);
								}

								pstmt_tDBOutput_5.addBatch();
								nb_line_tDBOutput_5++;
								batchSizeCounter_tDBOutput_5++;
								if (batchSize_tDBOutput_5 > 0
										&& batchSize_tDBOutput_5 <= batchSizeCounter_tDBOutput_5) {
									try {
										pstmt_tDBOutput_5.executeBatch();
									} catch (java.sql.BatchUpdateException e_tDBOutput_5) {
										globalMap.put("tDBOutput_5_ERROR_MESSAGE", e_tDBOutput_5.getMessage());
										java.sql.SQLException ne_tDBOutput_5 = e_tDBOutput_5.getNextException(),
												sqle_tDBOutput_5 = null;
										String errormessage_tDBOutput_5;
										if (ne_tDBOutput_5 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_5 = new java.sql.SQLException(
													e_tDBOutput_5.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_5.getMessage(),
													ne_tDBOutput_5.getSQLState(), ne_tDBOutput_5.getErrorCode(),
													ne_tDBOutput_5);
											errormessage_tDBOutput_5 = sqle_tDBOutput_5.getMessage();
										} else {
											errormessage_tDBOutput_5 = e_tDBOutput_5.getMessage();
										}

										System.err.println(errormessage_tDBOutput_5);

									}
									tmp_batchUpdateCount_tDBOutput_5 = pstmt_tDBOutput_5.getUpdateCount();
									insertedCount_tDBOutput_5 += (tmp_batchUpdateCount_tDBOutput_5 != -1
											? tmp_batchUpdateCount_tDBOutput_5
											: 0);
									rowsToCommitCount_tDBOutput_5 += (tmp_batchUpdateCount_tDBOutput_5 != -1
											? tmp_batchUpdateCount_tDBOutput_5
											: 0);
									batchSizeCounter_tDBOutput_5 = 0;
								}
								commitCounter_tDBOutput_5++;
								if (commitEvery_tDBOutput_5 <= commitCounter_tDBOutput_5) {
									if (batchSizeCounter_tDBOutput_5 > 0) {
										try {
											pstmt_tDBOutput_5.executeBatch();
										} catch (java.sql.BatchUpdateException e_tDBOutput_5) {
											globalMap.put("tDBOutput_5_ERROR_MESSAGE", e_tDBOutput_5.getMessage());
											java.sql.SQLException ne_tDBOutput_5 = e_tDBOutput_5.getNextException(),
													sqle_tDBOutput_5 = null;
											String errormessage_tDBOutput_5;
											if (ne_tDBOutput_5 != null) {
												// build new exception to provide the original cause
												sqle_tDBOutput_5 = new java.sql.SQLException(
														e_tDBOutput_5.getMessage() + "\ncaused by: "
																+ ne_tDBOutput_5.getMessage(),
														ne_tDBOutput_5.getSQLState(), ne_tDBOutput_5.getErrorCode(),
														ne_tDBOutput_5);
												errormessage_tDBOutput_5 = sqle_tDBOutput_5.getMessage();
											} else {
												errormessage_tDBOutput_5 = e_tDBOutput_5.getMessage();
											}

											System.err.println(errormessage_tDBOutput_5);

										}
										tmp_batchUpdateCount_tDBOutput_5 = pstmt_tDBOutput_5.getUpdateCount();
										insertedCount_tDBOutput_5 += (tmp_batchUpdateCount_tDBOutput_5 != -1
												? tmp_batchUpdateCount_tDBOutput_5
												: 0);
										rowsToCommitCount_tDBOutput_5 += (tmp_batchUpdateCount_tDBOutput_5 != -1
												? tmp_batchUpdateCount_tDBOutput_5
												: 0);
									}
									if (rowsToCommitCount_tDBOutput_5 != 0) {

									}
									conn_tDBOutput_5.commit();
									if (rowsToCommitCount_tDBOutput_5 != 0) {

										rowsToCommitCount_tDBOutput_5 = 0;
									}
									commitCounter_tDBOutput_5 = 0;
									batchSizeCounter_tDBOutput_5 = 0;
								}

								tos_count_tDBOutput_5++;

								/**
								 * [tDBOutput_5 main ] stop
								 */

								/**
								 * [tDBOutput_5 process_data_begin ] start
								 */

								currentComponent = "tDBOutput_5";

								/**
								 * [tDBOutput_5 process_data_begin ] stop
								 */

								/**
								 * [tDBOutput_5 process_data_end ] start
								 */

								currentComponent = "tDBOutput_5";

								/**
								 * [tDBOutput_5 process_data_end ] stop
								 */

							} // End of branch "row24"

							/**
							 * [tUniqRow_2 process_data_end ] start
							 */

							currentComponent = "tUniqRow_2";

							/**
							 * [tUniqRow_2 process_data_end ] stop
							 */

						} // End of branch "performanceMetrix_out"

						/**
						 * [tMap_5 process_data_end ] start
						 */

						currentComponent = "tMap_5";

						/**
						 * [tMap_5 process_data_end ] stop
						 */

					} // End of branch "row23"

					/**
					 * [tFileInputJSON_1 process_data_end ] start
					 */

					currentComponent = "tFileInputJSON_1";

					/**
					 * [tFileInputJSON_1 process_data_end ] stop
					 */

					/**
					 * [tFileInputJSON_1 end ] start
					 */

					currentComponent = "tFileInputJSON_1";

				}
				globalMap.put("tFileInputJSON_1_NB_LINE", nb_line_tFileInputJSON_1);

				ok_Hash.put("tFileInputJSON_1", true);
				end_Hash.put("tFileInputJSON_1", System.currentTimeMillis());

				/**
				 * [tFileInputJSON_1 end ] stop
				 */

				/**
				 * [tMap_5 end ] start
				 */

				currentComponent = "tMap_5";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row28 != null) {
					tHash_Lookup_row28.endGet();
				}
				globalMap.remove("tHash_Lookup_row28");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row23");
				}

				ok_Hash.put("tMap_5", true);
				end_Hash.put("tMap_5", System.currentTimeMillis());

				/**
				 * [tMap_5 end ] stop
				 */

				/**
				 * [tUniqRow_2 end ] start
				 */

				currentComponent = "tUniqRow_2";

				globalMap.put("tUniqRow_2_NB_UNIQUES", nb_uniques_tUniqRow_2);
				globalMap.put("tUniqRow_2_NB_DUPLICATES", nb_duplicates_tUniqRow_2);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "performanceMetrix_out");
				}

				ok_Hash.put("tUniqRow_2", true);
				end_Hash.put("tUniqRow_2", System.currentTimeMillis());

				/**
				 * [tUniqRow_2 end ] stop
				 */

				/**
				 * [tDBOutput_5 end ] start
				 */

				currentComponent = "tDBOutput_5";

				if (batchSizeCounter_tDBOutput_5 > 0) {
					try {
						if (pstmt_tDBOutput_5 != null) {

							pstmt_tDBOutput_5.executeBatch();

						}
					} catch (java.sql.BatchUpdateException e_tDBOutput_5) {
						globalMap.put("tDBOutput_5_ERROR_MESSAGE", e_tDBOutput_5.getMessage());
						java.sql.SQLException ne_tDBOutput_5 = e_tDBOutput_5.getNextException(),
								sqle_tDBOutput_5 = null;
						String errormessage_tDBOutput_5;
						if (ne_tDBOutput_5 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_5 = new java.sql.SQLException(
									e_tDBOutput_5.getMessage() + "\ncaused by: " + ne_tDBOutput_5.getMessage(),
									ne_tDBOutput_5.getSQLState(), ne_tDBOutput_5.getErrorCode(), ne_tDBOutput_5);
							errormessage_tDBOutput_5 = sqle_tDBOutput_5.getMessage();
						} else {
							errormessage_tDBOutput_5 = e_tDBOutput_5.getMessage();
						}

						System.err.println(errormessage_tDBOutput_5);

					}
					if (pstmt_tDBOutput_5 != null) {
						tmp_batchUpdateCount_tDBOutput_5 = pstmt_tDBOutput_5.getUpdateCount();

						insertedCount_tDBOutput_5

								+= (tmp_batchUpdateCount_tDBOutput_5 != -1 ? tmp_batchUpdateCount_tDBOutput_5 : 0);
						rowsToCommitCount_tDBOutput_5 += (tmp_batchUpdateCount_tDBOutput_5 != -1
								? tmp_batchUpdateCount_tDBOutput_5
								: 0);
					}
				}
				if (pstmt_tDBOutput_5 != null) {

					pstmt_tDBOutput_5.close();
					resourceMap.remove("pstmt_tDBOutput_5");

				}
				resourceMap.put("statementClosed_tDBOutput_5", true);
				if (commitCounter_tDBOutput_5 > 0 && rowsToCommitCount_tDBOutput_5 != 0) {

				}
				conn_tDBOutput_5.commit();
				if (commitCounter_tDBOutput_5 > 0 && rowsToCommitCount_tDBOutput_5 != 0) {

					rowsToCommitCount_tDBOutput_5 = 0;
				}
				commitCounter_tDBOutput_5 = 0;

				conn_tDBOutput_5.close();

				resourceMap.put("finish_tDBOutput_5", true);

				nb_line_deleted_tDBOutput_5 = nb_line_deleted_tDBOutput_5 + deletedCount_tDBOutput_5;
				nb_line_update_tDBOutput_5 = nb_line_update_tDBOutput_5 + updatedCount_tDBOutput_5;
				nb_line_inserted_tDBOutput_5 = nb_line_inserted_tDBOutput_5 + insertedCount_tDBOutput_5;
				nb_line_rejected_tDBOutput_5 = nb_line_rejected_tDBOutput_5 + rejectedCount_tDBOutput_5;

				globalMap.put("tDBOutput_5_NB_LINE", nb_line_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_UPDATED", nb_line_update_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_DELETED", nb_line_deleted_tDBOutput_5);
				globalMap.put("tDBOutput_5_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_5);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row24");
				}

				ok_Hash.put("tDBOutput_5", true);
				end_Hash.put("tDBOutput_5", System.currentTimeMillis());

				/**
				 * [tDBOutput_5 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_5"
			globalMap.remove("tHash_Lookup_row28");

			try {

				/**
				 * [tFileInputJSON_1 finally ] start
				 */

				currentComponent = "tFileInputJSON_1";

				/**
				 * [tFileInputJSON_1 finally ] stop
				 */

				/**
				 * [tMap_5 finally ] start
				 */

				currentComponent = "tMap_5";

				/**
				 * [tMap_5 finally ] stop
				 */

				/**
				 * [tUniqRow_2 finally ] start
				 */

				currentComponent = "tUniqRow_2";

				/**
				 * [tUniqRow_2 finally ] stop
				 */

				/**
				 * [tDBOutput_5 finally ] start
				 */

				currentComponent = "tDBOutput_5";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_5") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_5 = null;
						if ((pstmtToClose_tDBOutput_5 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_5")) != null) {
							pstmtToClose_tDBOutput_5.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_5") == null) {
						java.sql.Connection ctn_tDBOutput_5 = null;
						if ((ctn_tDBOutput_5 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_5")) != null) {
							try {
								ctn_tDBOutput_5.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_5) {
								String errorMessage_tDBOutput_5 = "failed to close the connection in tDBOutput_5 :"
										+ sqlEx_tDBOutput_5.getMessage();
								System.err.println(errorMessage_tDBOutput_5);
							}
						}
					}
				}

				/**
				 * [tDBOutput_5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputJSON_1_SUBPROCESS_STATE", 1);
	}

	public static class row28Struct implements routines.system.IPersistableComparableLookupRow<row28Struct> {
		final static byte[] commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];
		static byte[] commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer EmployeeID;

		public Integer getEmployeeID() {
			return this.EmployeeID;
		}

		public String FirstName;

		public String getFirstName() {
			return this.FirstName;
		}

		public String LastName;

		public String getLastName() {
			return this.LastName;
		}

		public String Department;

		public String getDepartment() {
			return this.Department;
		}

		public String Job_Title;

		public String getJob_Title() {
			return this.Job_Title;
		}

		public java.util.Date Hire_Date;

		public java.util.Date getHire_Date() {
			return this.Hire_Date;
		}

		public Double Salary;

		public Double getSalary() {
			return this.Salary;
		}

		public Character Grade;

		public Character getGrade() {
			return this.Grade;
		}

		public java.util.Date Start_Date;

		public java.util.Date getStart_Date() {
			return this.Start_Date;
		}

		public java.util.Date End_Date;

		public java.util.Date getEnd_Date() {
			return this.End_Date;
		}

		public Boolean Is_Current;

		public Boolean getIs_Current() {
			return this.Is_Current;
		}

		public String Email;

		public String getEmail() {
			return this.Email;
		}

		public String Phone;

		public String getPhone() {
			return this.Phone;
		}

		public String Location;

		public String getLocation() {
			return this.Location;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.EmployeeID == null) ? 0 : this.EmployeeID.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row28Struct other = (row28Struct) obj;

			if (this.EmployeeID == null) {
				if (other.EmployeeID != null)
					return false;

			} else if (!this.EmployeeID.equals(other.EmployeeID))

				return false;

			return true;
		}

		public void copyDataTo(row28Struct other) {

			other.EmployeeID = this.EmployeeID;
			other.FirstName = this.FirstName;
			other.LastName = this.LastName;
			other.Department = this.Department;
			other.Job_Title = this.Job_Title;
			other.Hire_Date = this.Hire_Date;
			other.Salary = this.Salary;
			other.Grade = this.Grade;
			other.Start_Date = this.Start_Date;
			other.End_Date = this.End_Date;
			other.Is_Current = this.Is_Current;
			other.Email = this.Email;
			other.Phone = this.Phone;
			other.Location = this.Location;

		}

		public void copyKeysDataTo(row28Struct other) {

			other.EmployeeID = this.EmployeeID;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				unmarshaller.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.EmployeeID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.EmployeeID = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.EmployeeID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.EmployeeID, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.FirstName = readString(dis, ois);

				this.LastName = readString(dis, ois);

				this.Department = readString(dis, ois);

				this.Job_Title = readString(dis, ois);

				this.Hire_Date = readDate(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.Salary = null;
				} else {
					this.Salary = dis.readDouble();
				}

				length = dis.readByte();
				if (length == -1) {
					this.Grade = null;
				} else {
					this.Grade = dis.readChar();
				}

				this.Start_Date = readDate(dis, ois);

				this.End_Date = readDate(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.Is_Current = null;
				} else {
					this.Is_Current = dis.readBoolean();
				}

				this.Email = readString(dis, ois);

				this.Phone = readString(dis, ois);

				this.Location = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
			try {
				int length = 0;

				this.FirstName = readString(dis, objectIn);

				this.LastName = readString(dis, objectIn);

				this.Department = readString(dis, objectIn);

				this.Job_Title = readString(dis, objectIn);

				this.Hire_Date = readDate(dis, objectIn);

				length = objectIn.readByte();
				if (length == -1) {
					this.Salary = null;
				} else {
					this.Salary = objectIn.readDouble();
				}

				length = objectIn.readByte();
				if (length == -1) {
					this.Grade = null;
				} else {
					this.Grade = objectIn.readChar();
				}

				this.Start_Date = readDate(dis, objectIn);

				this.End_Date = readDate(dis, objectIn);

				length = objectIn.readByte();
				if (length == -1) {
					this.Is_Current = null;
				} else {
					this.Is_Current = objectIn.readBoolean();
				}

				this.Email = readString(dis, objectIn);

				this.Phone = readString(dis, objectIn);

				this.Location = readString(dis, objectIn);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.FirstName, dos, oos);

				writeString(this.LastName, dos, oos);

				writeString(this.Department, dos, oos);

				writeString(this.Job_Title, dos, oos);

				writeDate(this.Hire_Date, dos, oos);

				if (this.Salary == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Salary);
				}

				if (this.Grade == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Grade);
				}

				writeDate(this.Start_Date, dos, oos);

				writeDate(this.End_Date, dos, oos);

				if (this.Is_Current == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.Is_Current);
				}

				writeString(this.Email, dos, oos);

				writeString(this.Phone, dos, oos);

				writeString(this.Location, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut) {
			try {

				writeString(this.FirstName, dos, objectOut);

				writeString(this.LastName, dos, objectOut);

				writeString(this.Department, dos, objectOut);

				writeString(this.Job_Title, dos, objectOut);

				writeDate(this.Hire_Date, dos, objectOut);

				if (this.Salary == null) {
					objectOut.writeByte(-1);
				} else {
					objectOut.writeByte(0);
					objectOut.writeDouble(this.Salary);
				}

				if (this.Grade == null) {
					objectOut.writeByte(-1);
				} else {
					objectOut.writeByte(0);
					objectOut.writeChar(this.Grade);
				}

				writeDate(this.Start_Date, dos, objectOut);

				writeDate(this.End_Date, dos, objectOut);

				if (this.Is_Current == null) {
					objectOut.writeByte(-1);
				} else {
					objectOut.writeByte(0);
					objectOut.writeBoolean(this.Is_Current);
				}

				writeString(this.Email, dos, objectOut);

				writeString(this.Phone, dos, objectOut);

				writeString(this.Location, dos, objectOut);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}

		public boolean supportMarshaller() {
			return true;
		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("EmployeeID=" + String.valueOf(EmployeeID));
			sb.append(",FirstName=" + FirstName);
			sb.append(",LastName=" + LastName);
			sb.append(",Department=" + Department);
			sb.append(",Job_Title=" + Job_Title);
			sb.append(",Hire_Date=" + String.valueOf(Hire_Date));
			sb.append(",Salary=" + String.valueOf(Salary));
			sb.append(",Grade=" + String.valueOf(Grade));
			sb.append(",Start_Date=" + String.valueOf(Start_Date));
			sb.append(",End_Date=" + String.valueOf(End_Date));
			sb.append(",Is_Current=" + String.valueOf(Is_Current));
			sb.append(",Email=" + Email);
			sb.append(",Phone=" + Phone);
			sb.append(",Location=" + Location);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row28Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.EmployeeID, other.EmployeeID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputJSON_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputJSON_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row28Struct row28 = new row28Struct();

				/**
				 * [tAdvancedHash_row28 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row28", false);
				start_Hash.put("tAdvancedHash_row28", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row28";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row28");
				}

				int tos_count_tAdvancedHash_row28 = 0;

				// connection name:row28
				// source node:tFileInputJSON_2 - inputs:(after_tFileInputJSON_1)
				// outputs:(row28,row28) | target node:tAdvancedHash_row28 - inputs:(row28)
				// outputs:()
				// linked node: tMap_5 - inputs:(row23,row28) outputs:(performanceMetrix_out)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row28 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row28Struct> tHash_Lookup_row28 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row28Struct>getLookup(matchingModeEnum_row28);

				globalMap.put("tHash_Lookup_row28", tHash_Lookup_row28);

				/**
				 * [tAdvancedHash_row28 begin ] stop
				 */

				/**
				 * [tFileInputJSON_2 begin ] start
				 */

				ok_Hash.put("tFileInputJSON_2", false);
				start_Hash.put("tFileInputJSON_2", System.currentTimeMillis());

				currentComponent = "tFileInputJSON_2";

				int tos_count_tFileInputJSON_2 = 0;

				class JsonPathCache_tFileInputJSON_2 {
					final java.util.Map<String, com.jayway.jsonpath.JsonPath> jsonPathString2compiledJsonPath = new java.util.HashMap<String, com.jayway.jsonpath.JsonPath>();

					public com.jayway.jsonpath.JsonPath getCompiledJsonPath(String jsonPath) {
						if (jsonPathString2compiledJsonPath.containsKey(jsonPath)) {
							return jsonPathString2compiledJsonPath.get(jsonPath);
						} else {
							com.jayway.jsonpath.JsonPath compiledLoopPath = com.jayway.jsonpath.JsonPath
									.compile(jsonPath);
							jsonPathString2compiledJsonPath.put(jsonPath, compiledLoopPath);
							return compiledLoopPath;
						}
					}
				}

				int nb_line_tFileInputJSON_2 = 0;

				JsonPathCache_tFileInputJSON_2 jsonPathCache_tFileInputJSON_2 = new JsonPathCache_tFileInputJSON_2();

				String loopPath_tFileInputJSON_2 = "$[*]";
				java.util.List<Object> resultset_tFileInputJSON_2 = new java.util.ArrayList<Object>();

				java.io.InputStream is_tFileInputJSON_2 = null;
				com.jayway.jsonpath.ParseContext parseContext_tFileInputJSON_2 = com.jayway.jsonpath.JsonPath
						.using(com.jayway.jsonpath.Configuration.defaultConfiguration());
				Object filenameOrStream_tFileInputJSON_2 = null;
				try {
					filenameOrStream_tFileInputJSON_2 = "D:/NIBM/Degree/HND/DWBI/courseWk/sachitha_query/Dim_EmployeeInfo.json";
				} catch (java.lang.Exception e_tFileInputJSON_2) {
					globalMap.put("tFileInputJSON_2_ERROR_MESSAGE", e_tFileInputJSON_2.getMessage());

					globalMap.put("tFileInputJSON_2_ERROR_MESSAGE", e_tFileInputJSON_2.getMessage());
					System.err.println(e_tFileInputJSON_2.getMessage());
				}

				com.jayway.jsonpath.ReadContext document_tFileInputJSON_2 = null;
				try {
					if (filenameOrStream_tFileInputJSON_2 instanceof java.io.InputStream) {
						is_tFileInputJSON_2 = (java.io.InputStream) filenameOrStream_tFileInputJSON_2;
					} else {

						is_tFileInputJSON_2 = new java.io.FileInputStream((String) filenameOrStream_tFileInputJSON_2);

					}

					document_tFileInputJSON_2 = parseContext_tFileInputJSON_2.parse(is_tFileInputJSON_2, "UTF-8");
					com.jayway.jsonpath.JsonPath compiledLoopPath_tFileInputJSON_2 = jsonPathCache_tFileInputJSON_2
							.getCompiledJsonPath(loopPath_tFileInputJSON_2);
					Object result_tFileInputJSON_2 = document_tFileInputJSON_2.read(compiledLoopPath_tFileInputJSON_2,
							net.minidev.json.JSONObject.class);
					if (result_tFileInputJSON_2 instanceof net.minidev.json.JSONArray) {
						resultset_tFileInputJSON_2 = (net.minidev.json.JSONArray) result_tFileInputJSON_2;
					} else {
						resultset_tFileInputJSON_2.add(result_tFileInputJSON_2);
					}
				} catch (java.lang.Exception e_tFileInputJSON_2) {
					globalMap.put("tFileInputJSON_2_ERROR_MESSAGE", e_tFileInputJSON_2.getMessage());
					globalMap.put("tFileInputJSON_2_ERROR_MESSAGE", e_tFileInputJSON_2.getMessage());
					System.err.println(e_tFileInputJSON_2.getMessage());
				} finally {
					if (is_tFileInputJSON_2 != null) {
						is_tFileInputJSON_2.close();
					}
				}

				String jsonPath_tFileInputJSON_2 = null;
				com.jayway.jsonpath.JsonPath compiledJsonPath_tFileInputJSON_2 = null;

				Object value_tFileInputJSON_2 = null;
				Object root_tFileInputJSON_2 = null;
				for (Object row_tFileInputJSON_2 : resultset_tFileInputJSON_2) {
					nb_line_tFileInputJSON_2++;
					row28 = null;
					row28 = null;
					boolean whetherReject_tFileInputJSON_2 = false;
					row28 = new row28Struct();

					try {
						jsonPath_tFileInputJSON_2 = "EmployeeID";
						compiledJsonPath_tFileInputJSON_2 = jsonPathCache_tFileInputJSON_2
								.getCompiledJsonPath(jsonPath_tFileInputJSON_2);

						try {

							if (jsonPath_tFileInputJSON_2.startsWith("$")) {
								if (root_tFileInputJSON_2 == null) {
									root_tFileInputJSON_2 = document_tFileInputJSON_2
											.read(jsonPathCache_tFileInputJSON_2.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_2 = compiledJsonPath_tFileInputJSON_2.read(root_tFileInputJSON_2);
							} else {
								value_tFileInputJSON_2 = compiledJsonPath_tFileInputJSON_2.read(row_tFileInputJSON_2);
							}
							if (value_tFileInputJSON_2 != null && !value_tFileInputJSON_2.toString().isEmpty()) {
								row28.EmployeeID = ParserUtils.parseTo_Integer(value_tFileInputJSON_2.toString());
							} else {
								row28.EmployeeID =

										null;
							}
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_2) {
							globalMap.put("tFileInputJSON_2_ERROR_MESSAGE", e_tFileInputJSON_2.getMessage());
							row28.EmployeeID =

									null;
						}
						jsonPath_tFileInputJSON_2 = "FirstName";
						compiledJsonPath_tFileInputJSON_2 = jsonPathCache_tFileInputJSON_2
								.getCompiledJsonPath(jsonPath_tFileInputJSON_2);

						try {

							if (jsonPath_tFileInputJSON_2.startsWith("$")) {
								if (root_tFileInputJSON_2 == null) {
									root_tFileInputJSON_2 = document_tFileInputJSON_2
											.read(jsonPathCache_tFileInputJSON_2.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_2 = compiledJsonPath_tFileInputJSON_2.read(root_tFileInputJSON_2);
							} else {
								value_tFileInputJSON_2 = compiledJsonPath_tFileInputJSON_2.read(row_tFileInputJSON_2);
							}
							row28.FirstName = value_tFileInputJSON_2 == null ?

									null : value_tFileInputJSON_2.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_2) {
							globalMap.put("tFileInputJSON_2_ERROR_MESSAGE", e_tFileInputJSON_2.getMessage());
							row28.FirstName =

									null;
						}
						jsonPath_tFileInputJSON_2 = "LastName";
						compiledJsonPath_tFileInputJSON_2 = jsonPathCache_tFileInputJSON_2
								.getCompiledJsonPath(jsonPath_tFileInputJSON_2);

						try {

							if (jsonPath_tFileInputJSON_2.startsWith("$")) {
								if (root_tFileInputJSON_2 == null) {
									root_tFileInputJSON_2 = document_tFileInputJSON_2
											.read(jsonPathCache_tFileInputJSON_2.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_2 = compiledJsonPath_tFileInputJSON_2.read(root_tFileInputJSON_2);
							} else {
								value_tFileInputJSON_2 = compiledJsonPath_tFileInputJSON_2.read(row_tFileInputJSON_2);
							}
							row28.LastName = value_tFileInputJSON_2 == null ?

									null : value_tFileInputJSON_2.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_2) {
							globalMap.put("tFileInputJSON_2_ERROR_MESSAGE", e_tFileInputJSON_2.getMessage());
							row28.LastName =

									null;
						}
						jsonPath_tFileInputJSON_2 = "Department";
						compiledJsonPath_tFileInputJSON_2 = jsonPathCache_tFileInputJSON_2
								.getCompiledJsonPath(jsonPath_tFileInputJSON_2);

						try {

							if (jsonPath_tFileInputJSON_2.startsWith("$")) {
								if (root_tFileInputJSON_2 == null) {
									root_tFileInputJSON_2 = document_tFileInputJSON_2
											.read(jsonPathCache_tFileInputJSON_2.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_2 = compiledJsonPath_tFileInputJSON_2.read(root_tFileInputJSON_2);
							} else {
								value_tFileInputJSON_2 = compiledJsonPath_tFileInputJSON_2.read(row_tFileInputJSON_2);
							}
							row28.Department = value_tFileInputJSON_2 == null ?

									null : value_tFileInputJSON_2.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_2) {
							globalMap.put("tFileInputJSON_2_ERROR_MESSAGE", e_tFileInputJSON_2.getMessage());
							row28.Department =

									null;
						}
						jsonPath_tFileInputJSON_2 = "Job_Title";
						compiledJsonPath_tFileInputJSON_2 = jsonPathCache_tFileInputJSON_2
								.getCompiledJsonPath(jsonPath_tFileInputJSON_2);

						try {

							if (jsonPath_tFileInputJSON_2.startsWith("$")) {
								if (root_tFileInputJSON_2 == null) {
									root_tFileInputJSON_2 = document_tFileInputJSON_2
											.read(jsonPathCache_tFileInputJSON_2.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_2 = compiledJsonPath_tFileInputJSON_2.read(root_tFileInputJSON_2);
							} else {
								value_tFileInputJSON_2 = compiledJsonPath_tFileInputJSON_2.read(row_tFileInputJSON_2);
							}
							row28.Job_Title = value_tFileInputJSON_2 == null ?

									null : value_tFileInputJSON_2.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_2) {
							globalMap.put("tFileInputJSON_2_ERROR_MESSAGE", e_tFileInputJSON_2.getMessage());
							row28.Job_Title =

									null;
						}
						jsonPath_tFileInputJSON_2 = "Hire_Date";
						compiledJsonPath_tFileInputJSON_2 = jsonPathCache_tFileInputJSON_2
								.getCompiledJsonPath(jsonPath_tFileInputJSON_2);

						try {

							if (jsonPath_tFileInputJSON_2.startsWith("$")) {
								if (root_tFileInputJSON_2 == null) {
									root_tFileInputJSON_2 = document_tFileInputJSON_2
											.read(jsonPathCache_tFileInputJSON_2.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_2 = compiledJsonPath_tFileInputJSON_2.read(root_tFileInputJSON_2);
							} else {
								value_tFileInputJSON_2 = compiledJsonPath_tFileInputJSON_2.read(row_tFileInputJSON_2);
							}
							if (value_tFileInputJSON_2 != null && !value_tFileInputJSON_2.toString().isEmpty()) {
								row28.Hire_Date = ParserUtils.parseTo_Date(value_tFileInputJSON_2.toString(),
										"dd-MM-yyyy");
							} else {
								row28.Hire_Date =

										null;
							}
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_2) {
							globalMap.put("tFileInputJSON_2_ERROR_MESSAGE", e_tFileInputJSON_2.getMessage());
							row28.Hire_Date =

									null;
						}
						jsonPath_tFileInputJSON_2 = "Salary";
						compiledJsonPath_tFileInputJSON_2 = jsonPathCache_tFileInputJSON_2
								.getCompiledJsonPath(jsonPath_tFileInputJSON_2);

						try {

							if (jsonPath_tFileInputJSON_2.startsWith("$")) {
								if (root_tFileInputJSON_2 == null) {
									root_tFileInputJSON_2 = document_tFileInputJSON_2
											.read(jsonPathCache_tFileInputJSON_2.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_2 = compiledJsonPath_tFileInputJSON_2.read(root_tFileInputJSON_2);
							} else {
								value_tFileInputJSON_2 = compiledJsonPath_tFileInputJSON_2.read(row_tFileInputJSON_2);
							}
							if (value_tFileInputJSON_2 != null && !value_tFileInputJSON_2.toString().isEmpty()) {
								row28.Salary = ParserUtils.parseTo_Double(value_tFileInputJSON_2.toString());
							} else {
								row28.Salary =

										null;
							}
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_2) {
							globalMap.put("tFileInputJSON_2_ERROR_MESSAGE", e_tFileInputJSON_2.getMessage());
							row28.Salary =

									null;
						}
						jsonPath_tFileInputJSON_2 = "Grade";
						compiledJsonPath_tFileInputJSON_2 = jsonPathCache_tFileInputJSON_2
								.getCompiledJsonPath(jsonPath_tFileInputJSON_2);

						try {

							if (jsonPath_tFileInputJSON_2.startsWith("$")) {
								if (root_tFileInputJSON_2 == null) {
									root_tFileInputJSON_2 = document_tFileInputJSON_2
											.read(jsonPathCache_tFileInputJSON_2.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_2 = compiledJsonPath_tFileInputJSON_2.read(root_tFileInputJSON_2);
							} else {
								value_tFileInputJSON_2 = compiledJsonPath_tFileInputJSON_2.read(row_tFileInputJSON_2);
							}
							if (value_tFileInputJSON_2 != null && !value_tFileInputJSON_2.toString().isEmpty()) {
								row28.Grade = ParserUtils.parseTo_Character(value_tFileInputJSON_2.toString());
							} else {
								row28.Grade =

										null;
							}
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_2) {
							globalMap.put("tFileInputJSON_2_ERROR_MESSAGE", e_tFileInputJSON_2.getMessage());
							row28.Grade =

									null;
						}
						jsonPath_tFileInputJSON_2 = "Start_Date";
						compiledJsonPath_tFileInputJSON_2 = jsonPathCache_tFileInputJSON_2
								.getCompiledJsonPath(jsonPath_tFileInputJSON_2);

						try {

							if (jsonPath_tFileInputJSON_2.startsWith("$")) {
								if (root_tFileInputJSON_2 == null) {
									root_tFileInputJSON_2 = document_tFileInputJSON_2
											.read(jsonPathCache_tFileInputJSON_2.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_2 = compiledJsonPath_tFileInputJSON_2.read(root_tFileInputJSON_2);
							} else {
								value_tFileInputJSON_2 = compiledJsonPath_tFileInputJSON_2.read(row_tFileInputJSON_2);
							}
							if (value_tFileInputJSON_2 != null && !value_tFileInputJSON_2.toString().isEmpty()) {
								row28.Start_Date = ParserUtils.parseTo_Date(value_tFileInputJSON_2.toString(),
										"dd-MM-yyyy");
							} else {
								row28.Start_Date =

										null;
							}
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_2) {
							globalMap.put("tFileInputJSON_2_ERROR_MESSAGE", e_tFileInputJSON_2.getMessage());
							row28.Start_Date =

									null;
						}
						jsonPath_tFileInputJSON_2 = "End_Date";
						compiledJsonPath_tFileInputJSON_2 = jsonPathCache_tFileInputJSON_2
								.getCompiledJsonPath(jsonPath_tFileInputJSON_2);

						try {

							if (jsonPath_tFileInputJSON_2.startsWith("$")) {
								if (root_tFileInputJSON_2 == null) {
									root_tFileInputJSON_2 = document_tFileInputJSON_2
											.read(jsonPathCache_tFileInputJSON_2.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_2 = compiledJsonPath_tFileInputJSON_2.read(root_tFileInputJSON_2);
							} else {
								value_tFileInputJSON_2 = compiledJsonPath_tFileInputJSON_2.read(row_tFileInputJSON_2);
							}
							if (value_tFileInputJSON_2 != null && !value_tFileInputJSON_2.toString().isEmpty()) {
								row28.End_Date = ParserUtils.parseTo_Date(value_tFileInputJSON_2.toString(),
										"dd-MM-yyyy");
							} else {
								row28.End_Date =

										null;
							}
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_2) {
							globalMap.put("tFileInputJSON_2_ERROR_MESSAGE", e_tFileInputJSON_2.getMessage());
							row28.End_Date =

									null;
						}
						jsonPath_tFileInputJSON_2 = "Is_Current";
						compiledJsonPath_tFileInputJSON_2 = jsonPathCache_tFileInputJSON_2
								.getCompiledJsonPath(jsonPath_tFileInputJSON_2);

						try {

							if (jsonPath_tFileInputJSON_2.startsWith("$")) {
								if (root_tFileInputJSON_2 == null) {
									root_tFileInputJSON_2 = document_tFileInputJSON_2
											.read(jsonPathCache_tFileInputJSON_2.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_2 = compiledJsonPath_tFileInputJSON_2.read(root_tFileInputJSON_2);
							} else {
								value_tFileInputJSON_2 = compiledJsonPath_tFileInputJSON_2.read(row_tFileInputJSON_2);
							}
							if (value_tFileInputJSON_2 != null && !value_tFileInputJSON_2.toString().isEmpty()) {
								row28.Is_Current = ParserUtils.parseTo_Boolean(value_tFileInputJSON_2.toString());
							} else {
								row28.Is_Current =

										null;
							}
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_2) {
							globalMap.put("tFileInputJSON_2_ERROR_MESSAGE", e_tFileInputJSON_2.getMessage());
							row28.Is_Current =

									null;
						}
						jsonPath_tFileInputJSON_2 = "Email";
						compiledJsonPath_tFileInputJSON_2 = jsonPathCache_tFileInputJSON_2
								.getCompiledJsonPath(jsonPath_tFileInputJSON_2);

						try {

							if (jsonPath_tFileInputJSON_2.startsWith("$")) {
								if (root_tFileInputJSON_2 == null) {
									root_tFileInputJSON_2 = document_tFileInputJSON_2
											.read(jsonPathCache_tFileInputJSON_2.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_2 = compiledJsonPath_tFileInputJSON_2.read(root_tFileInputJSON_2);
							} else {
								value_tFileInputJSON_2 = compiledJsonPath_tFileInputJSON_2.read(row_tFileInputJSON_2);
							}
							row28.Email = value_tFileInputJSON_2 == null ?

									null : value_tFileInputJSON_2.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_2) {
							globalMap.put("tFileInputJSON_2_ERROR_MESSAGE", e_tFileInputJSON_2.getMessage());
							row28.Email =

									null;
						}
						jsonPath_tFileInputJSON_2 = "Phone";
						compiledJsonPath_tFileInputJSON_2 = jsonPathCache_tFileInputJSON_2
								.getCompiledJsonPath(jsonPath_tFileInputJSON_2);

						try {

							if (jsonPath_tFileInputJSON_2.startsWith("$")) {
								if (root_tFileInputJSON_2 == null) {
									root_tFileInputJSON_2 = document_tFileInputJSON_2
											.read(jsonPathCache_tFileInputJSON_2.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_2 = compiledJsonPath_tFileInputJSON_2.read(root_tFileInputJSON_2);
							} else {
								value_tFileInputJSON_2 = compiledJsonPath_tFileInputJSON_2.read(row_tFileInputJSON_2);
							}
							row28.Phone = value_tFileInputJSON_2 == null ?

									null : value_tFileInputJSON_2.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_2) {
							globalMap.put("tFileInputJSON_2_ERROR_MESSAGE", e_tFileInputJSON_2.getMessage());
							row28.Phone =

									null;
						}
						jsonPath_tFileInputJSON_2 = "Location";
						compiledJsonPath_tFileInputJSON_2 = jsonPathCache_tFileInputJSON_2
								.getCompiledJsonPath(jsonPath_tFileInputJSON_2);

						try {

							if (jsonPath_tFileInputJSON_2.startsWith("$")) {
								if (root_tFileInputJSON_2 == null) {
									root_tFileInputJSON_2 = document_tFileInputJSON_2
											.read(jsonPathCache_tFileInputJSON_2.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_2 = compiledJsonPath_tFileInputJSON_2.read(root_tFileInputJSON_2);
							} else {
								value_tFileInputJSON_2 = compiledJsonPath_tFileInputJSON_2.read(row_tFileInputJSON_2);
							}
							row28.Location = value_tFileInputJSON_2 == null ?

									null : value_tFileInputJSON_2.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_2) {
							globalMap.put("tFileInputJSON_2_ERROR_MESSAGE", e_tFileInputJSON_2.getMessage());
							row28.Location =

									null;
						}
					} catch (java.lang.Exception e_tFileInputJSON_2) {
						globalMap.put("tFileInputJSON_2_ERROR_MESSAGE", e_tFileInputJSON_2.getMessage());
						whetherReject_tFileInputJSON_2 = true;
						System.err.println(e_tFileInputJSON_2.getMessage());
						row28 = null;
						globalMap.put("tFileInputJSON_2_ERROR_MESSAGE", e_tFileInputJSON_2.getMessage());
					}
//}

					/**
					 * [tFileInputJSON_2 begin ] stop
					 */

					/**
					 * [tFileInputJSON_2 main ] start
					 */

					currentComponent = "tFileInputJSON_2";

					tos_count_tFileInputJSON_2++;

					/**
					 * [tFileInputJSON_2 main ] stop
					 */

					/**
					 * [tFileInputJSON_2 process_data_begin ] start
					 */

					currentComponent = "tFileInputJSON_2";

					/**
					 * [tFileInputJSON_2 process_data_begin ] stop
					 */
// Start of branch "row28"
					if (row28 != null) {

						/**
						 * [tAdvancedHash_row28 main ] start
						 */

						currentComponent = "tAdvancedHash_row28";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row28"

							);
						}

						row28Struct row28_HashRow = new row28Struct();

						row28_HashRow.EmployeeID = row28.EmployeeID;

						row28_HashRow.FirstName = row28.FirstName;

						row28_HashRow.LastName = row28.LastName;

						row28_HashRow.Department = row28.Department;

						row28_HashRow.Job_Title = row28.Job_Title;

						row28_HashRow.Hire_Date = row28.Hire_Date;

						row28_HashRow.Salary = row28.Salary;

						row28_HashRow.Grade = row28.Grade;

						row28_HashRow.Start_Date = row28.Start_Date;

						row28_HashRow.End_Date = row28.End_Date;

						row28_HashRow.Is_Current = row28.Is_Current;

						row28_HashRow.Email = row28.Email;

						row28_HashRow.Phone = row28.Phone;

						row28_HashRow.Location = row28.Location;

						tHash_Lookup_row28.put(row28_HashRow);

						tos_count_tAdvancedHash_row28++;

						/**
						 * [tAdvancedHash_row28 main ] stop
						 */

						/**
						 * [tAdvancedHash_row28 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row28";

						/**
						 * [tAdvancedHash_row28 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row28 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row28";

						/**
						 * [tAdvancedHash_row28 process_data_end ] stop
						 */

					} // End of branch "row28"

					/**
					 * [tFileInputJSON_2 process_data_end ] start
					 */

					currentComponent = "tFileInputJSON_2";

					/**
					 * [tFileInputJSON_2 process_data_end ] stop
					 */

					/**
					 * [tFileInputJSON_2 end ] start
					 */

					currentComponent = "tFileInputJSON_2";

				}
				globalMap.put("tFileInputJSON_2_NB_LINE", nb_line_tFileInputJSON_2);

				ok_Hash.put("tFileInputJSON_2", true);
				end_Hash.put("tFileInputJSON_2", System.currentTimeMillis());

				/**
				 * [tFileInputJSON_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_row28 end ] start
				 */

				currentComponent = "tAdvancedHash_row28";

				tHash_Lookup_row28.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row28");
				}

				ok_Hash.put("tAdvancedHash_row28", true);
				end_Hash.put("tAdvancedHash_row28", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row28 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputJSON_2 finally ] start
				 */

				currentComponent = "tFileInputJSON_2";

				/**
				 * [tFileInputJSON_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row28 finally ] start
				 */

				currentComponent = "tAdvancedHash_row28";

				/**
				 * [tAdvancedHash_row28 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputJSON_2_SUBPROCESS_STATE", 1);
	}

	public static class row18Struct implements routines.system.IPersistableRow<row18Struct> {
		final static byte[] commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];
		static byte[] commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];

		public Integer EMPLOYEEID;

		public Integer getEMPLOYEEID() {
			return this.EMPLOYEEID;
		}

		public String FIRST_NAME;

		public String getFIRST_NAME() {
			return this.FIRST_NAME;
		}

		public String LAST_NAME;

		public String getLAST_NAME() {
			return this.LAST_NAME;
		}

		public String DEPARTMENT;

		public String getDEPARTMENT() {
			return this.DEPARTMENT;
		}

		public String JOB_TITLE;

		public String getJOB_TITLE() {
			return this.JOB_TITLE;
		}

		public java.util.Date HIRE_DATE;

		public java.util.Date getHIRE_DATE() {
			return this.HIRE_DATE;
		}

		public Character SALARY_GRADE;

		public Character getSALARY_GRADE() {
			return this.SALARY_GRADE;
		}

		public java.util.Date START_DATE;

		public java.util.Date getSTART_DATE() {
			return this.START_DATE;
		}

		public java.util.Date END_DATE;

		public java.util.Date getEND_DATE() {
			return this.END_DATE;
		}

		public Boolean IS_CURRENT;

		public Boolean getIS_CURRENT() {
			return this.IS_CURRENT;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length) {
					if (length < 1024 && commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length == 0) {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[1024];
					} else {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length);
				strReturn = new String(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length) {
					if (length < 1024 && commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length == 0) {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[1024];
					} else {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length);
				strReturn = new String(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.EMPLOYEEID = readInteger(dis);

					this.FIRST_NAME = readString(dis);

					this.LAST_NAME = readString(dis);

					this.DEPARTMENT = readString(dis);

					this.JOB_TITLE = readString(dis);

					this.HIRE_DATE = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.SALARY_GRADE = null;
					} else {
						this.SALARY_GRADE = dis.readChar();
					}

					this.START_DATE = readDate(dis);

					this.END_DATE = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IS_CURRENT = null;
					} else {
						this.IS_CURRENT = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.EMPLOYEEID = readInteger(dis);

					this.FIRST_NAME = readString(dis);

					this.LAST_NAME = readString(dis);

					this.DEPARTMENT = readString(dis);

					this.JOB_TITLE = readString(dis);

					this.HIRE_DATE = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.SALARY_GRADE = null;
					} else {
						this.SALARY_GRADE = dis.readChar();
					}

					this.START_DATE = readDate(dis);

					this.END_DATE = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IS_CURRENT = null;
					} else {
						this.IS_CURRENT = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.EMPLOYEEID, dos);

				// String

				writeString(this.FIRST_NAME, dos);

				// String

				writeString(this.LAST_NAME, dos);

				// String

				writeString(this.DEPARTMENT, dos);

				// String

				writeString(this.JOB_TITLE, dos);

				// java.util.Date

				writeDate(this.HIRE_DATE, dos);

				// Character

				if (this.SALARY_GRADE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.SALARY_GRADE);
				}

				// java.util.Date

				writeDate(this.START_DATE, dos);

				// java.util.Date

				writeDate(this.END_DATE, dos);

				// Boolean

				if (this.IS_CURRENT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.IS_CURRENT);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.EMPLOYEEID, dos);

				// String

				writeString(this.FIRST_NAME, dos);

				// String

				writeString(this.LAST_NAME, dos);

				// String

				writeString(this.DEPARTMENT, dos);

				// String

				writeString(this.JOB_TITLE, dos);

				// java.util.Date

				writeDate(this.HIRE_DATE, dos);

				// Character

				if (this.SALARY_GRADE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.SALARY_GRADE);
				}

				// java.util.Date

				writeDate(this.START_DATE, dos);

				// java.util.Date

				writeDate(this.END_DATE, dos);

				// Boolean

				if (this.IS_CURRENT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.IS_CURRENT);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("EMPLOYEEID=" + String.valueOf(EMPLOYEEID));
			sb.append(",FIRST_NAME=" + FIRST_NAME);
			sb.append(",LAST_NAME=" + LAST_NAME);
			sb.append(",DEPARTMENT=" + DEPARTMENT);
			sb.append(",JOB_TITLE=" + JOB_TITLE);
			sb.append(",HIRE_DATE=" + String.valueOf(HIRE_DATE));
			sb.append(",SALARY_GRADE=" + String.valueOf(SALARY_GRADE));
			sb.append(",START_DATE=" + String.valueOf(START_DATE));
			sb.append(",END_DATE=" + String.valueOf(END_DATE));
			sb.append(",IS_CURRENT=" + String.valueOf(IS_CURRENT));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row18Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfemployeeInfo_outStruct
			implements routines.system.IPersistableRow<copyOfemployeeInfo_outStruct> {
		final static byte[] commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];
		static byte[] commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];

		public Integer EMPLOYEEID;

		public Integer getEMPLOYEEID() {
			return this.EMPLOYEEID;
		}

		public String FIRST_NAME;

		public String getFIRST_NAME() {
			return this.FIRST_NAME;
		}

		public String LAST_NAME;

		public String getLAST_NAME() {
			return this.LAST_NAME;
		}

		public String DEPARTMENT;

		public String getDEPARTMENT() {
			return this.DEPARTMENT;
		}

		public String JOB_TITLE;

		public String getJOB_TITLE() {
			return this.JOB_TITLE;
		}

		public java.util.Date HIRE_DATE;

		public java.util.Date getHIRE_DATE() {
			return this.HIRE_DATE;
		}

		public Character SALARY_GRADE;

		public Character getSALARY_GRADE() {
			return this.SALARY_GRADE;
		}

		public java.util.Date START_DATE;

		public java.util.Date getSTART_DATE() {
			return this.START_DATE;
		}

		public java.util.Date END_DATE;

		public java.util.Date getEND_DATE() {
			return this.END_DATE;
		}

		public Boolean IS_CURRENT;

		public Boolean getIS_CURRENT() {
			return this.IS_CURRENT;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length) {
					if (length < 1024 && commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length == 0) {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[1024];
					} else {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length);
				strReturn = new String(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length) {
					if (length < 1024 && commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length == 0) {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[1024];
					} else {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length);
				strReturn = new String(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.EMPLOYEEID = readInteger(dis);

					this.FIRST_NAME = readString(dis);

					this.LAST_NAME = readString(dis);

					this.DEPARTMENT = readString(dis);

					this.JOB_TITLE = readString(dis);

					this.HIRE_DATE = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.SALARY_GRADE = null;
					} else {
						this.SALARY_GRADE = dis.readChar();
					}

					this.START_DATE = readDate(dis);

					this.END_DATE = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IS_CURRENT = null;
					} else {
						this.IS_CURRENT = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.EMPLOYEEID = readInteger(dis);

					this.FIRST_NAME = readString(dis);

					this.LAST_NAME = readString(dis);

					this.DEPARTMENT = readString(dis);

					this.JOB_TITLE = readString(dis);

					this.HIRE_DATE = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.SALARY_GRADE = null;
					} else {
						this.SALARY_GRADE = dis.readChar();
					}

					this.START_DATE = readDate(dis);

					this.END_DATE = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.IS_CURRENT = null;
					} else {
						this.IS_CURRENT = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.EMPLOYEEID, dos);

				// String

				writeString(this.FIRST_NAME, dos);

				// String

				writeString(this.LAST_NAME, dos);

				// String

				writeString(this.DEPARTMENT, dos);

				// String

				writeString(this.JOB_TITLE, dos);

				// java.util.Date

				writeDate(this.HIRE_DATE, dos);

				// Character

				if (this.SALARY_GRADE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.SALARY_GRADE);
				}

				// java.util.Date

				writeDate(this.START_DATE, dos);

				// java.util.Date

				writeDate(this.END_DATE, dos);

				// Boolean

				if (this.IS_CURRENT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.IS_CURRENT);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.EMPLOYEEID, dos);

				// String

				writeString(this.FIRST_NAME, dos);

				// String

				writeString(this.LAST_NAME, dos);

				// String

				writeString(this.DEPARTMENT, dos);

				// String

				writeString(this.JOB_TITLE, dos);

				// java.util.Date

				writeDate(this.HIRE_DATE, dos);

				// Character

				if (this.SALARY_GRADE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.SALARY_GRADE);
				}

				// java.util.Date

				writeDate(this.START_DATE, dos);

				// java.util.Date

				writeDate(this.END_DATE, dos);

				// Boolean

				if (this.IS_CURRENT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.IS_CURRENT);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("EMPLOYEEID=" + String.valueOf(EMPLOYEEID));
			sb.append(",FIRST_NAME=" + FIRST_NAME);
			sb.append(",LAST_NAME=" + LAST_NAME);
			sb.append(",DEPARTMENT=" + DEPARTMENT);
			sb.append(",JOB_TITLE=" + JOB_TITLE);
			sb.append(",HIRE_DATE=" + String.valueOf(HIRE_DATE));
			sb.append(",SALARY_GRADE=" + String.valueOf(SALARY_GRADE));
			sb.append(",START_DATE=" + String.valueOf(START_DATE));
			sb.append(",END_DATE=" + String.valueOf(END_DATE));
			sb.append(",IS_CURRENT=" + String.valueOf(IS_CURRENT));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfemployeeInfo_outStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row15Struct implements routines.system.IPersistableRow<row15Struct> {
		final static byte[] commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];
		static byte[] commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];

		public String EmployeeID;

		public String getEmployeeID() {
			return this.EmployeeID;
		}

		public String FirstName;

		public String getFirstName() {
			return this.FirstName;
		}

		public String LastName;

		public String getLastName() {
			return this.LastName;
		}

		public String Department;

		public String getDepartment() {
			return this.Department;
		}

		public String Job_Title;

		public String getJob_Title() {
			return this.Job_Title;
		}

		public java.util.Date Hire_Date;

		public java.util.Date getHire_Date() {
			return this.Hire_Date;
		}

		public Double Salary;

		public Double getSalary() {
			return this.Salary;
		}

		public Character Grade;

		public Character getGrade() {
			return this.Grade;
		}

		public java.util.Date Start_Date;

		public java.util.Date getStart_Date() {
			return this.Start_Date;
		}

		public java.util.Date End_Date;

		public java.util.Date getEnd_Date() {
			return this.End_Date;
		}

		public Boolean Is_Current;

		public Boolean getIs_Current() {
			return this.Is_Current;
		}

		public String Email;

		public String getEmail() {
			return this.Email;
		}

		public String Phone;

		public String getPhone() {
			return this.Phone;
		}

		public String Location;

		public String getLocation() {
			return this.Location;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length) {
					if (length < 1024 && commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length == 0) {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[1024];
					} else {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length);
				strReturn = new String(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length) {
					if (length < 1024 && commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length == 0) {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[1024];
					} else {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length);
				strReturn = new String(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.EmployeeID = readString(dis);

					this.FirstName = readString(dis);

					this.LastName = readString(dis);

					this.Department = readString(dis);

					this.Job_Title = readString(dis);

					this.Hire_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Salary = null;
					} else {
						this.Salary = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Grade = null;
					} else {
						this.Grade = dis.readChar();
					}

					this.Start_Date = readDate(dis);

					this.End_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Is_Current = null;
					} else {
						this.Is_Current = dis.readBoolean();
					}

					this.Email = readString(dis);

					this.Phone = readString(dis);

					this.Location = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.EmployeeID = readString(dis);

					this.FirstName = readString(dis);

					this.LastName = readString(dis);

					this.Department = readString(dis);

					this.Job_Title = readString(dis);

					this.Hire_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Salary = null;
					} else {
						this.Salary = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Grade = null;
					} else {
						this.Grade = dis.readChar();
					}

					this.Start_Date = readDate(dis);

					this.End_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Is_Current = null;
					} else {
						this.Is_Current = dis.readBoolean();
					}

					this.Email = readString(dis);

					this.Phone = readString(dis);

					this.Location = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.EmployeeID, dos);

				// String

				writeString(this.FirstName, dos);

				// String

				writeString(this.LastName, dos);

				// String

				writeString(this.Department, dos);

				// String

				writeString(this.Job_Title, dos);

				// java.util.Date

				writeDate(this.Hire_Date, dos);

				// Double

				if (this.Salary == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Salary);
				}

				// Character

				if (this.Grade == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Grade);
				}

				// java.util.Date

				writeDate(this.Start_Date, dos);

				// java.util.Date

				writeDate(this.End_Date, dos);

				// Boolean

				if (this.Is_Current == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.Is_Current);
				}

				// String

				writeString(this.Email, dos);

				// String

				writeString(this.Phone, dos);

				// String

				writeString(this.Location, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.EmployeeID, dos);

				// String

				writeString(this.FirstName, dos);

				// String

				writeString(this.LastName, dos);

				// String

				writeString(this.Department, dos);

				// String

				writeString(this.Job_Title, dos);

				// java.util.Date

				writeDate(this.Hire_Date, dos);

				// Double

				if (this.Salary == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Salary);
				}

				// Character

				if (this.Grade == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Grade);
				}

				// java.util.Date

				writeDate(this.Start_Date, dos);

				// java.util.Date

				writeDate(this.End_Date, dos);

				// Boolean

				if (this.Is_Current == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.Is_Current);
				}

				// String

				writeString(this.Email, dos);

				// String

				writeString(this.Phone, dos);

				// String

				writeString(this.Location, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("EmployeeID=" + EmployeeID);
			sb.append(",FirstName=" + FirstName);
			sb.append(",LastName=" + LastName);
			sb.append(",Department=" + Department);
			sb.append(",Job_Title=" + Job_Title);
			sb.append(",Hire_Date=" + String.valueOf(Hire_Date));
			sb.append(",Salary=" + String.valueOf(Salary));
			sb.append(",Grade=" + String.valueOf(Grade));
			sb.append(",Start_Date=" + String.valueOf(Start_Date));
			sb.append(",End_Date=" + String.valueOf(End_Date));
			sb.append(",Is_Current=" + String.valueOf(Is_Current));
			sb.append(",Email=" + Email);
			sb.append(",Phone=" + Phone);
			sb.append(",Location=" + Location);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row15Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row13Struct implements routines.system.IPersistableRow<row13Struct> {
		final static byte[] commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];
		static byte[] commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];

		public String EmployeeID;

		public String getEmployeeID() {
			return this.EmployeeID;
		}

		public String FirstName;

		public String getFirstName() {
			return this.FirstName;
		}

		public String LastName;

		public String getLastName() {
			return this.LastName;
		}

		public String Department;

		public String getDepartment() {
			return this.Department;
		}

		public String Job_Title;

		public String getJob_Title() {
			return this.Job_Title;
		}

		public java.util.Date Hire_Date;

		public java.util.Date getHire_Date() {
			return this.Hire_Date;
		}

		public Double Salary;

		public Double getSalary() {
			return this.Salary;
		}

		public Character Grade;

		public Character getGrade() {
			return this.Grade;
		}

		public java.util.Date Start_Date;

		public java.util.Date getStart_Date() {
			return this.Start_Date;
		}

		public java.util.Date End_Date;

		public java.util.Date getEnd_Date() {
			return this.End_Date;
		}

		public Boolean Is_Current;

		public Boolean getIs_Current() {
			return this.Is_Current;
		}

		public String Email;

		public String getEmail() {
			return this.Email;
		}

		public String Phone;

		public String getPhone() {
			return this.Phone;
		}

		public String Location;

		public String getLocation() {
			return this.Location;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length) {
					if (length < 1024 && commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length == 0) {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[1024];
					} else {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length);
				strReturn = new String(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length) {
					if (length < 1024 && commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length == 0) {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[1024];
					} else {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length);
				strReturn = new String(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.EmployeeID = readString(dis);

					this.FirstName = readString(dis);

					this.LastName = readString(dis);

					this.Department = readString(dis);

					this.Job_Title = readString(dis);

					this.Hire_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Salary = null;
					} else {
						this.Salary = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Grade = null;
					} else {
						this.Grade = dis.readChar();
					}

					this.Start_Date = readDate(dis);

					this.End_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Is_Current = null;
					} else {
						this.Is_Current = dis.readBoolean();
					}

					this.Email = readString(dis);

					this.Phone = readString(dis);

					this.Location = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.EmployeeID = readString(dis);

					this.FirstName = readString(dis);

					this.LastName = readString(dis);

					this.Department = readString(dis);

					this.Job_Title = readString(dis);

					this.Hire_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Salary = null;
					} else {
						this.Salary = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Grade = null;
					} else {
						this.Grade = dis.readChar();
					}

					this.Start_Date = readDate(dis);

					this.End_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Is_Current = null;
					} else {
						this.Is_Current = dis.readBoolean();
					}

					this.Email = readString(dis);

					this.Phone = readString(dis);

					this.Location = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.EmployeeID, dos);

				// String

				writeString(this.FirstName, dos);

				// String

				writeString(this.LastName, dos);

				// String

				writeString(this.Department, dos);

				// String

				writeString(this.Job_Title, dos);

				// java.util.Date

				writeDate(this.Hire_Date, dos);

				// Double

				if (this.Salary == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Salary);
				}

				// Character

				if (this.Grade == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Grade);
				}

				// java.util.Date

				writeDate(this.Start_Date, dos);

				// java.util.Date

				writeDate(this.End_Date, dos);

				// Boolean

				if (this.Is_Current == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.Is_Current);
				}

				// String

				writeString(this.Email, dos);

				// String

				writeString(this.Phone, dos);

				// String

				writeString(this.Location, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.EmployeeID, dos);

				// String

				writeString(this.FirstName, dos);

				// String

				writeString(this.LastName, dos);

				// String

				writeString(this.Department, dos);

				// String

				writeString(this.Job_Title, dos);

				// java.util.Date

				writeDate(this.Hire_Date, dos);

				// Double

				if (this.Salary == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Salary);
				}

				// Character

				if (this.Grade == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Grade);
				}

				// java.util.Date

				writeDate(this.Start_Date, dos);

				// java.util.Date

				writeDate(this.End_Date, dos);

				// Boolean

				if (this.Is_Current == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.Is_Current);
				}

				// String

				writeString(this.Email, dos);

				// String

				writeString(this.Phone, dos);

				// String

				writeString(this.Location, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("EmployeeID=" + EmployeeID);
			sb.append(",FirstName=" + FirstName);
			sb.append(",LastName=" + LastName);
			sb.append(",Department=" + Department);
			sb.append(",Job_Title=" + Job_Title);
			sb.append(",Hire_Date=" + String.valueOf(Hire_Date));
			sb.append(",Salary=" + String.valueOf(Salary));
			sb.append(",Grade=" + String.valueOf(Grade));
			sb.append(",Start_Date=" + String.valueOf(Start_Date));
			sb.append(",End_Date=" + String.valueOf(End_Date));
			sb.append(",Is_Current=" + String.valueOf(Is_Current));
			sb.append(",Email=" + Email);
			sb.append(",Phone=" + Phone);
			sb.append(",Location=" + Location);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputJSON_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputJSON_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row13Struct row13 = new row13Struct();
				row15Struct row15 = new row15Struct();
				copyOfemployeeInfo_outStruct copyOfemployeeInfo_out = new copyOfemployeeInfo_outStruct();
				row18Struct row18 = new row18Struct();

				/**
				 * [tDBOutput_7 begin ] start
				 */

				ok_Hash.put("tDBOutput_7", false);
				start_Hash.put("tDBOutput_7", System.currentTimeMillis());

				currentComponent = "tDBOutput_7";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row18");
				}

				int tos_count_tDBOutput_7 = 0;

				int nb_line_tDBOutput_7 = 0;
				int nb_line_update_tDBOutput_7 = 0;
				int nb_line_inserted_tDBOutput_7 = 0;
				int nb_line_deleted_tDBOutput_7 = 0;
				int nb_line_rejected_tDBOutput_7 = 0;

				int tmp_batchUpdateCount_tDBOutput_7 = 0;

				int deletedCount_tDBOutput_7 = 0;
				int updatedCount_tDBOutput_7 = 0;
				int insertedCount_tDBOutput_7 = 0;
				int rowsToCommitCount_tDBOutput_7 = 0;
				int rejectedCount_tDBOutput_7 = 0;

				boolean whetherReject_tDBOutput_7 = false;

				java.sql.Connection conn_tDBOutput_7 = null;

				// optional table
				String dbschema_tDBOutput_7 = null;
				String tableName_tDBOutput_7 = null;
				String driverClass_tDBOutput_7 = "oracle.jdbc.OracleDriver";

				java.lang.Class.forName(driverClass_tDBOutput_7);
				String url_tDBOutput_7 = null;
				url_tDBOutput_7 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + "localhost"
						+ ")(port=" + "1521" + "))(connect_data=(service_name=" + "XEPDB1" + ")))";
				String dbUser_tDBOutput_7 = "system";

				final String decryptedPassword_tDBOutput_7 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:JjeXBvfKSlNY0n6dBCiBZGNoMt/1QdvaJ4duvUEyP8+xo8iTfZ4=");

				String dbPwd_tDBOutput_7 = decryptedPassword_tDBOutput_7;
				dbschema_tDBOutput_7 = "";

				conn_tDBOutput_7 = java.sql.DriverManager.getConnection(url_tDBOutput_7, dbUser_tDBOutput_7,
						dbPwd_tDBOutput_7);
				resourceMap.put("conn_tDBOutput_7", conn_tDBOutput_7);
				conn_tDBOutput_7.setAutoCommit(false);
				int commitEvery_tDBOutput_7 = 10000;
				int commitCounter_tDBOutput_7 = 0;
				int batchSize_tDBOutput_7 = 10000;
				int batchSizeCounter_tDBOutput_7 = 0;
				int count_tDBOutput_7 = 0;

				if (dbschema_tDBOutput_7 == null || dbschema_tDBOutput_7.trim().length() == 0) {
					tableName_tDBOutput_7 = ("DIM_EMPLOYEEINFO");
				} else {
					tableName_tDBOutput_7 = dbschema_tDBOutput_7 + "." + ("DIM_EMPLOYEEINFO");
				}
				String insert_tDBOutput_7 = "INSERT INTO " + tableName_tDBOutput_7
						+ " (EMPLOYEEID,FIRST_NAME,LAST_NAME,DEPARTMENT,JOB_TITLE,HIRE_DATE,SALARY_GRADE,START_DATE,END_DATE,IS_CURRENT) VALUES (?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_7 = conn_tDBOutput_7.prepareStatement(insert_tDBOutput_7);
				resourceMap.put("pstmt_tDBOutput_7", pstmt_tDBOutput_7);

				/**
				 * [tDBOutput_7 begin ] stop
				 */

				/**
				 * [tUniqRow_4 begin ] start
				 */

				ok_Hash.put("tUniqRow_4", false);
				start_Hash.put("tUniqRow_4", System.currentTimeMillis());

				currentComponent = "tUniqRow_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfemployeeInfo_out");
				}

				int tos_count_tUniqRow_4 = 0;

				class KeyStruct_tUniqRow_4 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					Integer EMPLOYEEID;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.EMPLOYEEID == null) ? 0 : this.EMPLOYEEID.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_4 other = (KeyStruct_tUniqRow_4) obj;

						if (this.EMPLOYEEID == null) {
							if (other.EMPLOYEEID != null)
								return false;

						} else if (!this.EMPLOYEEID.equals(other.EMPLOYEEID))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_4 = 0;
				int nb_duplicates_tUniqRow_4 = 0;
				KeyStruct_tUniqRow_4 finder_tUniqRow_4 = new KeyStruct_tUniqRow_4();
				java.util.Set<KeyStruct_tUniqRow_4> keystUniqRow_4 = new java.util.HashSet<KeyStruct_tUniqRow_4>();

				/**
				 * [tUniqRow_4 begin ] stop
				 */

				/**
				 * [tMap_7 begin ] start
				 */

				ok_Hash.put("tMap_7", false);
				start_Hash.put("tMap_7", System.currentTimeMillis());

				currentComponent = "tMap_7";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row15");
				}

				int tos_count_tMap_7 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_7__Struct {
				}
				Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfemployeeInfo_outStruct copyOfemployeeInfo_out_tmp = new copyOfemployeeInfo_outStruct();
// ###############################

				/**
				 * [tMap_7 begin ] stop
				 */

				/**
				 * [tFilterRow_2 begin ] start
				 */

				ok_Hash.put("tFilterRow_2", false);
				start_Hash.put("tFilterRow_2", System.currentTimeMillis());

				currentComponent = "tFilterRow_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row13");
				}

				int tos_count_tFilterRow_2 = 0;

				int nb_line_tFilterRow_2 = 0;
				int nb_line_ok_tFilterRow_2 = 0;
				int nb_line_reject_tFilterRow_2 = 0;

				class Operator_tFilterRow_2 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_2(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_2 begin ] stop
				 */

				/**
				 * [tFileInputJSON_3 begin ] start
				 */

				ok_Hash.put("tFileInputJSON_3", false);
				start_Hash.put("tFileInputJSON_3", System.currentTimeMillis());

				currentComponent = "tFileInputJSON_3";

				int tos_count_tFileInputJSON_3 = 0;

				class JsonPathCache_tFileInputJSON_3 {
					final java.util.Map<String, com.jayway.jsonpath.JsonPath> jsonPathString2compiledJsonPath = new java.util.HashMap<String, com.jayway.jsonpath.JsonPath>();

					public com.jayway.jsonpath.JsonPath getCompiledJsonPath(String jsonPath) {
						if (jsonPathString2compiledJsonPath.containsKey(jsonPath)) {
							return jsonPathString2compiledJsonPath.get(jsonPath);
						} else {
							com.jayway.jsonpath.JsonPath compiledLoopPath = com.jayway.jsonpath.JsonPath
									.compile(jsonPath);
							jsonPathString2compiledJsonPath.put(jsonPath, compiledLoopPath);
							return compiledLoopPath;
						}
					}
				}

				int nb_line_tFileInputJSON_3 = 0;

				JsonPathCache_tFileInputJSON_3 jsonPathCache_tFileInputJSON_3 = new JsonPathCache_tFileInputJSON_3();

				String loopPath_tFileInputJSON_3 = "$[*]";
				java.util.List<Object> resultset_tFileInputJSON_3 = new java.util.ArrayList<Object>();

				java.io.InputStream is_tFileInputJSON_3 = null;
				com.jayway.jsonpath.ParseContext parseContext_tFileInputJSON_3 = com.jayway.jsonpath.JsonPath
						.using(com.jayway.jsonpath.Configuration.defaultConfiguration());
				Object filenameOrStream_tFileInputJSON_3 = null;
				try {
					filenameOrStream_tFileInputJSON_3 = "D:/NIBM/Degree/HND/DWBI/courseWk/sachitha_query/Dim_EmployeeInfo.json";
				} catch (java.lang.Exception e_tFileInputJSON_3) {
					globalMap.put("tFileInputJSON_3_ERROR_MESSAGE", e_tFileInputJSON_3.getMessage());

					globalMap.put("tFileInputJSON_3_ERROR_MESSAGE", e_tFileInputJSON_3.getMessage());
					System.err.println(e_tFileInputJSON_3.getMessage());
				}

				com.jayway.jsonpath.ReadContext document_tFileInputJSON_3 = null;
				try {
					if (filenameOrStream_tFileInputJSON_3 instanceof java.io.InputStream) {
						is_tFileInputJSON_3 = (java.io.InputStream) filenameOrStream_tFileInputJSON_3;
					} else {

						is_tFileInputJSON_3 = new java.io.FileInputStream((String) filenameOrStream_tFileInputJSON_3);

					}

					document_tFileInputJSON_3 = parseContext_tFileInputJSON_3.parse(is_tFileInputJSON_3, "UTF-8");
					com.jayway.jsonpath.JsonPath compiledLoopPath_tFileInputJSON_3 = jsonPathCache_tFileInputJSON_3
							.getCompiledJsonPath(loopPath_tFileInputJSON_3);
					Object result_tFileInputJSON_3 = document_tFileInputJSON_3.read(compiledLoopPath_tFileInputJSON_3,
							net.minidev.json.JSONObject.class);
					if (result_tFileInputJSON_3 instanceof net.minidev.json.JSONArray) {
						resultset_tFileInputJSON_3 = (net.minidev.json.JSONArray) result_tFileInputJSON_3;
					} else {
						resultset_tFileInputJSON_3.add(result_tFileInputJSON_3);
					}
				} catch (java.lang.Exception e_tFileInputJSON_3) {
					globalMap.put("tFileInputJSON_3_ERROR_MESSAGE", e_tFileInputJSON_3.getMessage());
					globalMap.put("tFileInputJSON_3_ERROR_MESSAGE", e_tFileInputJSON_3.getMessage());
					System.err.println(e_tFileInputJSON_3.getMessage());
				} finally {
					if (is_tFileInputJSON_3 != null) {
						is_tFileInputJSON_3.close();
					}
				}

				String jsonPath_tFileInputJSON_3 = null;
				com.jayway.jsonpath.JsonPath compiledJsonPath_tFileInputJSON_3 = null;

				Object value_tFileInputJSON_3 = null;
				Object root_tFileInputJSON_3 = null;
				for (Object row_tFileInputJSON_3 : resultset_tFileInputJSON_3) {
					nb_line_tFileInputJSON_3++;
					row13 = null;
					boolean whetherReject_tFileInputJSON_3 = false;
					row13 = new row13Struct();

					try {
						jsonPath_tFileInputJSON_3 = "EmployeeID";
						compiledJsonPath_tFileInputJSON_3 = jsonPathCache_tFileInputJSON_3
								.getCompiledJsonPath(jsonPath_tFileInputJSON_3);

						try {

							if (jsonPath_tFileInputJSON_3.startsWith("$")) {
								if (root_tFileInputJSON_3 == null) {
									root_tFileInputJSON_3 = document_tFileInputJSON_3
											.read(jsonPathCache_tFileInputJSON_3.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_3 = compiledJsonPath_tFileInputJSON_3.read(root_tFileInputJSON_3);
							} else {
								value_tFileInputJSON_3 = compiledJsonPath_tFileInputJSON_3.read(row_tFileInputJSON_3);
							}
							row13.EmployeeID = value_tFileInputJSON_3 == null ?

									null : value_tFileInputJSON_3.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_3) {
							globalMap.put("tFileInputJSON_3_ERROR_MESSAGE", e_tFileInputJSON_3.getMessage());
							row13.EmployeeID =

									null;
						}
						jsonPath_tFileInputJSON_3 = "FirstName";
						compiledJsonPath_tFileInputJSON_3 = jsonPathCache_tFileInputJSON_3
								.getCompiledJsonPath(jsonPath_tFileInputJSON_3);

						try {

							if (jsonPath_tFileInputJSON_3.startsWith("$")) {
								if (root_tFileInputJSON_3 == null) {
									root_tFileInputJSON_3 = document_tFileInputJSON_3
											.read(jsonPathCache_tFileInputJSON_3.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_3 = compiledJsonPath_tFileInputJSON_3.read(root_tFileInputJSON_3);
							} else {
								value_tFileInputJSON_3 = compiledJsonPath_tFileInputJSON_3.read(row_tFileInputJSON_3);
							}
							row13.FirstName = value_tFileInputJSON_3 == null ?

									null : value_tFileInputJSON_3.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_3) {
							globalMap.put("tFileInputJSON_3_ERROR_MESSAGE", e_tFileInputJSON_3.getMessage());
							row13.FirstName =

									null;
						}
						jsonPath_tFileInputJSON_3 = "LastName";
						compiledJsonPath_tFileInputJSON_3 = jsonPathCache_tFileInputJSON_3
								.getCompiledJsonPath(jsonPath_tFileInputJSON_3);

						try {

							if (jsonPath_tFileInputJSON_3.startsWith("$")) {
								if (root_tFileInputJSON_3 == null) {
									root_tFileInputJSON_3 = document_tFileInputJSON_3
											.read(jsonPathCache_tFileInputJSON_3.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_3 = compiledJsonPath_tFileInputJSON_3.read(root_tFileInputJSON_3);
							} else {
								value_tFileInputJSON_3 = compiledJsonPath_tFileInputJSON_3.read(row_tFileInputJSON_3);
							}
							row13.LastName = value_tFileInputJSON_3 == null ?

									null : value_tFileInputJSON_3.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_3) {
							globalMap.put("tFileInputJSON_3_ERROR_MESSAGE", e_tFileInputJSON_3.getMessage());
							row13.LastName =

									null;
						}
						jsonPath_tFileInputJSON_3 = "Department";
						compiledJsonPath_tFileInputJSON_3 = jsonPathCache_tFileInputJSON_3
								.getCompiledJsonPath(jsonPath_tFileInputJSON_3);

						try {

							if (jsonPath_tFileInputJSON_3.startsWith("$")) {
								if (root_tFileInputJSON_3 == null) {
									root_tFileInputJSON_3 = document_tFileInputJSON_3
											.read(jsonPathCache_tFileInputJSON_3.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_3 = compiledJsonPath_tFileInputJSON_3.read(root_tFileInputJSON_3);
							} else {
								value_tFileInputJSON_3 = compiledJsonPath_tFileInputJSON_3.read(row_tFileInputJSON_3);
							}
							row13.Department = value_tFileInputJSON_3 == null ?

									null : value_tFileInputJSON_3.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_3) {
							globalMap.put("tFileInputJSON_3_ERROR_MESSAGE", e_tFileInputJSON_3.getMessage());
							row13.Department =

									null;
						}
						jsonPath_tFileInputJSON_3 = "Job_Title";
						compiledJsonPath_tFileInputJSON_3 = jsonPathCache_tFileInputJSON_3
								.getCompiledJsonPath(jsonPath_tFileInputJSON_3);

						try {

							if (jsonPath_tFileInputJSON_3.startsWith("$")) {
								if (root_tFileInputJSON_3 == null) {
									root_tFileInputJSON_3 = document_tFileInputJSON_3
											.read(jsonPathCache_tFileInputJSON_3.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_3 = compiledJsonPath_tFileInputJSON_3.read(root_tFileInputJSON_3);
							} else {
								value_tFileInputJSON_3 = compiledJsonPath_tFileInputJSON_3.read(row_tFileInputJSON_3);
							}
							row13.Job_Title = value_tFileInputJSON_3 == null ?

									null : value_tFileInputJSON_3.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_3) {
							globalMap.put("tFileInputJSON_3_ERROR_MESSAGE", e_tFileInputJSON_3.getMessage());
							row13.Job_Title =

									null;
						}
						jsonPath_tFileInputJSON_3 = "Hire_Date";
						compiledJsonPath_tFileInputJSON_3 = jsonPathCache_tFileInputJSON_3
								.getCompiledJsonPath(jsonPath_tFileInputJSON_3);

						try {

							if (jsonPath_tFileInputJSON_3.startsWith("$")) {
								if (root_tFileInputJSON_3 == null) {
									root_tFileInputJSON_3 = document_tFileInputJSON_3
											.read(jsonPathCache_tFileInputJSON_3.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_3 = compiledJsonPath_tFileInputJSON_3.read(root_tFileInputJSON_3);
							} else {
								value_tFileInputJSON_3 = compiledJsonPath_tFileInputJSON_3.read(row_tFileInputJSON_3);
							}
							if (value_tFileInputJSON_3 != null && !value_tFileInputJSON_3.toString().isEmpty()) {
								row13.Hire_Date = ParserUtils.parseTo_Date(value_tFileInputJSON_3.toString(),
										"dd-MM-yyyy");
							} else {
								row13.Hire_Date =

										null;
							}
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_3) {
							globalMap.put("tFileInputJSON_3_ERROR_MESSAGE", e_tFileInputJSON_3.getMessage());
							row13.Hire_Date =

									null;
						}
						jsonPath_tFileInputJSON_3 = "Salary";
						compiledJsonPath_tFileInputJSON_3 = jsonPathCache_tFileInputJSON_3
								.getCompiledJsonPath(jsonPath_tFileInputJSON_3);

						try {

							if (jsonPath_tFileInputJSON_3.startsWith("$")) {
								if (root_tFileInputJSON_3 == null) {
									root_tFileInputJSON_3 = document_tFileInputJSON_3
											.read(jsonPathCache_tFileInputJSON_3.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_3 = compiledJsonPath_tFileInputJSON_3.read(root_tFileInputJSON_3);
							} else {
								value_tFileInputJSON_3 = compiledJsonPath_tFileInputJSON_3.read(row_tFileInputJSON_3);
							}
							if (value_tFileInputJSON_3 != null && !value_tFileInputJSON_3.toString().isEmpty()) {
								row13.Salary = ParserUtils.parseTo_Double(value_tFileInputJSON_3.toString());
							} else {
								row13.Salary =

										null;
							}
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_3) {
							globalMap.put("tFileInputJSON_3_ERROR_MESSAGE", e_tFileInputJSON_3.getMessage());
							row13.Salary =

									null;
						}
						jsonPath_tFileInputJSON_3 = "Grade";
						compiledJsonPath_tFileInputJSON_3 = jsonPathCache_tFileInputJSON_3
								.getCompiledJsonPath(jsonPath_tFileInputJSON_3);

						try {

							if (jsonPath_tFileInputJSON_3.startsWith("$")) {
								if (root_tFileInputJSON_3 == null) {
									root_tFileInputJSON_3 = document_tFileInputJSON_3
											.read(jsonPathCache_tFileInputJSON_3.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_3 = compiledJsonPath_tFileInputJSON_3.read(root_tFileInputJSON_3);
							} else {
								value_tFileInputJSON_3 = compiledJsonPath_tFileInputJSON_3.read(row_tFileInputJSON_3);
							}
							if (value_tFileInputJSON_3 != null && !value_tFileInputJSON_3.toString().isEmpty()) {
								row13.Grade = ParserUtils.parseTo_Character(value_tFileInputJSON_3.toString());
							} else {
								row13.Grade =

										null;
							}
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_3) {
							globalMap.put("tFileInputJSON_3_ERROR_MESSAGE", e_tFileInputJSON_3.getMessage());
							row13.Grade =

									null;
						}
						jsonPath_tFileInputJSON_3 = "Start_Date";
						compiledJsonPath_tFileInputJSON_3 = jsonPathCache_tFileInputJSON_3
								.getCompiledJsonPath(jsonPath_tFileInputJSON_3);

						try {

							if (jsonPath_tFileInputJSON_3.startsWith("$")) {
								if (root_tFileInputJSON_3 == null) {
									root_tFileInputJSON_3 = document_tFileInputJSON_3
											.read(jsonPathCache_tFileInputJSON_3.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_3 = compiledJsonPath_tFileInputJSON_3.read(root_tFileInputJSON_3);
							} else {
								value_tFileInputJSON_3 = compiledJsonPath_tFileInputJSON_3.read(row_tFileInputJSON_3);
							}
							if (value_tFileInputJSON_3 != null && !value_tFileInputJSON_3.toString().isEmpty()) {
								row13.Start_Date = ParserUtils.parseTo_Date(value_tFileInputJSON_3.toString(),
										"dd-MM-yyyy");
							} else {
								row13.Start_Date =

										null;
							}
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_3) {
							globalMap.put("tFileInputJSON_3_ERROR_MESSAGE", e_tFileInputJSON_3.getMessage());
							row13.Start_Date =

									null;
						}
						jsonPath_tFileInputJSON_3 = "End_Date";
						compiledJsonPath_tFileInputJSON_3 = jsonPathCache_tFileInputJSON_3
								.getCompiledJsonPath(jsonPath_tFileInputJSON_3);

						try {

							if (jsonPath_tFileInputJSON_3.startsWith("$")) {
								if (root_tFileInputJSON_3 == null) {
									root_tFileInputJSON_3 = document_tFileInputJSON_3
											.read(jsonPathCache_tFileInputJSON_3.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_3 = compiledJsonPath_tFileInputJSON_3.read(root_tFileInputJSON_3);
							} else {
								value_tFileInputJSON_3 = compiledJsonPath_tFileInputJSON_3.read(row_tFileInputJSON_3);
							}
							if (value_tFileInputJSON_3 != null && !value_tFileInputJSON_3.toString().isEmpty()) {
								row13.End_Date = ParserUtils.parseTo_Date(value_tFileInputJSON_3.toString(),
										"dd-MM-yyyy");
							} else {
								row13.End_Date =

										null;
							}
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_3) {
							globalMap.put("tFileInputJSON_3_ERROR_MESSAGE", e_tFileInputJSON_3.getMessage());
							row13.End_Date =

									null;
						}
						jsonPath_tFileInputJSON_3 = "Is_Current";
						compiledJsonPath_tFileInputJSON_3 = jsonPathCache_tFileInputJSON_3
								.getCompiledJsonPath(jsonPath_tFileInputJSON_3);

						try {

							if (jsonPath_tFileInputJSON_3.startsWith("$")) {
								if (root_tFileInputJSON_3 == null) {
									root_tFileInputJSON_3 = document_tFileInputJSON_3
											.read(jsonPathCache_tFileInputJSON_3.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_3 = compiledJsonPath_tFileInputJSON_3.read(root_tFileInputJSON_3);
							} else {
								value_tFileInputJSON_3 = compiledJsonPath_tFileInputJSON_3.read(row_tFileInputJSON_3);
							}
							if (value_tFileInputJSON_3 != null && !value_tFileInputJSON_3.toString().isEmpty()) {
								row13.Is_Current = ParserUtils.parseTo_Boolean(value_tFileInputJSON_3.toString());
							} else {
								row13.Is_Current =

										null;
							}
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_3) {
							globalMap.put("tFileInputJSON_3_ERROR_MESSAGE", e_tFileInputJSON_3.getMessage());
							row13.Is_Current =

									null;
						}
						jsonPath_tFileInputJSON_3 = "Email";
						compiledJsonPath_tFileInputJSON_3 = jsonPathCache_tFileInputJSON_3
								.getCompiledJsonPath(jsonPath_tFileInputJSON_3);

						try {

							if (jsonPath_tFileInputJSON_3.startsWith("$")) {
								if (root_tFileInputJSON_3 == null) {
									root_tFileInputJSON_3 = document_tFileInputJSON_3
											.read(jsonPathCache_tFileInputJSON_3.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_3 = compiledJsonPath_tFileInputJSON_3.read(root_tFileInputJSON_3);
							} else {
								value_tFileInputJSON_3 = compiledJsonPath_tFileInputJSON_3.read(row_tFileInputJSON_3);
							}
							row13.Email = value_tFileInputJSON_3 == null ?

									null : value_tFileInputJSON_3.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_3) {
							globalMap.put("tFileInputJSON_3_ERROR_MESSAGE", e_tFileInputJSON_3.getMessage());
							row13.Email =

									null;
						}
						jsonPath_tFileInputJSON_3 = "Phone";
						compiledJsonPath_tFileInputJSON_3 = jsonPathCache_tFileInputJSON_3
								.getCompiledJsonPath(jsonPath_tFileInputJSON_3);

						try {

							if (jsonPath_tFileInputJSON_3.startsWith("$")) {
								if (root_tFileInputJSON_3 == null) {
									root_tFileInputJSON_3 = document_tFileInputJSON_3
											.read(jsonPathCache_tFileInputJSON_3.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_3 = compiledJsonPath_tFileInputJSON_3.read(root_tFileInputJSON_3);
							} else {
								value_tFileInputJSON_3 = compiledJsonPath_tFileInputJSON_3.read(row_tFileInputJSON_3);
							}
							row13.Phone = value_tFileInputJSON_3 == null ?

									null : value_tFileInputJSON_3.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_3) {
							globalMap.put("tFileInputJSON_3_ERROR_MESSAGE", e_tFileInputJSON_3.getMessage());
							row13.Phone =

									null;
						}
						jsonPath_tFileInputJSON_3 = "Location";
						compiledJsonPath_tFileInputJSON_3 = jsonPathCache_tFileInputJSON_3
								.getCompiledJsonPath(jsonPath_tFileInputJSON_3);

						try {

							if (jsonPath_tFileInputJSON_3.startsWith("$")) {
								if (root_tFileInputJSON_3 == null) {
									root_tFileInputJSON_3 = document_tFileInputJSON_3
											.read(jsonPathCache_tFileInputJSON_3.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_3 = compiledJsonPath_tFileInputJSON_3.read(root_tFileInputJSON_3);
							} else {
								value_tFileInputJSON_3 = compiledJsonPath_tFileInputJSON_3.read(row_tFileInputJSON_3);
							}
							row13.Location = value_tFileInputJSON_3 == null ?

									null : value_tFileInputJSON_3.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_3) {
							globalMap.put("tFileInputJSON_3_ERROR_MESSAGE", e_tFileInputJSON_3.getMessage());
							row13.Location =

									null;
						}
					} catch (java.lang.Exception e_tFileInputJSON_3) {
						globalMap.put("tFileInputJSON_3_ERROR_MESSAGE", e_tFileInputJSON_3.getMessage());
						whetherReject_tFileInputJSON_3 = true;
						System.err.println(e_tFileInputJSON_3.getMessage());
						row13 = null;
						globalMap.put("tFileInputJSON_3_ERROR_MESSAGE", e_tFileInputJSON_3.getMessage());
					}
//}

					/**
					 * [tFileInputJSON_3 begin ] stop
					 */

					/**
					 * [tFileInputJSON_3 main ] start
					 */

					currentComponent = "tFileInputJSON_3";

					tos_count_tFileInputJSON_3++;

					/**
					 * [tFileInputJSON_3 main ] stop
					 */

					/**
					 * [tFileInputJSON_3 process_data_begin ] start
					 */

					currentComponent = "tFileInputJSON_3";

					/**
					 * [tFileInputJSON_3 process_data_begin ] stop
					 */
// Start of branch "row13"
					if (row13 != null) {

						/**
						 * [tFilterRow_2 main ] start
						 */

						currentComponent = "tFilterRow_2";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row13"

							);
						}

						row15 = null;
						Operator_tFilterRow_2 ope_tFilterRow_2 = new Operator_tFilterRow_2("&&");
						ope_tFilterRow_2.matches(
								(row13.EmployeeID == null ? false : row13.EmployeeID.compareTo(" ") != 0),
								"EmployeeID.compareTo(\" \") != 0 failed");
						ope_tFilterRow_2.matches(
								(row13.FirstName == null ? false : row13.FirstName.compareTo(" ") != 0),
								"FirstName.compareTo(\" \") != 0 failed");
						ope_tFilterRow_2.matches((row13.LastName == null ? false : row13.LastName.compareTo(" ") != 0),
								"LastName.compareTo(\" \") != 0 failed");
						ope_tFilterRow_2.matches(
								(row13.Department == null ? false : row13.Department.compareTo(" ") != 0),
								"Department.compareTo(\" \") != 0 failed");
						ope_tFilterRow_2.matches(
								(row13.Job_Title == null ? false : row13.Job_Title.compareTo(" ") != 0),
								"Job_Title.compareTo(\" \") != 0 failed");
						ope_tFilterRow_2.matches((row13.Email == null ? false : row13.Email.compareTo(" ") != 0),
								"Email.compareTo(\" \") != 0 failed");
						ope_tFilterRow_2.matches((row13.Phone == null ? false : row13.Phone.compareTo(" ") != 0),
								"Phone.compareTo(\" \") != 0 failed");
						ope_tFilterRow_2.matches((row13.Location == null ? false : row13.Location.compareTo(" ") != 0),
								"Location.compareTo(\" \") != 0 failed");

						if (ope_tFilterRow_2.getMatchFlag()) {
							if (row15 == null) {
								row15 = new row15Struct();
							}
							row15.EmployeeID = row13.EmployeeID;
							row15.FirstName = row13.FirstName;
							row15.LastName = row13.LastName;
							row15.Department = row13.Department;
							row15.Job_Title = row13.Job_Title;
							row15.Hire_Date = row13.Hire_Date;
							row15.Salary = row13.Salary;
							row15.Grade = row13.Grade;
							row15.Start_Date = row13.Start_Date;
							row15.End_Date = row13.End_Date;
							row15.Is_Current = row13.Is_Current;
							row15.Email = row13.Email;
							row15.Phone = row13.Phone;
							row15.Location = row13.Location;
							nb_line_ok_tFilterRow_2++;
						} else {
							nb_line_reject_tFilterRow_2++;
						}

						nb_line_tFilterRow_2++;

						tos_count_tFilterRow_2++;

						/**
						 * [tFilterRow_2 main ] stop
						 */

						/**
						 * [tFilterRow_2 process_data_begin ] start
						 */

						currentComponent = "tFilterRow_2";

						/**
						 * [tFilterRow_2 process_data_begin ] stop
						 */
// Start of branch "row15"
						if (row15 != null) {

							/**
							 * [tMap_7 main ] start
							 */

							currentComponent = "tMap_7";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row15"

								);
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_7 = false;
							boolean mainRowRejected_tMap_7 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
								// ###############################
								// # Output tables

								copyOfemployeeInfo_out = null;

// # Output table : 'copyOfemployeeInfo_out'
								copyOfemployeeInfo_out_tmp.EMPLOYEEID = row15.EmployeeID != null
										? Integer.parseInt(row15.EmployeeID)
										: null;
								copyOfemployeeInfo_out_tmp.FIRST_NAME = row15.FirstName;
								copyOfemployeeInfo_out_tmp.LAST_NAME = row15.LastName;
								copyOfemployeeInfo_out_tmp.DEPARTMENT = row15.Department;
								copyOfemployeeInfo_out_tmp.JOB_TITLE = row15.Job_Title;
								copyOfemployeeInfo_out_tmp.HIRE_DATE = row15.Hire_Date;
								copyOfemployeeInfo_out_tmp.SALARY_GRADE = row15.Grade;
								copyOfemployeeInfo_out_tmp.START_DATE = row15.Start_Date;
								copyOfemployeeInfo_out_tmp.END_DATE = row15.End_Date;
								copyOfemployeeInfo_out_tmp.IS_CURRENT = row15.Is_Current;
								copyOfemployeeInfo_out = copyOfemployeeInfo_out_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_7 = false;

							tos_count_tMap_7++;

							/**
							 * [tMap_7 main ] stop
							 */

							/**
							 * [tMap_7 process_data_begin ] start
							 */

							currentComponent = "tMap_7";

							/**
							 * [tMap_7 process_data_begin ] stop
							 */
// Start of branch "copyOfemployeeInfo_out"
							if (copyOfemployeeInfo_out != null) {

								/**
								 * [tUniqRow_4 main ] start
								 */

								currentComponent = "tUniqRow_4";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "copyOfemployeeInfo_out"

									);
								}

								row18 = null;
								finder_tUniqRow_4.EMPLOYEEID = copyOfemployeeInfo_out.EMPLOYEEID;
								finder_tUniqRow_4.hashCodeDirty = true;
								if (!keystUniqRow_4.contains(finder_tUniqRow_4)) {
									KeyStruct_tUniqRow_4 new_tUniqRow_4 = new KeyStruct_tUniqRow_4();

									new_tUniqRow_4.EMPLOYEEID = copyOfemployeeInfo_out.EMPLOYEEID;

									keystUniqRow_4.add(new_tUniqRow_4);
									if (row18 == null) {

										row18 = new row18Struct();
									}
									row18.EMPLOYEEID = copyOfemployeeInfo_out.EMPLOYEEID;
									row18.FIRST_NAME = copyOfemployeeInfo_out.FIRST_NAME;
									row18.LAST_NAME = copyOfemployeeInfo_out.LAST_NAME;
									row18.DEPARTMENT = copyOfemployeeInfo_out.DEPARTMENT;
									row18.JOB_TITLE = copyOfemployeeInfo_out.JOB_TITLE;
									row18.HIRE_DATE = copyOfemployeeInfo_out.HIRE_DATE;
									row18.SALARY_GRADE = copyOfemployeeInfo_out.SALARY_GRADE;
									row18.START_DATE = copyOfemployeeInfo_out.START_DATE;
									row18.END_DATE = copyOfemployeeInfo_out.END_DATE;
									row18.IS_CURRENT = copyOfemployeeInfo_out.IS_CURRENT;
									nb_uniques_tUniqRow_4++;
								} else {
									nb_duplicates_tUniqRow_4++;
								}

								tos_count_tUniqRow_4++;

								/**
								 * [tUniqRow_4 main ] stop
								 */

								/**
								 * [tUniqRow_4 process_data_begin ] start
								 */

								currentComponent = "tUniqRow_4";

								/**
								 * [tUniqRow_4 process_data_begin ] stop
								 */
// Start of branch "row18"
								if (row18 != null) {

									/**
									 * [tDBOutput_7 main ] start
									 */

									currentComponent = "tDBOutput_7";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "row18"

										);
									}

									whetherReject_tDBOutput_7 = false;
									if (row18.EMPLOYEEID == null) {
										pstmt_tDBOutput_7.setNull(1, java.sql.Types.INTEGER);
									} else {
										pstmt_tDBOutput_7.setInt(1, row18.EMPLOYEEID);
									}

									if (row18.FIRST_NAME == null) {
										pstmt_tDBOutput_7.setNull(2, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_7.setString(2, row18.FIRST_NAME);
									}

									if (row18.LAST_NAME == null) {
										pstmt_tDBOutput_7.setNull(3, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_7.setString(3, row18.LAST_NAME);
									}

									if (row18.DEPARTMENT == null) {
										pstmt_tDBOutput_7.setNull(4, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_7.setString(4, row18.DEPARTMENT);
									}

									if (row18.JOB_TITLE == null) {
										pstmt_tDBOutput_7.setNull(5, java.sql.Types.VARCHAR);
									} else {
										pstmt_tDBOutput_7.setString(5, row18.JOB_TITLE);
									}

									if (row18.HIRE_DATE != null) {
										pstmt_tDBOutput_7.setObject(6,
												new java.sql.Timestamp(row18.HIRE_DATE.getTime()), java.sql.Types.DATE);
									} else {
										pstmt_tDBOutput_7.setNull(6, java.sql.Types.DATE);
									}

									if (row18.SALARY_GRADE == null) {
										pstmt_tDBOutput_7.setNull(7, java.sql.Types.CHAR);
									} else {
										if (row18.SALARY_GRADE == null) {
											pstmt_tDBOutput_7.setNull(7, java.sql.Types.CHAR);
										} else if (row18.SALARY_GRADE == ' ') {
											pstmt_tDBOutput_7.setString(7, "");
										} else {
											pstmt_tDBOutput_7.setString(7, String.valueOf(row18.SALARY_GRADE));
										}
									}

									if (row18.START_DATE != null) {
										pstmt_tDBOutput_7.setObject(8,
												new java.sql.Timestamp(row18.START_DATE.getTime()),
												java.sql.Types.DATE);
									} else {
										pstmt_tDBOutput_7.setNull(8, java.sql.Types.DATE);
									}

									if (row18.END_DATE != null) {
										pstmt_tDBOutput_7.setObject(9, new java.sql.Timestamp(row18.END_DATE.getTime()),
												java.sql.Types.DATE);
									} else {
										pstmt_tDBOutput_7.setNull(9, java.sql.Types.DATE);
									}

									if (row18.IS_CURRENT == null) {
										pstmt_tDBOutput_7.setNull(10, java.sql.Types.INTEGER);
									} else {
										pstmt_tDBOutput_7.setBoolean(10, row18.IS_CURRENT);
									}

									pstmt_tDBOutput_7.addBatch();
									nb_line_tDBOutput_7++;
									batchSizeCounter_tDBOutput_7++;
									if (batchSize_tDBOutput_7 > 0
											&& batchSize_tDBOutput_7 <= batchSizeCounter_tDBOutput_7) {
										try {
											pstmt_tDBOutput_7.executeBatch();
										} catch (java.sql.BatchUpdateException e_tDBOutput_7) {
											globalMap.put("tDBOutput_7_ERROR_MESSAGE", e_tDBOutput_7.getMessage());
											java.sql.SQLException ne_tDBOutput_7 = e_tDBOutput_7.getNextException(),
													sqle_tDBOutput_7 = null;
											String errormessage_tDBOutput_7;
											if (ne_tDBOutput_7 != null) {
												// build new exception to provide the original cause
												sqle_tDBOutput_7 = new java.sql.SQLException(
														e_tDBOutput_7.getMessage() + "\ncaused by: "
																+ ne_tDBOutput_7.getMessage(),
														ne_tDBOutput_7.getSQLState(), ne_tDBOutput_7.getErrorCode(),
														ne_tDBOutput_7);
												errormessage_tDBOutput_7 = sqle_tDBOutput_7.getMessage();
											} else {
												errormessage_tDBOutput_7 = e_tDBOutput_7.getMessage();
											}

											System.err.println(errormessage_tDBOutput_7);

										}
										tmp_batchUpdateCount_tDBOutput_7 = pstmt_tDBOutput_7.getUpdateCount();
										insertedCount_tDBOutput_7 += (tmp_batchUpdateCount_tDBOutput_7 != -1
												? tmp_batchUpdateCount_tDBOutput_7
												: 0);
										rowsToCommitCount_tDBOutput_7 += (tmp_batchUpdateCount_tDBOutput_7 != -1
												? tmp_batchUpdateCount_tDBOutput_7
												: 0);
										batchSizeCounter_tDBOutput_7 = 0;
									}
									commitCounter_tDBOutput_7++;
									if (commitEvery_tDBOutput_7 <= commitCounter_tDBOutput_7) {
										if (batchSizeCounter_tDBOutput_7 > 0) {
											try {
												pstmt_tDBOutput_7.executeBatch();
											} catch (java.sql.BatchUpdateException e_tDBOutput_7) {
												globalMap.put("tDBOutput_7_ERROR_MESSAGE", e_tDBOutput_7.getMessage());
												java.sql.SQLException ne_tDBOutput_7 = e_tDBOutput_7.getNextException(),
														sqle_tDBOutput_7 = null;
												String errormessage_tDBOutput_7;
												if (ne_tDBOutput_7 != null) {
													// build new exception to provide the original cause
													sqle_tDBOutput_7 = new java.sql.SQLException(
															e_tDBOutput_7.getMessage() + "\ncaused by: "
																	+ ne_tDBOutput_7.getMessage(),
															ne_tDBOutput_7.getSQLState(), ne_tDBOutput_7.getErrorCode(),
															ne_tDBOutput_7);
													errormessage_tDBOutput_7 = sqle_tDBOutput_7.getMessage();
												} else {
													errormessage_tDBOutput_7 = e_tDBOutput_7.getMessage();
												}

												System.err.println(errormessage_tDBOutput_7);

											}
											tmp_batchUpdateCount_tDBOutput_7 = pstmt_tDBOutput_7.getUpdateCount();
											insertedCount_tDBOutput_7 += (tmp_batchUpdateCount_tDBOutput_7 != -1
													? tmp_batchUpdateCount_tDBOutput_7
													: 0);
											rowsToCommitCount_tDBOutput_7 += (tmp_batchUpdateCount_tDBOutput_7 != -1
													? tmp_batchUpdateCount_tDBOutput_7
													: 0);
										}
										if (rowsToCommitCount_tDBOutput_7 != 0) {

										}
										conn_tDBOutput_7.commit();
										if (rowsToCommitCount_tDBOutput_7 != 0) {

											rowsToCommitCount_tDBOutput_7 = 0;
										}
										commitCounter_tDBOutput_7 = 0;
										batchSizeCounter_tDBOutput_7 = 0;
									}

									tos_count_tDBOutput_7++;

									/**
									 * [tDBOutput_7 main ] stop
									 */

									/**
									 * [tDBOutput_7 process_data_begin ] start
									 */

									currentComponent = "tDBOutput_7";

									/**
									 * [tDBOutput_7 process_data_begin ] stop
									 */

									/**
									 * [tDBOutput_7 process_data_end ] start
									 */

									currentComponent = "tDBOutput_7";

									/**
									 * [tDBOutput_7 process_data_end ] stop
									 */

								} // End of branch "row18"

								/**
								 * [tUniqRow_4 process_data_end ] start
								 */

								currentComponent = "tUniqRow_4";

								/**
								 * [tUniqRow_4 process_data_end ] stop
								 */

							} // End of branch "copyOfemployeeInfo_out"

							/**
							 * [tMap_7 process_data_end ] start
							 */

							currentComponent = "tMap_7";

							/**
							 * [tMap_7 process_data_end ] stop
							 */

						} // End of branch "row15"

						/**
						 * [tFilterRow_2 process_data_end ] start
						 */

						currentComponent = "tFilterRow_2";

						/**
						 * [tFilterRow_2 process_data_end ] stop
						 */

					} // End of branch "row13"

					/**
					 * [tFileInputJSON_3 process_data_end ] start
					 */

					currentComponent = "tFileInputJSON_3";

					/**
					 * [tFileInputJSON_3 process_data_end ] stop
					 */

					/**
					 * [tFileInputJSON_3 end ] start
					 */

					currentComponent = "tFileInputJSON_3";

				}
				globalMap.put("tFileInputJSON_3_NB_LINE", nb_line_tFileInputJSON_3);

				ok_Hash.put("tFileInputJSON_3", true);
				end_Hash.put("tFileInputJSON_3", System.currentTimeMillis());

				/**
				 * [tFileInputJSON_3 end ] stop
				 */

				/**
				 * [tFilterRow_2 end ] start
				 */

				currentComponent = "tFilterRow_2";

				globalMap.put("tFilterRow_2_NB_LINE", nb_line_tFilterRow_2);
				globalMap.put("tFilterRow_2_NB_LINE_OK", nb_line_ok_tFilterRow_2);
				globalMap.put("tFilterRow_2_NB_LINE_REJECT", nb_line_reject_tFilterRow_2);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row13");
				}

				ok_Hash.put("tFilterRow_2", true);
				end_Hash.put("tFilterRow_2", System.currentTimeMillis());

				/**
				 * [tFilterRow_2 end ] stop
				 */

				/**
				 * [tMap_7 end ] start
				 */

				currentComponent = "tMap_7";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row15");
				}

				ok_Hash.put("tMap_7", true);
				end_Hash.put("tMap_7", System.currentTimeMillis());

				/**
				 * [tMap_7 end ] stop
				 */

				/**
				 * [tUniqRow_4 end ] start
				 */

				currentComponent = "tUniqRow_4";

				globalMap.put("tUniqRow_4_NB_UNIQUES", nb_uniques_tUniqRow_4);
				globalMap.put("tUniqRow_4_NB_DUPLICATES", nb_duplicates_tUniqRow_4);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfemployeeInfo_out");
				}

				ok_Hash.put("tUniqRow_4", true);
				end_Hash.put("tUniqRow_4", System.currentTimeMillis());

				/**
				 * [tUniqRow_4 end ] stop
				 */

				/**
				 * [tDBOutput_7 end ] start
				 */

				currentComponent = "tDBOutput_7";

				if (batchSizeCounter_tDBOutput_7 > 0) {
					try {
						if (pstmt_tDBOutput_7 != null) {

							pstmt_tDBOutput_7.executeBatch();

						}
					} catch (java.sql.BatchUpdateException e_tDBOutput_7) {
						globalMap.put("tDBOutput_7_ERROR_MESSAGE", e_tDBOutput_7.getMessage());
						java.sql.SQLException ne_tDBOutput_7 = e_tDBOutput_7.getNextException(),
								sqle_tDBOutput_7 = null;
						String errormessage_tDBOutput_7;
						if (ne_tDBOutput_7 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_7 = new java.sql.SQLException(
									e_tDBOutput_7.getMessage() + "\ncaused by: " + ne_tDBOutput_7.getMessage(),
									ne_tDBOutput_7.getSQLState(), ne_tDBOutput_7.getErrorCode(), ne_tDBOutput_7);
							errormessage_tDBOutput_7 = sqle_tDBOutput_7.getMessage();
						} else {
							errormessage_tDBOutput_7 = e_tDBOutput_7.getMessage();
						}

						System.err.println(errormessage_tDBOutput_7);

					}
					if (pstmt_tDBOutput_7 != null) {
						tmp_batchUpdateCount_tDBOutput_7 = pstmt_tDBOutput_7.getUpdateCount();

						insertedCount_tDBOutput_7

								+= (tmp_batchUpdateCount_tDBOutput_7 != -1 ? tmp_batchUpdateCount_tDBOutput_7 : 0);
						rowsToCommitCount_tDBOutput_7 += (tmp_batchUpdateCount_tDBOutput_7 != -1
								? tmp_batchUpdateCount_tDBOutput_7
								: 0);
					}
				}
				if (pstmt_tDBOutput_7 != null) {

					pstmt_tDBOutput_7.close();
					resourceMap.remove("pstmt_tDBOutput_7");

				}
				resourceMap.put("statementClosed_tDBOutput_7", true);
				if (commitCounter_tDBOutput_7 > 0 && rowsToCommitCount_tDBOutput_7 != 0) {

				}
				conn_tDBOutput_7.commit();
				if (commitCounter_tDBOutput_7 > 0 && rowsToCommitCount_tDBOutput_7 != 0) {

					rowsToCommitCount_tDBOutput_7 = 0;
				}
				commitCounter_tDBOutput_7 = 0;

				conn_tDBOutput_7.close();

				resourceMap.put("finish_tDBOutput_7", true);

				nb_line_deleted_tDBOutput_7 = nb_line_deleted_tDBOutput_7 + deletedCount_tDBOutput_7;
				nb_line_update_tDBOutput_7 = nb_line_update_tDBOutput_7 + updatedCount_tDBOutput_7;
				nb_line_inserted_tDBOutput_7 = nb_line_inserted_tDBOutput_7 + insertedCount_tDBOutput_7;
				nb_line_rejected_tDBOutput_7 = nb_line_rejected_tDBOutput_7 + rejectedCount_tDBOutput_7;

				globalMap.put("tDBOutput_7_NB_LINE", nb_line_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_UPDATED", nb_line_update_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_DELETED", nb_line_deleted_tDBOutput_7);
				globalMap.put("tDBOutput_7_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_7);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row18");
				}

				ok_Hash.put("tDBOutput_7", true);
				end_Hash.put("tDBOutput_7", System.currentTimeMillis());

				/**
				 * [tDBOutput_7 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputJSON_3 finally ] start
				 */

				currentComponent = "tFileInputJSON_3";

				/**
				 * [tFileInputJSON_3 finally ] stop
				 */

				/**
				 * [tFilterRow_2 finally ] start
				 */

				currentComponent = "tFilterRow_2";

				/**
				 * [tFilterRow_2 finally ] stop
				 */

				/**
				 * [tMap_7 finally ] start
				 */

				currentComponent = "tMap_7";

				/**
				 * [tMap_7 finally ] stop
				 */

				/**
				 * [tUniqRow_4 finally ] start
				 */

				currentComponent = "tUniqRow_4";

				/**
				 * [tUniqRow_4 finally ] stop
				 */

				/**
				 * [tDBOutput_7 finally ] start
				 */

				currentComponent = "tDBOutput_7";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_7") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_7 = null;
						if ((pstmtToClose_tDBOutput_7 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_7")) != null) {
							pstmtToClose_tDBOutput_7.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_7") == null) {
						java.sql.Connection ctn_tDBOutput_7 = null;
						if ((ctn_tDBOutput_7 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_7")) != null) {
							try {
								ctn_tDBOutput_7.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_7) {
								String errorMessage_tDBOutput_7 = "failed to close the connection in tDBOutput_7 :"
										+ sqlEx_tDBOutput_7.getMessage();
								System.err.println(errorMessage_tDBOutput_7);
							}
						}
					}
				}

				/**
				 * [tDBOutput_7 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputJSON_3_SUBPROCESS_STATE", 1);
	}

	public static class Attendence_outStruct implements routines.system.IPersistableRow<Attendence_outStruct> {
		final static byte[] commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];
		static byte[] commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];

		public Integer ATTENDANCEID;

		public Integer getATTENDANCEID() {
			return this.ATTENDANCEID;
		}

		public Integer EMPLOYEE_ID;

		public Integer getEMPLOYEE_ID() {
			return this.EMPLOYEE_ID;
		}

		public java.util.Date ATTENDANCEDATE;

		public java.util.Date getATTENDANCEDATE() {
			return this.ATTENDANCEDATE;
		}

		public String SCHEDULED_START_TIME;

		public String getSCHEDULED_START_TIME() {
			return this.SCHEDULED_START_TIME;
		}

		public String ACTUAL_START_TIME;

		public String getACTUAL_START_TIME() {
			return this.ACTUAL_START_TIME;
		}

		public Integer LATE_MINUTES;

		public Integer getLATE_MINUTES() {
			return this.LATE_MINUTES;
		}

		public String ATTENDANCE_STATUS;

		public String getATTENDANCE_STATUS() {
			return this.ATTENDANCE_STATUS;
		}

		public String ABSENCE_REASON;

		public String getABSENCE_REASON() {
			return this.ABSENCE_REASON;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length) {
					if (length < 1024 && commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length == 0) {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[1024];
					} else {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length);
				strReturn = new String(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length) {
					if (length < 1024 && commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length == 0) {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[1024];
					} else {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length);
				strReturn = new String(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.ATTENDANCEID = readInteger(dis);

					this.EMPLOYEE_ID = readInteger(dis);

					this.ATTENDANCEDATE = readDate(dis);

					this.SCHEDULED_START_TIME = readString(dis);

					this.ACTUAL_START_TIME = readString(dis);

					this.LATE_MINUTES = readInteger(dis);

					this.ATTENDANCE_STATUS = readString(dis);

					this.ABSENCE_REASON = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.ATTENDANCEID = readInteger(dis);

					this.EMPLOYEE_ID = readInteger(dis);

					this.ATTENDANCEDATE = readDate(dis);

					this.SCHEDULED_START_TIME = readString(dis);

					this.ACTUAL_START_TIME = readString(dis);

					this.LATE_MINUTES = readInteger(dis);

					this.ATTENDANCE_STATUS = readString(dis);

					this.ABSENCE_REASON = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.ATTENDANCEID, dos);

				// Integer

				writeInteger(this.EMPLOYEE_ID, dos);

				// java.util.Date

				writeDate(this.ATTENDANCEDATE, dos);

				// String

				writeString(this.SCHEDULED_START_TIME, dos);

				// String

				writeString(this.ACTUAL_START_TIME, dos);

				// Integer

				writeInteger(this.LATE_MINUTES, dos);

				// String

				writeString(this.ATTENDANCE_STATUS, dos);

				// String

				writeString(this.ABSENCE_REASON, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.ATTENDANCEID, dos);

				// Integer

				writeInteger(this.EMPLOYEE_ID, dos);

				// java.util.Date

				writeDate(this.ATTENDANCEDATE, dos);

				// String

				writeString(this.SCHEDULED_START_TIME, dos);

				// String

				writeString(this.ACTUAL_START_TIME, dos);

				// Integer

				writeInteger(this.LATE_MINUTES, dos);

				// String

				writeString(this.ATTENDANCE_STATUS, dos);

				// String

				writeString(this.ABSENCE_REASON, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ATTENDANCEID=" + String.valueOf(ATTENDANCEID));
			sb.append(",EMPLOYEE_ID=" + String.valueOf(EMPLOYEE_ID));
			sb.append(",ATTENDANCEDATE=" + String.valueOf(ATTENDANCEDATE));
			sb.append(",SCHEDULED_START_TIME=" + SCHEDULED_START_TIME);
			sb.append(",ACTUAL_START_TIME=" + ACTUAL_START_TIME);
			sb.append(",LATE_MINUTES=" + String.valueOf(LATE_MINUTES));
			sb.append(",ATTENDANCE_STATUS=" + ATTENDANCE_STATUS);
			sb.append(",ABSENCE_REASON=" + ABSENCE_REASON);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(Attendence_outStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row14Struct implements routines.system.IPersistableRow<row14Struct> {
		final static byte[] commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];
		static byte[] commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];

		public Integer EmployeeID;

		public Integer getEmployeeID() {
			return this.EmployeeID;
		}

		public String FirstName;

		public String getFirstName() {
			return this.FirstName;
		}

		public String LastName;

		public String getLastName() {
			return this.LastName;
		}

		public String Department;

		public String getDepartment() {
			return this.Department;
		}

		public String Job_Title;

		public String getJob_Title() {
			return this.Job_Title;
		}

		public java.util.Date Hire_Date;

		public java.util.Date getHire_Date() {
			return this.Hire_Date;
		}

		public Double Salary;

		public Double getSalary() {
			return this.Salary;
		}

		public Character Grade;

		public Character getGrade() {
			return this.Grade;
		}

		public java.util.Date Start_Date;

		public java.util.Date getStart_Date() {
			return this.Start_Date;
		}

		public java.util.Date End_Date;

		public java.util.Date getEnd_Date() {
			return this.End_Date;
		}

		public Boolean Is_Current;

		public Boolean getIs_Current() {
			return this.Is_Current;
		}

		public String Email;

		public String getEmail() {
			return this.Email;
		}

		public String Phone;

		public String getPhone() {
			return this.Phone;
		}

		public String Location;

		public String getLocation() {
			return this.Location;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length) {
					if (length < 1024 && commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length == 0) {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[1024];
					} else {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length);
				strReturn = new String(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length) {
					if (length < 1024 && commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length == 0) {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[1024];
					} else {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length);
				strReturn = new String(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.EmployeeID = readInteger(dis);

					this.FirstName = readString(dis);

					this.LastName = readString(dis);

					this.Department = readString(dis);

					this.Job_Title = readString(dis);

					this.Hire_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Salary = null;
					} else {
						this.Salary = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Grade = null;
					} else {
						this.Grade = dis.readChar();
					}

					this.Start_Date = readDate(dis);

					this.End_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Is_Current = null;
					} else {
						this.Is_Current = dis.readBoolean();
					}

					this.Email = readString(dis);

					this.Phone = readString(dis);

					this.Location = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.EmployeeID = readInteger(dis);

					this.FirstName = readString(dis);

					this.LastName = readString(dis);

					this.Department = readString(dis);

					this.Job_Title = readString(dis);

					this.Hire_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Salary = null;
					} else {
						this.Salary = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Grade = null;
					} else {
						this.Grade = dis.readChar();
					}

					this.Start_Date = readDate(dis);

					this.End_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Is_Current = null;
					} else {
						this.Is_Current = dis.readBoolean();
					}

					this.Email = readString(dis);

					this.Phone = readString(dis);

					this.Location = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.EmployeeID, dos);

				// String

				writeString(this.FirstName, dos);

				// String

				writeString(this.LastName, dos);

				// String

				writeString(this.Department, dos);

				// String

				writeString(this.Job_Title, dos);

				// java.util.Date

				writeDate(this.Hire_Date, dos);

				// Double

				if (this.Salary == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Salary);
				}

				// Character

				if (this.Grade == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Grade);
				}

				// java.util.Date

				writeDate(this.Start_Date, dos);

				// java.util.Date

				writeDate(this.End_Date, dos);

				// Boolean

				if (this.Is_Current == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.Is_Current);
				}

				// String

				writeString(this.Email, dos);

				// String

				writeString(this.Phone, dos);

				// String

				writeString(this.Location, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.EmployeeID, dos);

				// String

				writeString(this.FirstName, dos);

				// String

				writeString(this.LastName, dos);

				// String

				writeString(this.Department, dos);

				// String

				writeString(this.Job_Title, dos);

				// java.util.Date

				writeDate(this.Hire_Date, dos);

				// Double

				if (this.Salary == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Salary);
				}

				// Character

				if (this.Grade == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Grade);
				}

				// java.util.Date

				writeDate(this.Start_Date, dos);

				// java.util.Date

				writeDate(this.End_Date, dos);

				// Boolean

				if (this.Is_Current == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.Is_Current);
				}

				// String

				writeString(this.Email, dos);

				// String

				writeString(this.Phone, dos);

				// String

				writeString(this.Location, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("EmployeeID=" + String.valueOf(EmployeeID));
			sb.append(",FirstName=" + FirstName);
			sb.append(",LastName=" + LastName);
			sb.append(",Department=" + Department);
			sb.append(",Job_Title=" + Job_Title);
			sb.append(",Hire_Date=" + String.valueOf(Hire_Date));
			sb.append(",Salary=" + String.valueOf(Salary));
			sb.append(",Grade=" + String.valueOf(Grade));
			sb.append(",Start_Date=" + String.valueOf(Start_Date));
			sb.append(",End_Date=" + String.valueOf(End_Date));
			sb.append(",Is_Current=" + String.valueOf(Is_Current));
			sb.append(",Email=" + Email);
			sb.append(",Phone=" + Phone);
			sb.append(",Location=" + Location);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row14Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputJSON_5Struct
			implements routines.system.IPersistableRow<after_tFileInputJSON_5Struct> {
		final static byte[] commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];
		static byte[] commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];

		public Integer EmployeeID;

		public Integer getEmployeeID() {
			return this.EmployeeID;
		}

		public String FirstName;

		public String getFirstName() {
			return this.FirstName;
		}

		public String LastName;

		public String getLastName() {
			return this.LastName;
		}

		public String Department;

		public String getDepartment() {
			return this.Department;
		}

		public String Job_Title;

		public String getJob_Title() {
			return this.Job_Title;
		}

		public java.util.Date Hire_Date;

		public java.util.Date getHire_Date() {
			return this.Hire_Date;
		}

		public Double Salary;

		public Double getSalary() {
			return this.Salary;
		}

		public Character Grade;

		public Character getGrade() {
			return this.Grade;
		}

		public java.util.Date Start_Date;

		public java.util.Date getStart_Date() {
			return this.Start_Date;
		}

		public java.util.Date End_Date;

		public java.util.Date getEnd_Date() {
			return this.End_Date;
		}

		public Boolean Is_Current;

		public Boolean getIs_Current() {
			return this.Is_Current;
		}

		public String Email;

		public String getEmail() {
			return this.Email;
		}

		public String Phone;

		public String getPhone() {
			return this.Phone;
		}

		public String Location;

		public String getLocation() {
			return this.Location;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length) {
					if (length < 1024 && commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length == 0) {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[1024];
					} else {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length);
				strReturn = new String(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length) {
					if (length < 1024 && commonByteArray_CLOTHS_STORE_ETLProcessClothingStore.length == 0) {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[1024];
					} else {
						commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length);
				strReturn = new String(commonByteArray_CLOTHS_STORE_ETLProcessClothingStore, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.EmployeeID = readInteger(dis);

					this.FirstName = readString(dis);

					this.LastName = readString(dis);

					this.Department = readString(dis);

					this.Job_Title = readString(dis);

					this.Hire_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Salary = null;
					} else {
						this.Salary = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Grade = null;
					} else {
						this.Grade = dis.readChar();
					}

					this.Start_Date = readDate(dis);

					this.End_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Is_Current = null;
					} else {
						this.Is_Current = dis.readBoolean();
					}

					this.Email = readString(dis);

					this.Phone = readString(dis);

					this.Location = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.EmployeeID = readInteger(dis);

					this.FirstName = readString(dis);

					this.LastName = readString(dis);

					this.Department = readString(dis);

					this.Job_Title = readString(dis);

					this.Hire_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Salary = null;
					} else {
						this.Salary = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Grade = null;
					} else {
						this.Grade = dis.readChar();
					}

					this.Start_Date = readDate(dis);

					this.End_Date = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Is_Current = null;
					} else {
						this.Is_Current = dis.readBoolean();
					}

					this.Email = readString(dis);

					this.Phone = readString(dis);

					this.Location = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.EmployeeID, dos);

				// String

				writeString(this.FirstName, dos);

				// String

				writeString(this.LastName, dos);

				// String

				writeString(this.Department, dos);

				// String

				writeString(this.Job_Title, dos);

				// java.util.Date

				writeDate(this.Hire_Date, dos);

				// Double

				if (this.Salary == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Salary);
				}

				// Character

				if (this.Grade == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Grade);
				}

				// java.util.Date

				writeDate(this.Start_Date, dos);

				// java.util.Date

				writeDate(this.End_Date, dos);

				// Boolean

				if (this.Is_Current == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.Is_Current);
				}

				// String

				writeString(this.Email, dos);

				// String

				writeString(this.Phone, dos);

				// String

				writeString(this.Location, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.EmployeeID, dos);

				// String

				writeString(this.FirstName, dos);

				// String

				writeString(this.LastName, dos);

				// String

				writeString(this.Department, dos);

				// String

				writeString(this.Job_Title, dos);

				// java.util.Date

				writeDate(this.Hire_Date, dos);

				// Double

				if (this.Salary == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Salary);
				}

				// Character

				if (this.Grade == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeChar(this.Grade);
				}

				// java.util.Date

				writeDate(this.Start_Date, dos);

				// java.util.Date

				writeDate(this.End_Date, dos);

				// Boolean

				if (this.Is_Current == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.Is_Current);
				}

				// String

				writeString(this.Email, dos);

				// String

				writeString(this.Phone, dos);

				// String

				writeString(this.Location, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("EmployeeID=" + String.valueOf(EmployeeID));
			sb.append(",FirstName=" + FirstName);
			sb.append(",LastName=" + LastName);
			sb.append(",Department=" + Department);
			sb.append(",Job_Title=" + Job_Title);
			sb.append(",Hire_Date=" + String.valueOf(Hire_Date));
			sb.append(",Salary=" + String.valueOf(Salary));
			sb.append(",Grade=" + String.valueOf(Grade));
			sb.append(",Start_Date=" + String.valueOf(Start_Date));
			sb.append(",End_Date=" + String.valueOf(End_Date));
			sb.append(",Is_Current=" + String.valueOf(Is_Current));
			sb.append(",Email=" + Email);
			sb.append(",Phone=" + Phone);
			sb.append(",Location=" + Location);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputJSON_5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputJSON_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputJSON_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tFileInputJSON_4Process(globalMap);

				row14Struct row14 = new row14Struct();
				Attendence_outStruct Attendence_out = new Attendence_outStruct();

				/**
				 * [tDBOutput_8 begin ] start
				 */

				ok_Hash.put("tDBOutput_8", false);
				start_Hash.put("tDBOutput_8", System.currentTimeMillis());

				currentComponent = "tDBOutput_8";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "Attendence_out");
				}

				int tos_count_tDBOutput_8 = 0;

				int nb_line_tDBOutput_8 = 0;
				int nb_line_update_tDBOutput_8 = 0;
				int nb_line_inserted_tDBOutput_8 = 0;
				int nb_line_deleted_tDBOutput_8 = 0;
				int nb_line_rejected_tDBOutput_8 = 0;

				int tmp_batchUpdateCount_tDBOutput_8 = 0;

				int deletedCount_tDBOutput_8 = 0;
				int updatedCount_tDBOutput_8 = 0;
				int insertedCount_tDBOutput_8 = 0;
				int rowsToCommitCount_tDBOutput_8 = 0;
				int rejectedCount_tDBOutput_8 = 0;

				boolean whetherReject_tDBOutput_8 = false;

				java.sql.Connection conn_tDBOutput_8 = null;

				// optional table
				String dbschema_tDBOutput_8 = null;
				String tableName_tDBOutput_8 = null;
				String driverClass_tDBOutput_8 = "oracle.jdbc.OracleDriver";

				java.lang.Class.forName(driverClass_tDBOutput_8);
				String url_tDBOutput_8 = null;
				url_tDBOutput_8 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + "localhost"
						+ ")(port=" + "1521" + "))(connect_data=(service_name=" + "XEPDB1" + ")))";
				String dbUser_tDBOutput_8 = "system";

				final String decryptedPassword_tDBOutput_8 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:JI1ZLb140iMp1gV1E5AqhX4KxY7wJLNiulhB4eEf/A5wmt2LSi4=");

				String dbPwd_tDBOutput_8 = decryptedPassword_tDBOutput_8;
				dbschema_tDBOutput_8 = "";

				conn_tDBOutput_8 = java.sql.DriverManager.getConnection(url_tDBOutput_8, dbUser_tDBOutput_8,
						dbPwd_tDBOutput_8);
				resourceMap.put("conn_tDBOutput_8", conn_tDBOutput_8);
				conn_tDBOutput_8.setAutoCommit(false);
				int commitEvery_tDBOutput_8 = 10000;
				int commitCounter_tDBOutput_8 = 0;
				int batchSize_tDBOutput_8 = 10000;
				int batchSizeCounter_tDBOutput_8 = 0;
				int count_tDBOutput_8 = 0;

				if (dbschema_tDBOutput_8 == null || dbschema_tDBOutput_8.trim().length() == 0) {
					tableName_tDBOutput_8 = ("DIM_ATTENDANCE");
				} else {
					tableName_tDBOutput_8 = dbschema_tDBOutput_8 + "." + ("DIM_ATTENDANCE");
				}
				String insert_tDBOutput_8 = "INSERT INTO " + tableName_tDBOutput_8
						+ " (ATTENDANCEID,EMPLOYEE_ID,ATTENDANCEDATE,SCHEDULED_START_TIME,ACTUAL_START_TIME,LATE_MINUTES,ATTENDANCE_STATUS,ABSENCE_REASON) VALUES (?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_8 = conn_tDBOutput_8.prepareStatement(insert_tDBOutput_8);
				resourceMap.put("pstmt_tDBOutput_8", pstmt_tDBOutput_8);

				/**
				 * [tDBOutput_8 begin ] stop
				 */

				/**
				 * [tMap_8 begin ] start
				 */

				ok_Hash.put("tMap_8", false);
				start_Hash.put("tMap_8", System.currentTimeMillis());

				currentComponent = "tMap_8";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row14");
				}

				int tos_count_tMap_8 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct> tHash_Lookup_row16 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct>) globalMap
						.get("tHash_Lookup_row16"));

				row16Struct row16HashKey = new row16Struct();
				row16Struct row16Default = new row16Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_8__Struct {
				}
				Var__tMap_8__Struct Var__tMap_8 = new Var__tMap_8__Struct();
// ###############################

// ###############################
// # Outputs initialization
				Attendence_outStruct Attendence_out_tmp = new Attendence_outStruct();
// ###############################

				/**
				 * [tMap_8 begin ] stop
				 */

				/**
				 * [tFileInputJSON_5 begin ] start
				 */

				ok_Hash.put("tFileInputJSON_5", false);
				start_Hash.put("tFileInputJSON_5", System.currentTimeMillis());

				currentComponent = "tFileInputJSON_5";

				int tos_count_tFileInputJSON_5 = 0;

				class JsonPathCache_tFileInputJSON_5 {
					final java.util.Map<String, com.jayway.jsonpath.JsonPath> jsonPathString2compiledJsonPath = new java.util.HashMap<String, com.jayway.jsonpath.JsonPath>();

					public com.jayway.jsonpath.JsonPath getCompiledJsonPath(String jsonPath) {
						if (jsonPathString2compiledJsonPath.containsKey(jsonPath)) {
							return jsonPathString2compiledJsonPath.get(jsonPath);
						} else {
							com.jayway.jsonpath.JsonPath compiledLoopPath = com.jayway.jsonpath.JsonPath
									.compile(jsonPath);
							jsonPathString2compiledJsonPath.put(jsonPath, compiledLoopPath);
							return compiledLoopPath;
						}
					}
				}

				int nb_line_tFileInputJSON_5 = 0;

				JsonPathCache_tFileInputJSON_5 jsonPathCache_tFileInputJSON_5 = new JsonPathCache_tFileInputJSON_5();

				String loopPath_tFileInputJSON_5 = "$[*]";
				java.util.List<Object> resultset_tFileInputJSON_5 = new java.util.ArrayList<Object>();

				java.io.InputStream is_tFileInputJSON_5 = null;
				com.jayway.jsonpath.ParseContext parseContext_tFileInputJSON_5 = com.jayway.jsonpath.JsonPath
						.using(com.jayway.jsonpath.Configuration.defaultConfiguration());
				Object filenameOrStream_tFileInputJSON_5 = null;
				try {
					filenameOrStream_tFileInputJSON_5 = "D:/NIBM/Degree/HND/DWBI/courseWk/sachitha_query/Dim_EmployeeInfo.json";
				} catch (java.lang.Exception e_tFileInputJSON_5) {
					globalMap.put("tFileInputJSON_5_ERROR_MESSAGE", e_tFileInputJSON_5.getMessage());

					globalMap.put("tFileInputJSON_5_ERROR_MESSAGE", e_tFileInputJSON_5.getMessage());
					System.err.println(e_tFileInputJSON_5.getMessage());
				}

				com.jayway.jsonpath.ReadContext document_tFileInputJSON_5 = null;
				try {
					if (filenameOrStream_tFileInputJSON_5 instanceof java.io.InputStream) {
						is_tFileInputJSON_5 = (java.io.InputStream) filenameOrStream_tFileInputJSON_5;
					} else {

						is_tFileInputJSON_5 = new java.io.FileInputStream((String) filenameOrStream_tFileInputJSON_5);

					}

					document_tFileInputJSON_5 = parseContext_tFileInputJSON_5.parse(is_tFileInputJSON_5, "UTF-8");
					com.jayway.jsonpath.JsonPath compiledLoopPath_tFileInputJSON_5 = jsonPathCache_tFileInputJSON_5
							.getCompiledJsonPath(loopPath_tFileInputJSON_5);
					Object result_tFileInputJSON_5 = document_tFileInputJSON_5.read(compiledLoopPath_tFileInputJSON_5,
							net.minidev.json.JSONObject.class);
					if (result_tFileInputJSON_5 instanceof net.minidev.json.JSONArray) {
						resultset_tFileInputJSON_5 = (net.minidev.json.JSONArray) result_tFileInputJSON_5;
					} else {
						resultset_tFileInputJSON_5.add(result_tFileInputJSON_5);
					}
				} catch (java.lang.Exception e_tFileInputJSON_5) {
					globalMap.put("tFileInputJSON_5_ERROR_MESSAGE", e_tFileInputJSON_5.getMessage());
					globalMap.put("tFileInputJSON_5_ERROR_MESSAGE", e_tFileInputJSON_5.getMessage());
					System.err.println(e_tFileInputJSON_5.getMessage());
				} finally {
					if (is_tFileInputJSON_5 != null) {
						is_tFileInputJSON_5.close();
					}
				}

				String jsonPath_tFileInputJSON_5 = null;
				com.jayway.jsonpath.JsonPath compiledJsonPath_tFileInputJSON_5 = null;

				Object value_tFileInputJSON_5 = null;
				Object root_tFileInputJSON_5 = null;
				for (Object row_tFileInputJSON_5 : resultset_tFileInputJSON_5) {
					nb_line_tFileInputJSON_5++;
					row14 = null;
					boolean whetherReject_tFileInputJSON_5 = false;
					row14 = new row14Struct();

					try {
						jsonPath_tFileInputJSON_5 = "EmployeeID";
						compiledJsonPath_tFileInputJSON_5 = jsonPathCache_tFileInputJSON_5
								.getCompiledJsonPath(jsonPath_tFileInputJSON_5);

						try {

							if (jsonPath_tFileInputJSON_5.startsWith("$")) {
								if (root_tFileInputJSON_5 == null) {
									root_tFileInputJSON_5 = document_tFileInputJSON_5
											.read(jsonPathCache_tFileInputJSON_5.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_5 = compiledJsonPath_tFileInputJSON_5.read(root_tFileInputJSON_5);
							} else {
								value_tFileInputJSON_5 = compiledJsonPath_tFileInputJSON_5.read(row_tFileInputJSON_5);
							}
							if (value_tFileInputJSON_5 != null && !value_tFileInputJSON_5.toString().isEmpty()) {
								row14.EmployeeID = ParserUtils.parseTo_Integer(value_tFileInputJSON_5.toString());
							} else {
								row14.EmployeeID =

										null;
							}
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_5) {
							globalMap.put("tFileInputJSON_5_ERROR_MESSAGE", e_tFileInputJSON_5.getMessage());
							row14.EmployeeID =

									null;
						}
						jsonPath_tFileInputJSON_5 = "FirstName";
						compiledJsonPath_tFileInputJSON_5 = jsonPathCache_tFileInputJSON_5
								.getCompiledJsonPath(jsonPath_tFileInputJSON_5);

						try {

							if (jsonPath_tFileInputJSON_5.startsWith("$")) {
								if (root_tFileInputJSON_5 == null) {
									root_tFileInputJSON_5 = document_tFileInputJSON_5
											.read(jsonPathCache_tFileInputJSON_5.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_5 = compiledJsonPath_tFileInputJSON_5.read(root_tFileInputJSON_5);
							} else {
								value_tFileInputJSON_5 = compiledJsonPath_tFileInputJSON_5.read(row_tFileInputJSON_5);
							}
							row14.FirstName = value_tFileInputJSON_5 == null ?

									null : value_tFileInputJSON_5.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_5) {
							globalMap.put("tFileInputJSON_5_ERROR_MESSAGE", e_tFileInputJSON_5.getMessage());
							row14.FirstName =

									null;
						}
						jsonPath_tFileInputJSON_5 = "LastName";
						compiledJsonPath_tFileInputJSON_5 = jsonPathCache_tFileInputJSON_5
								.getCompiledJsonPath(jsonPath_tFileInputJSON_5);

						try {

							if (jsonPath_tFileInputJSON_5.startsWith("$")) {
								if (root_tFileInputJSON_5 == null) {
									root_tFileInputJSON_5 = document_tFileInputJSON_5
											.read(jsonPathCache_tFileInputJSON_5.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_5 = compiledJsonPath_tFileInputJSON_5.read(root_tFileInputJSON_5);
							} else {
								value_tFileInputJSON_5 = compiledJsonPath_tFileInputJSON_5.read(row_tFileInputJSON_5);
							}
							row14.LastName = value_tFileInputJSON_5 == null ?

									null : value_tFileInputJSON_5.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_5) {
							globalMap.put("tFileInputJSON_5_ERROR_MESSAGE", e_tFileInputJSON_5.getMessage());
							row14.LastName =

									null;
						}
						jsonPath_tFileInputJSON_5 = "Department";
						compiledJsonPath_tFileInputJSON_5 = jsonPathCache_tFileInputJSON_5
								.getCompiledJsonPath(jsonPath_tFileInputJSON_5);

						try {

							if (jsonPath_tFileInputJSON_5.startsWith("$")) {
								if (root_tFileInputJSON_5 == null) {
									root_tFileInputJSON_5 = document_tFileInputJSON_5
											.read(jsonPathCache_tFileInputJSON_5.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_5 = compiledJsonPath_tFileInputJSON_5.read(root_tFileInputJSON_5);
							} else {
								value_tFileInputJSON_5 = compiledJsonPath_tFileInputJSON_5.read(row_tFileInputJSON_5);
							}
							row14.Department = value_tFileInputJSON_5 == null ?

									null : value_tFileInputJSON_5.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_5) {
							globalMap.put("tFileInputJSON_5_ERROR_MESSAGE", e_tFileInputJSON_5.getMessage());
							row14.Department =

									null;
						}
						jsonPath_tFileInputJSON_5 = "Job_Title";
						compiledJsonPath_tFileInputJSON_5 = jsonPathCache_tFileInputJSON_5
								.getCompiledJsonPath(jsonPath_tFileInputJSON_5);

						try {

							if (jsonPath_tFileInputJSON_5.startsWith("$")) {
								if (root_tFileInputJSON_5 == null) {
									root_tFileInputJSON_5 = document_tFileInputJSON_5
											.read(jsonPathCache_tFileInputJSON_5.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_5 = compiledJsonPath_tFileInputJSON_5.read(root_tFileInputJSON_5);
							} else {
								value_tFileInputJSON_5 = compiledJsonPath_tFileInputJSON_5.read(row_tFileInputJSON_5);
							}
							row14.Job_Title = value_tFileInputJSON_5 == null ?

									null : value_tFileInputJSON_5.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_5) {
							globalMap.put("tFileInputJSON_5_ERROR_MESSAGE", e_tFileInputJSON_5.getMessage());
							row14.Job_Title =

									null;
						}
						jsonPath_tFileInputJSON_5 = "Hire_Date";
						compiledJsonPath_tFileInputJSON_5 = jsonPathCache_tFileInputJSON_5
								.getCompiledJsonPath(jsonPath_tFileInputJSON_5);

						try {

							if (jsonPath_tFileInputJSON_5.startsWith("$")) {
								if (root_tFileInputJSON_5 == null) {
									root_tFileInputJSON_5 = document_tFileInputJSON_5
											.read(jsonPathCache_tFileInputJSON_5.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_5 = compiledJsonPath_tFileInputJSON_5.read(root_tFileInputJSON_5);
							} else {
								value_tFileInputJSON_5 = compiledJsonPath_tFileInputJSON_5.read(row_tFileInputJSON_5);
							}
							if (value_tFileInputJSON_5 != null && !value_tFileInputJSON_5.toString().isEmpty()) {
								row14.Hire_Date = ParserUtils.parseTo_Date(value_tFileInputJSON_5.toString(),
										"dd-MM-yyyy");
							} else {
								row14.Hire_Date =

										null;
							}
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_5) {
							globalMap.put("tFileInputJSON_5_ERROR_MESSAGE", e_tFileInputJSON_5.getMessage());
							row14.Hire_Date =

									null;
						}
						jsonPath_tFileInputJSON_5 = "Salary";
						compiledJsonPath_tFileInputJSON_5 = jsonPathCache_tFileInputJSON_5
								.getCompiledJsonPath(jsonPath_tFileInputJSON_5);

						try {

							if (jsonPath_tFileInputJSON_5.startsWith("$")) {
								if (root_tFileInputJSON_5 == null) {
									root_tFileInputJSON_5 = document_tFileInputJSON_5
											.read(jsonPathCache_tFileInputJSON_5.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_5 = compiledJsonPath_tFileInputJSON_5.read(root_tFileInputJSON_5);
							} else {
								value_tFileInputJSON_5 = compiledJsonPath_tFileInputJSON_5.read(row_tFileInputJSON_5);
							}
							if (value_tFileInputJSON_5 != null && !value_tFileInputJSON_5.toString().isEmpty()) {
								row14.Salary = ParserUtils.parseTo_Double(value_tFileInputJSON_5.toString());
							} else {
								row14.Salary =

										null;
							}
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_5) {
							globalMap.put("tFileInputJSON_5_ERROR_MESSAGE", e_tFileInputJSON_5.getMessage());
							row14.Salary =

									null;
						}
						jsonPath_tFileInputJSON_5 = "Grade";
						compiledJsonPath_tFileInputJSON_5 = jsonPathCache_tFileInputJSON_5
								.getCompiledJsonPath(jsonPath_tFileInputJSON_5);

						try {

							if (jsonPath_tFileInputJSON_5.startsWith("$")) {
								if (root_tFileInputJSON_5 == null) {
									root_tFileInputJSON_5 = document_tFileInputJSON_5
											.read(jsonPathCache_tFileInputJSON_5.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_5 = compiledJsonPath_tFileInputJSON_5.read(root_tFileInputJSON_5);
							} else {
								value_tFileInputJSON_5 = compiledJsonPath_tFileInputJSON_5.read(row_tFileInputJSON_5);
							}
							if (value_tFileInputJSON_5 != null && !value_tFileInputJSON_5.toString().isEmpty()) {
								row14.Grade = ParserUtils.parseTo_Character(value_tFileInputJSON_5.toString());
							} else {
								row14.Grade =

										null;
							}
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_5) {
							globalMap.put("tFileInputJSON_5_ERROR_MESSAGE", e_tFileInputJSON_5.getMessage());
							row14.Grade =

									null;
						}
						jsonPath_tFileInputJSON_5 = "Start_Date";
						compiledJsonPath_tFileInputJSON_5 = jsonPathCache_tFileInputJSON_5
								.getCompiledJsonPath(jsonPath_tFileInputJSON_5);

						try {

							if (jsonPath_tFileInputJSON_5.startsWith("$")) {
								if (root_tFileInputJSON_5 == null) {
									root_tFileInputJSON_5 = document_tFileInputJSON_5
											.read(jsonPathCache_tFileInputJSON_5.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_5 = compiledJsonPath_tFileInputJSON_5.read(root_tFileInputJSON_5);
							} else {
								value_tFileInputJSON_5 = compiledJsonPath_tFileInputJSON_5.read(row_tFileInputJSON_5);
							}
							if (value_tFileInputJSON_5 != null && !value_tFileInputJSON_5.toString().isEmpty()) {
								row14.Start_Date = ParserUtils.parseTo_Date(value_tFileInputJSON_5.toString(),
										"dd-MM-yyyy");
							} else {
								row14.Start_Date =

										null;
							}
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_5) {
							globalMap.put("tFileInputJSON_5_ERROR_MESSAGE", e_tFileInputJSON_5.getMessage());
							row14.Start_Date =

									null;
						}
						jsonPath_tFileInputJSON_5 = "End_Date";
						compiledJsonPath_tFileInputJSON_5 = jsonPathCache_tFileInputJSON_5
								.getCompiledJsonPath(jsonPath_tFileInputJSON_5);

						try {

							if (jsonPath_tFileInputJSON_5.startsWith("$")) {
								if (root_tFileInputJSON_5 == null) {
									root_tFileInputJSON_5 = document_tFileInputJSON_5
											.read(jsonPathCache_tFileInputJSON_5.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_5 = compiledJsonPath_tFileInputJSON_5.read(root_tFileInputJSON_5);
							} else {
								value_tFileInputJSON_5 = compiledJsonPath_tFileInputJSON_5.read(row_tFileInputJSON_5);
							}
							if (value_tFileInputJSON_5 != null && !value_tFileInputJSON_5.toString().isEmpty()) {
								row14.End_Date = ParserUtils.parseTo_Date(value_tFileInputJSON_5.toString(),
										"dd-MM-yyyy");
							} else {
								row14.End_Date =

										null;
							}
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_5) {
							globalMap.put("tFileInputJSON_5_ERROR_MESSAGE", e_tFileInputJSON_5.getMessage());
							row14.End_Date =

									null;
						}
						jsonPath_tFileInputJSON_5 = "Is_Current";
						compiledJsonPath_tFileInputJSON_5 = jsonPathCache_tFileInputJSON_5
								.getCompiledJsonPath(jsonPath_tFileInputJSON_5);

						try {

							if (jsonPath_tFileInputJSON_5.startsWith("$")) {
								if (root_tFileInputJSON_5 == null) {
									root_tFileInputJSON_5 = document_tFileInputJSON_5
											.read(jsonPathCache_tFileInputJSON_5.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_5 = compiledJsonPath_tFileInputJSON_5.read(root_tFileInputJSON_5);
							} else {
								value_tFileInputJSON_5 = compiledJsonPath_tFileInputJSON_5.read(row_tFileInputJSON_5);
							}
							if (value_tFileInputJSON_5 != null && !value_tFileInputJSON_5.toString().isEmpty()) {
								row14.Is_Current = ParserUtils.parseTo_Boolean(value_tFileInputJSON_5.toString());
							} else {
								row14.Is_Current =

										null;
							}
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_5) {
							globalMap.put("tFileInputJSON_5_ERROR_MESSAGE", e_tFileInputJSON_5.getMessage());
							row14.Is_Current =

									null;
						}
						jsonPath_tFileInputJSON_5 = "Email";
						compiledJsonPath_tFileInputJSON_5 = jsonPathCache_tFileInputJSON_5
								.getCompiledJsonPath(jsonPath_tFileInputJSON_5);

						try {

							if (jsonPath_tFileInputJSON_5.startsWith("$")) {
								if (root_tFileInputJSON_5 == null) {
									root_tFileInputJSON_5 = document_tFileInputJSON_5
											.read(jsonPathCache_tFileInputJSON_5.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_5 = compiledJsonPath_tFileInputJSON_5.read(root_tFileInputJSON_5);
							} else {
								value_tFileInputJSON_5 = compiledJsonPath_tFileInputJSON_5.read(row_tFileInputJSON_5);
							}
							row14.Email = value_tFileInputJSON_5 == null ?

									null : value_tFileInputJSON_5.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_5) {
							globalMap.put("tFileInputJSON_5_ERROR_MESSAGE", e_tFileInputJSON_5.getMessage());
							row14.Email =

									null;
						}
						jsonPath_tFileInputJSON_5 = "Phone";
						compiledJsonPath_tFileInputJSON_5 = jsonPathCache_tFileInputJSON_5
								.getCompiledJsonPath(jsonPath_tFileInputJSON_5);

						try {

							if (jsonPath_tFileInputJSON_5.startsWith("$")) {
								if (root_tFileInputJSON_5 == null) {
									root_tFileInputJSON_5 = document_tFileInputJSON_5
											.read(jsonPathCache_tFileInputJSON_5.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_5 = compiledJsonPath_tFileInputJSON_5.read(root_tFileInputJSON_5);
							} else {
								value_tFileInputJSON_5 = compiledJsonPath_tFileInputJSON_5.read(row_tFileInputJSON_5);
							}
							row14.Phone = value_tFileInputJSON_5 == null ?

									null : value_tFileInputJSON_5.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_5) {
							globalMap.put("tFileInputJSON_5_ERROR_MESSAGE", e_tFileInputJSON_5.getMessage());
							row14.Phone =

									null;
						}
						jsonPath_tFileInputJSON_5 = "Location";
						compiledJsonPath_tFileInputJSON_5 = jsonPathCache_tFileInputJSON_5
								.getCompiledJsonPath(jsonPath_tFileInputJSON_5);

						try {

							if (jsonPath_tFileInputJSON_5.startsWith("$")) {
								if (root_tFileInputJSON_5 == null) {
									root_tFileInputJSON_5 = document_tFileInputJSON_5
											.read(jsonPathCache_tFileInputJSON_5.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_5 = compiledJsonPath_tFileInputJSON_5.read(root_tFileInputJSON_5);
							} else {
								value_tFileInputJSON_5 = compiledJsonPath_tFileInputJSON_5.read(row_tFileInputJSON_5);
							}
							row14.Location = value_tFileInputJSON_5 == null ?

									null : value_tFileInputJSON_5.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_5) {
							globalMap.put("tFileInputJSON_5_ERROR_MESSAGE", e_tFileInputJSON_5.getMessage());
							row14.Location =

									null;
						}
					} catch (java.lang.Exception e_tFileInputJSON_5) {
						globalMap.put("tFileInputJSON_5_ERROR_MESSAGE", e_tFileInputJSON_5.getMessage());
						whetherReject_tFileInputJSON_5 = true;
						System.err.println(e_tFileInputJSON_5.getMessage());
						row14 = null;
						globalMap.put("tFileInputJSON_5_ERROR_MESSAGE", e_tFileInputJSON_5.getMessage());
					}
//}

					/**
					 * [tFileInputJSON_5 begin ] stop
					 */

					/**
					 * [tFileInputJSON_5 main ] start
					 */

					currentComponent = "tFileInputJSON_5";

					tos_count_tFileInputJSON_5++;

					/**
					 * [tFileInputJSON_5 main ] stop
					 */

					/**
					 * [tFileInputJSON_5 process_data_begin ] start
					 */

					currentComponent = "tFileInputJSON_5";

					/**
					 * [tFileInputJSON_5 process_data_begin ] stop
					 */
// Start of branch "row14"
					if (row14 != null) {

						/**
						 * [tMap_8 main ] start
						 */

						currentComponent = "tMap_8";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row14"

							);
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_8 = false;
						boolean mainRowRejected_tMap_8 = false;

						///////////////////////////////////////////////
						// Starting Lookup Table "row16"
						///////////////////////////////////////////////

						boolean forceLooprow16 = false;

						row16Struct row16ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_8) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_8 = false;

							row16HashKey.employee_id = row14.EmployeeID;

							row16HashKey.hashCodeDirty = true;

							tHash_Lookup_row16.lookup(row16HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row16 != null && tHash_Lookup_row16.getCount(row16HashKey) > 1) { // G 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
							// 'row16' and it contains more one result from keys : row16.employee_id = '" +
							// row16HashKey.employee_id + "'");
						} // G 071

						row16Struct row16 = null;

						row16Struct fromLookup_row16 = null;
						row16 = row16Default;

						if (tHash_Lookup_row16 != null && tHash_Lookup_row16.hasNext()) { // G 099

							fromLookup_row16 = tHash_Lookup_row16.next();

						} // G 099

						if (fromLookup_row16 != null) {
							row16 = fromLookup_row16;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
							// ###############################
							// # Output tables

							Attendence_out = null;

// # Output table : 'Attendence_out'
							Attendence_out_tmp.ATTENDANCEID = row16.AttendenceID;
							Attendence_out_tmp.EMPLOYEE_ID = row16.employee_id;
							Attendence_out_tmp.ATTENDANCEDATE = row16.date;
							Attendence_out_tmp.SCHEDULED_START_TIME = row16.scheduled_start_time;
							Attendence_out_tmp.ACTUAL_START_TIME = row16.actual_start_time;
							Attendence_out_tmp.LATE_MINUTES = row16.scheduled_start_time != null
									&& row16.actual_start_time != null
											? (int) TalendDate.diffDate(
													TalendDate.parseDate("HH:mm", row16.scheduled_start_time),
													TalendDate.parseDate("HH:mm", row16.actual_start_time), "mm")
											: null;
							Attendence_out_tmp.ATTENDANCE_STATUS = row16.attendence_status;
							Attendence_out_tmp.ABSENCE_REASON = row16.absence_reason != null ? row16.absence_reason
									: "not absent";
							Attendence_out = Attendence_out_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_8 = false;

						tos_count_tMap_8++;

						/**
						 * [tMap_8 main ] stop
						 */

						/**
						 * [tMap_8 process_data_begin ] start
						 */

						currentComponent = "tMap_8";

						/**
						 * [tMap_8 process_data_begin ] stop
						 */
// Start of branch "Attendence_out"
						if (Attendence_out != null) {

							/**
							 * [tDBOutput_8 main ] start
							 */

							currentComponent = "tDBOutput_8";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "Attendence_out"

								);
							}

							whetherReject_tDBOutput_8 = false;
							if (Attendence_out.ATTENDANCEID == null) {
								pstmt_tDBOutput_8.setNull(1, java.sql.Types.INTEGER);
							} else {
								pstmt_tDBOutput_8.setInt(1, Attendence_out.ATTENDANCEID);
							}

							if (Attendence_out.EMPLOYEE_ID == null) {
								pstmt_tDBOutput_8.setNull(2, java.sql.Types.INTEGER);
							} else {
								pstmt_tDBOutput_8.setInt(2, Attendence_out.EMPLOYEE_ID);
							}

							if (Attendence_out.ATTENDANCEDATE != null) {
								pstmt_tDBOutput_8.setObject(3,
										new java.sql.Timestamp(Attendence_out.ATTENDANCEDATE.getTime()),
										java.sql.Types.DATE);
							} else {
								pstmt_tDBOutput_8.setNull(3, java.sql.Types.DATE);
							}

							if (Attendence_out.SCHEDULED_START_TIME == null) {
								pstmt_tDBOutput_8.setNull(4, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_8.setString(4, Attendence_out.SCHEDULED_START_TIME);
							}

							if (Attendence_out.ACTUAL_START_TIME == null) {
								pstmt_tDBOutput_8.setNull(5, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_8.setString(5, Attendence_out.ACTUAL_START_TIME);
							}

							if (Attendence_out.LATE_MINUTES == null) {
								pstmt_tDBOutput_8.setNull(6, java.sql.Types.INTEGER);
							} else {
								pstmt_tDBOutput_8.setInt(6, Attendence_out.LATE_MINUTES);
							}

							if (Attendence_out.ATTENDANCE_STATUS == null) {
								pstmt_tDBOutput_8.setNull(7, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_8.setString(7, Attendence_out.ATTENDANCE_STATUS);
							}

							if (Attendence_out.ABSENCE_REASON == null) {
								pstmt_tDBOutput_8.setNull(8, java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_8.setString(8, Attendence_out.ABSENCE_REASON);
							}

							pstmt_tDBOutput_8.addBatch();
							nb_line_tDBOutput_8++;
							batchSizeCounter_tDBOutput_8++;
							if (batchSize_tDBOutput_8 > 0 && batchSize_tDBOutput_8 <= batchSizeCounter_tDBOutput_8) {
								try {
									pstmt_tDBOutput_8.executeBatch();
								} catch (java.sql.BatchUpdateException e_tDBOutput_8) {
									globalMap.put("tDBOutput_8_ERROR_MESSAGE", e_tDBOutput_8.getMessage());
									java.sql.SQLException ne_tDBOutput_8 = e_tDBOutput_8.getNextException(),
											sqle_tDBOutput_8 = null;
									String errormessage_tDBOutput_8;
									if (ne_tDBOutput_8 != null) {
										// build new exception to provide the original cause
										sqle_tDBOutput_8 = new java.sql.SQLException(
												e_tDBOutput_8.getMessage() + "\ncaused by: "
														+ ne_tDBOutput_8.getMessage(),
												ne_tDBOutput_8.getSQLState(), ne_tDBOutput_8.getErrorCode(),
												ne_tDBOutput_8);
										errormessage_tDBOutput_8 = sqle_tDBOutput_8.getMessage();
									} else {
										errormessage_tDBOutput_8 = e_tDBOutput_8.getMessage();
									}

									System.err.println(errormessage_tDBOutput_8);

								}
								tmp_batchUpdateCount_tDBOutput_8 = pstmt_tDBOutput_8.getUpdateCount();
								insertedCount_tDBOutput_8 += (tmp_batchUpdateCount_tDBOutput_8 != -1
										? tmp_batchUpdateCount_tDBOutput_8
										: 0);
								rowsToCommitCount_tDBOutput_8 += (tmp_batchUpdateCount_tDBOutput_8 != -1
										? tmp_batchUpdateCount_tDBOutput_8
										: 0);
								batchSizeCounter_tDBOutput_8 = 0;
							}
							commitCounter_tDBOutput_8++;
							if (commitEvery_tDBOutput_8 <= commitCounter_tDBOutput_8) {
								if (batchSizeCounter_tDBOutput_8 > 0) {
									try {
										pstmt_tDBOutput_8.executeBatch();
									} catch (java.sql.BatchUpdateException e_tDBOutput_8) {
										globalMap.put("tDBOutput_8_ERROR_MESSAGE", e_tDBOutput_8.getMessage());
										java.sql.SQLException ne_tDBOutput_8 = e_tDBOutput_8.getNextException(),
												sqle_tDBOutput_8 = null;
										String errormessage_tDBOutput_8;
										if (ne_tDBOutput_8 != null) {
											// build new exception to provide the original cause
											sqle_tDBOutput_8 = new java.sql.SQLException(
													e_tDBOutput_8.getMessage() + "\ncaused by: "
															+ ne_tDBOutput_8.getMessage(),
													ne_tDBOutput_8.getSQLState(), ne_tDBOutput_8.getErrorCode(),
													ne_tDBOutput_8);
											errormessage_tDBOutput_8 = sqle_tDBOutput_8.getMessage();
										} else {
											errormessage_tDBOutput_8 = e_tDBOutput_8.getMessage();
										}

										System.err.println(errormessage_tDBOutput_8);

									}
									tmp_batchUpdateCount_tDBOutput_8 = pstmt_tDBOutput_8.getUpdateCount();
									insertedCount_tDBOutput_8 += (tmp_batchUpdateCount_tDBOutput_8 != -1
											? tmp_batchUpdateCount_tDBOutput_8
											: 0);
									rowsToCommitCount_tDBOutput_8 += (tmp_batchUpdateCount_tDBOutput_8 != -1
											? tmp_batchUpdateCount_tDBOutput_8
											: 0);
								}
								if (rowsToCommitCount_tDBOutput_8 != 0) {

								}
								conn_tDBOutput_8.commit();
								if (rowsToCommitCount_tDBOutput_8 != 0) {

									rowsToCommitCount_tDBOutput_8 = 0;
								}
								commitCounter_tDBOutput_8 = 0;
								batchSizeCounter_tDBOutput_8 = 0;
							}

							tos_count_tDBOutput_8++;

							/**
							 * [tDBOutput_8 main ] stop
							 */

							/**
							 * [tDBOutput_8 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_8";

							/**
							 * [tDBOutput_8 process_data_begin ] stop
							 */

							/**
							 * [tDBOutput_8 process_data_end ] start
							 */

							currentComponent = "tDBOutput_8";

							/**
							 * [tDBOutput_8 process_data_end ] stop
							 */

						} // End of branch "Attendence_out"

						/**
						 * [tMap_8 process_data_end ] start
						 */

						currentComponent = "tMap_8";

						/**
						 * [tMap_8 process_data_end ] stop
						 */

					} // End of branch "row14"

					/**
					 * [tFileInputJSON_5 process_data_end ] start
					 */

					currentComponent = "tFileInputJSON_5";

					/**
					 * [tFileInputJSON_5 process_data_end ] stop
					 */

					/**
					 * [tFileInputJSON_5 end ] start
					 */

					currentComponent = "tFileInputJSON_5";

				}
				globalMap.put("tFileInputJSON_5_NB_LINE", nb_line_tFileInputJSON_5);

				ok_Hash.put("tFileInputJSON_5", true);
				end_Hash.put("tFileInputJSON_5", System.currentTimeMillis());

				/**
				 * [tFileInputJSON_5 end ] stop
				 */

				/**
				 * [tMap_8 end ] start
				 */

				currentComponent = "tMap_8";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row16 != null) {
					tHash_Lookup_row16.endGet();
				}
				globalMap.remove("tHash_Lookup_row16");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row14");
				}

				ok_Hash.put("tMap_8", true);
				end_Hash.put("tMap_8", System.currentTimeMillis());

				/**
				 * [tMap_8 end ] stop
				 */

				/**
				 * [tDBOutput_8 end ] start
				 */

				currentComponent = "tDBOutput_8";

				if (batchSizeCounter_tDBOutput_8 > 0) {
					try {
						if (pstmt_tDBOutput_8 != null) {

							pstmt_tDBOutput_8.executeBatch();

						}
					} catch (java.sql.BatchUpdateException e_tDBOutput_8) {
						globalMap.put("tDBOutput_8_ERROR_MESSAGE", e_tDBOutput_8.getMessage());
						java.sql.SQLException ne_tDBOutput_8 = e_tDBOutput_8.getNextException(),
								sqle_tDBOutput_8 = null;
						String errormessage_tDBOutput_8;
						if (ne_tDBOutput_8 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_8 = new java.sql.SQLException(
									e_tDBOutput_8.getMessage() + "\ncaused by: " + ne_tDBOutput_8.getMessage(),
									ne_tDBOutput_8.getSQLState(), ne_tDBOutput_8.getErrorCode(), ne_tDBOutput_8);
							errormessage_tDBOutput_8 = sqle_tDBOutput_8.getMessage();
						} else {
							errormessage_tDBOutput_8 = e_tDBOutput_8.getMessage();
						}

						System.err.println(errormessage_tDBOutput_8);

					}
					if (pstmt_tDBOutput_8 != null) {
						tmp_batchUpdateCount_tDBOutput_8 = pstmt_tDBOutput_8.getUpdateCount();

						insertedCount_tDBOutput_8

								+= (tmp_batchUpdateCount_tDBOutput_8 != -1 ? tmp_batchUpdateCount_tDBOutput_8 : 0);
						rowsToCommitCount_tDBOutput_8 += (tmp_batchUpdateCount_tDBOutput_8 != -1
								? tmp_batchUpdateCount_tDBOutput_8
								: 0);
					}
				}
				if (pstmt_tDBOutput_8 != null) {

					pstmt_tDBOutput_8.close();
					resourceMap.remove("pstmt_tDBOutput_8");

				}
				resourceMap.put("statementClosed_tDBOutput_8", true);
				if (commitCounter_tDBOutput_8 > 0 && rowsToCommitCount_tDBOutput_8 != 0) {

				}
				conn_tDBOutput_8.commit();
				if (commitCounter_tDBOutput_8 > 0 && rowsToCommitCount_tDBOutput_8 != 0) {

					rowsToCommitCount_tDBOutput_8 = 0;
				}
				commitCounter_tDBOutput_8 = 0;

				conn_tDBOutput_8.close();

				resourceMap.put("finish_tDBOutput_8", true);

				nb_line_deleted_tDBOutput_8 = nb_line_deleted_tDBOutput_8 + deletedCount_tDBOutput_8;
				nb_line_update_tDBOutput_8 = nb_line_update_tDBOutput_8 + updatedCount_tDBOutput_8;
				nb_line_inserted_tDBOutput_8 = nb_line_inserted_tDBOutput_8 + insertedCount_tDBOutput_8;
				nb_line_rejected_tDBOutput_8 = nb_line_rejected_tDBOutput_8 + rejectedCount_tDBOutput_8;

				globalMap.put("tDBOutput_8_NB_LINE", nb_line_tDBOutput_8);
				globalMap.put("tDBOutput_8_NB_LINE_UPDATED", nb_line_update_tDBOutput_8);
				globalMap.put("tDBOutput_8_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_8);
				globalMap.put("tDBOutput_8_NB_LINE_DELETED", nb_line_deleted_tDBOutput_8);
				globalMap.put("tDBOutput_8_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_8);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "Attendence_out");
				}

				ok_Hash.put("tDBOutput_8", true);
				end_Hash.put("tDBOutput_8", System.currentTimeMillis());

				/**
				 * [tDBOutput_8 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_8"
			globalMap.remove("tHash_Lookup_row16");

			try {

				/**
				 * [tFileInputJSON_5 finally ] start
				 */

				currentComponent = "tFileInputJSON_5";

				/**
				 * [tFileInputJSON_5 finally ] stop
				 */

				/**
				 * [tMap_8 finally ] start
				 */

				currentComponent = "tMap_8";

				/**
				 * [tMap_8 finally ] stop
				 */

				/**
				 * [tDBOutput_8 finally ] start
				 */

				currentComponent = "tDBOutput_8";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_8") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_8 = null;
						if ((pstmtToClose_tDBOutput_8 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_8")) != null) {
							pstmtToClose_tDBOutput_8.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_8") == null) {
						java.sql.Connection ctn_tDBOutput_8 = null;
						if ((ctn_tDBOutput_8 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_8")) != null) {
							try {
								ctn_tDBOutput_8.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_8) {
								String errorMessage_tDBOutput_8 = "failed to close the connection in tDBOutput_8 :"
										+ sqlEx_tDBOutput_8.getMessage();
								System.err.println(errorMessage_tDBOutput_8);
							}
						}
					}
				}

				/**
				 * [tDBOutput_8 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputJSON_5_SUBPROCESS_STATE", 1);
	}

	public static class row16Struct implements routines.system.IPersistableComparableLookupRow<row16Struct> {
		final static byte[] commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];
		static byte[] commonByteArray_CLOTHS_STORE_ETLProcessClothingStore = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer AttendenceID;

		public Integer getAttendenceID() {
			return this.AttendenceID;
		}

		public Integer employee_id;

		public Integer getEmployee_id() {
			return this.employee_id;
		}

		public java.util.Date date;

		public java.util.Date getDate() {
			return this.date;
		}

		public String scheduled_start_time;

		public String getScheduled_start_time() {
			return this.scheduled_start_time;
		}

		public String actual_start_time;

		public String getActual_start_time() {
			return this.actual_start_time;
		}

		public String attendence_status;

		public String getAttendence_status() {
			return this.attendence_status;
		}

		public String absence_reason;

		public String getAbsence_reason() {
			return this.absence_reason;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.employee_id == null) ? 0 : this.employee_id.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row16Struct other = (row16Struct) obj;

			if (this.employee_id == null) {
				if (other.employee_id != null)
					return false;

			} else if (!this.employee_id.equals(other.employee_id))

				return false;

			return true;
		}

		public void copyDataTo(row16Struct other) {

			other.AttendenceID = this.AttendenceID;
			other.employee_id = this.employee_id;
			other.date = this.date;
			other.scheduled_start_time = this.scheduled_start_time;
			other.actual_start_time = this.actual_start_time;
			other.attendence_status = this.attendence_status;
			other.absence_reason = this.absence_reason;

		}

		public void copyKeysDataTo(row16Struct other) {

			other.employee_id = this.employee_id;

		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = unmarshaller.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				unmarshaller.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.employee_id = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_CLOTHS_STORE_ETLProcessClothingStore) {

				try {

					int length = 0;

					this.employee_id = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.employee_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.employee_id, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.AttendenceID = readInteger(dis, ois);

				this.date = readDate(dis, ois);

				this.scheduled_start_time = readString(dis, ois);

				this.actual_start_time = readString(dis, ois);

				this.attendence_status = readString(dis, ois);

				this.absence_reason = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
			try {
				int length = 0;

				this.AttendenceID = readInteger(dis, objectIn);

				this.date = readDate(dis, objectIn);

				this.scheduled_start_time = readString(dis, objectIn);

				this.actual_start_time = readString(dis, objectIn);

				this.attendence_status = readString(dis, objectIn);

				this.absence_reason = readString(dis, objectIn);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeInteger(this.AttendenceID, dos, oos);

				writeDate(this.date, dos, oos);

				writeString(this.scheduled_start_time, dos, oos);

				writeString(this.actual_start_time, dos, oos);

				writeString(this.attendence_status, dos, oos);

				writeString(this.absence_reason, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut) {
			try {

				writeInteger(this.AttendenceID, dos, objectOut);

				writeDate(this.date, dos, objectOut);

				writeString(this.scheduled_start_time, dos, objectOut);

				writeString(this.actual_start_time, dos, objectOut);

				writeString(this.attendence_status, dos, objectOut);

				writeString(this.absence_reason, dos, objectOut);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}

		public boolean supportMarshaller() {
			return true;
		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("AttendenceID=" + String.valueOf(AttendenceID));
			sb.append(",employee_id=" + String.valueOf(employee_id));
			sb.append(",date=" + String.valueOf(date));
			sb.append(",scheduled_start_time=" + scheduled_start_time);
			sb.append(",actual_start_time=" + actual_start_time);
			sb.append(",attendence_status=" + attendence_status);
			sb.append(",absence_reason=" + absence_reason);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row16Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.employee_id, other.employee_id);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputJSON_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputJSON_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row16Struct row16 = new row16Struct();

				/**
				 * [tAdvancedHash_row16 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row16", false);
				start_Hash.put("tAdvancedHash_row16", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row16";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row16");
				}

				int tos_count_tAdvancedHash_row16 = 0;

				// connection name:row16
				// source node:tFileInputJSON_4 - inputs:(after_tFileInputJSON_5)
				// outputs:(row16,row16) | target node:tAdvancedHash_row16 - inputs:(row16)
				// outputs:()
				// linked node: tMap_8 - inputs:(row14,row16) outputs:(Attendence_out)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row16 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct> tHash_Lookup_row16 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row16Struct>getLookup(matchingModeEnum_row16);

				globalMap.put("tHash_Lookup_row16", tHash_Lookup_row16);

				/**
				 * [tAdvancedHash_row16 begin ] stop
				 */

				/**
				 * [tFileInputJSON_4 begin ] start
				 */

				ok_Hash.put("tFileInputJSON_4", false);
				start_Hash.put("tFileInputJSON_4", System.currentTimeMillis());

				currentComponent = "tFileInputJSON_4";

				int tos_count_tFileInputJSON_4 = 0;

				class JsonPathCache_tFileInputJSON_4 {
					final java.util.Map<String, com.jayway.jsonpath.JsonPath> jsonPathString2compiledJsonPath = new java.util.HashMap<String, com.jayway.jsonpath.JsonPath>();

					public com.jayway.jsonpath.JsonPath getCompiledJsonPath(String jsonPath) {
						if (jsonPathString2compiledJsonPath.containsKey(jsonPath)) {
							return jsonPathString2compiledJsonPath.get(jsonPath);
						} else {
							com.jayway.jsonpath.JsonPath compiledLoopPath = com.jayway.jsonpath.JsonPath
									.compile(jsonPath);
							jsonPathString2compiledJsonPath.put(jsonPath, compiledLoopPath);
							return compiledLoopPath;
						}
					}
				}

				int nb_line_tFileInputJSON_4 = 0;

				JsonPathCache_tFileInputJSON_4 jsonPathCache_tFileInputJSON_4 = new JsonPathCache_tFileInputJSON_4();

				String loopPath_tFileInputJSON_4 = "$[*]";
				java.util.List<Object> resultset_tFileInputJSON_4 = new java.util.ArrayList<Object>();

				java.io.InputStream is_tFileInputJSON_4 = null;
				com.jayway.jsonpath.ParseContext parseContext_tFileInputJSON_4 = com.jayway.jsonpath.JsonPath
						.using(com.jayway.jsonpath.Configuration.defaultConfiguration());
				Object filenameOrStream_tFileInputJSON_4 = null;
				try {
					filenameOrStream_tFileInputJSON_4 = "D:/NIBM/Degree/HND/DWBI/courseWk/Final-New-Viraj/dim_attendance_4500.json";
				} catch (java.lang.Exception e_tFileInputJSON_4) {
					globalMap.put("tFileInputJSON_4_ERROR_MESSAGE", e_tFileInputJSON_4.getMessage());

					globalMap.put("tFileInputJSON_4_ERROR_MESSAGE", e_tFileInputJSON_4.getMessage());
					System.err.println(e_tFileInputJSON_4.getMessage());
				}

				com.jayway.jsonpath.ReadContext document_tFileInputJSON_4 = null;
				try {
					if (filenameOrStream_tFileInputJSON_4 instanceof java.io.InputStream) {
						is_tFileInputJSON_4 = (java.io.InputStream) filenameOrStream_tFileInputJSON_4;
					} else {

						is_tFileInputJSON_4 = new java.io.FileInputStream((String) filenameOrStream_tFileInputJSON_4);

					}

					document_tFileInputJSON_4 = parseContext_tFileInputJSON_4.parse(is_tFileInputJSON_4, "UTF-8");
					com.jayway.jsonpath.JsonPath compiledLoopPath_tFileInputJSON_4 = jsonPathCache_tFileInputJSON_4
							.getCompiledJsonPath(loopPath_tFileInputJSON_4);
					Object result_tFileInputJSON_4 = document_tFileInputJSON_4.read(compiledLoopPath_tFileInputJSON_4,
							net.minidev.json.JSONObject.class);
					if (result_tFileInputJSON_4 instanceof net.minidev.json.JSONArray) {
						resultset_tFileInputJSON_4 = (net.minidev.json.JSONArray) result_tFileInputJSON_4;
					} else {
						resultset_tFileInputJSON_4.add(result_tFileInputJSON_4);
					}
				} catch (java.lang.Exception e_tFileInputJSON_4) {
					globalMap.put("tFileInputJSON_4_ERROR_MESSAGE", e_tFileInputJSON_4.getMessage());
					globalMap.put("tFileInputJSON_4_ERROR_MESSAGE", e_tFileInputJSON_4.getMessage());
					System.err.println(e_tFileInputJSON_4.getMessage());
				} finally {
					if (is_tFileInputJSON_4 != null) {
						is_tFileInputJSON_4.close();
					}
				}

				String jsonPath_tFileInputJSON_4 = null;
				com.jayway.jsonpath.JsonPath compiledJsonPath_tFileInputJSON_4 = null;

				Object value_tFileInputJSON_4 = null;
				Object root_tFileInputJSON_4 = null;
				for (Object row_tFileInputJSON_4 : resultset_tFileInputJSON_4) {
					nb_line_tFileInputJSON_4++;
					row16 = null;
					row16 = null;
					boolean whetherReject_tFileInputJSON_4 = false;
					row16 = new row16Struct();

					try {
						jsonPath_tFileInputJSON_4 = "AttendenceID";
						compiledJsonPath_tFileInputJSON_4 = jsonPathCache_tFileInputJSON_4
								.getCompiledJsonPath(jsonPath_tFileInputJSON_4);

						try {

							if (jsonPath_tFileInputJSON_4.startsWith("$")) {
								if (root_tFileInputJSON_4 == null) {
									root_tFileInputJSON_4 = document_tFileInputJSON_4
											.read(jsonPathCache_tFileInputJSON_4.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_4 = compiledJsonPath_tFileInputJSON_4.read(root_tFileInputJSON_4);
							} else {
								value_tFileInputJSON_4 = compiledJsonPath_tFileInputJSON_4.read(row_tFileInputJSON_4);
							}
							if (value_tFileInputJSON_4 != null && !value_tFileInputJSON_4.toString().isEmpty()) {
								row16.AttendenceID = ParserUtils.parseTo_Integer(value_tFileInputJSON_4.toString());
							} else {
								row16.AttendenceID =

										null;
							}
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_4) {
							globalMap.put("tFileInputJSON_4_ERROR_MESSAGE", e_tFileInputJSON_4.getMessage());
							row16.AttendenceID =

									null;
						}
						jsonPath_tFileInputJSON_4 = "employee_id";
						compiledJsonPath_tFileInputJSON_4 = jsonPathCache_tFileInputJSON_4
								.getCompiledJsonPath(jsonPath_tFileInputJSON_4);

						try {

							if (jsonPath_tFileInputJSON_4.startsWith("$")) {
								if (root_tFileInputJSON_4 == null) {
									root_tFileInputJSON_4 = document_tFileInputJSON_4
											.read(jsonPathCache_tFileInputJSON_4.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_4 = compiledJsonPath_tFileInputJSON_4.read(root_tFileInputJSON_4);
							} else {
								value_tFileInputJSON_4 = compiledJsonPath_tFileInputJSON_4.read(row_tFileInputJSON_4);
							}
							if (value_tFileInputJSON_4 != null && !value_tFileInputJSON_4.toString().isEmpty()) {
								row16.employee_id = ParserUtils.parseTo_Integer(value_tFileInputJSON_4.toString());
							} else {
								row16.employee_id =

										null;
							}
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_4) {
							globalMap.put("tFileInputJSON_4_ERROR_MESSAGE", e_tFileInputJSON_4.getMessage());
							row16.employee_id =

									null;
						}
						jsonPath_tFileInputJSON_4 = "date";
						compiledJsonPath_tFileInputJSON_4 = jsonPathCache_tFileInputJSON_4
								.getCompiledJsonPath(jsonPath_tFileInputJSON_4);

						try {

							if (jsonPath_tFileInputJSON_4.startsWith("$")) {
								if (root_tFileInputJSON_4 == null) {
									root_tFileInputJSON_4 = document_tFileInputJSON_4
											.read(jsonPathCache_tFileInputJSON_4.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_4 = compiledJsonPath_tFileInputJSON_4.read(root_tFileInputJSON_4);
							} else {
								value_tFileInputJSON_4 = compiledJsonPath_tFileInputJSON_4.read(row_tFileInputJSON_4);
							}
							if (value_tFileInputJSON_4 != null && !value_tFileInputJSON_4.toString().isEmpty()) {
								row16.date = ParserUtils.parseTo_Date(value_tFileInputJSON_4.toString(), "dd-MM-yyyy");
							} else {
								row16.date =

										null;
							}
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_4) {
							globalMap.put("tFileInputJSON_4_ERROR_MESSAGE", e_tFileInputJSON_4.getMessage());
							row16.date =

									null;
						}
						jsonPath_tFileInputJSON_4 = "scheduled_start_time";
						compiledJsonPath_tFileInputJSON_4 = jsonPathCache_tFileInputJSON_4
								.getCompiledJsonPath(jsonPath_tFileInputJSON_4);

						try {

							if (jsonPath_tFileInputJSON_4.startsWith("$")) {
								if (root_tFileInputJSON_4 == null) {
									root_tFileInputJSON_4 = document_tFileInputJSON_4
											.read(jsonPathCache_tFileInputJSON_4.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_4 = compiledJsonPath_tFileInputJSON_4.read(root_tFileInputJSON_4);
							} else {
								value_tFileInputJSON_4 = compiledJsonPath_tFileInputJSON_4.read(row_tFileInputJSON_4);
							}
							row16.scheduled_start_time = value_tFileInputJSON_4 == null ?

									null : value_tFileInputJSON_4.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_4) {
							globalMap.put("tFileInputJSON_4_ERROR_MESSAGE", e_tFileInputJSON_4.getMessage());
							row16.scheduled_start_time =

									null;
						}
						jsonPath_tFileInputJSON_4 = "actual_start_time";
						compiledJsonPath_tFileInputJSON_4 = jsonPathCache_tFileInputJSON_4
								.getCompiledJsonPath(jsonPath_tFileInputJSON_4);

						try {

							if (jsonPath_tFileInputJSON_4.startsWith("$")) {
								if (root_tFileInputJSON_4 == null) {
									root_tFileInputJSON_4 = document_tFileInputJSON_4
											.read(jsonPathCache_tFileInputJSON_4.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_4 = compiledJsonPath_tFileInputJSON_4.read(root_tFileInputJSON_4);
							} else {
								value_tFileInputJSON_4 = compiledJsonPath_tFileInputJSON_4.read(row_tFileInputJSON_4);
							}
							row16.actual_start_time = value_tFileInputJSON_4 == null ?

									null : value_tFileInputJSON_4.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_4) {
							globalMap.put("tFileInputJSON_4_ERROR_MESSAGE", e_tFileInputJSON_4.getMessage());
							row16.actual_start_time =

									null;
						}
						jsonPath_tFileInputJSON_4 = "attendence_status";
						compiledJsonPath_tFileInputJSON_4 = jsonPathCache_tFileInputJSON_4
								.getCompiledJsonPath(jsonPath_tFileInputJSON_4);

						try {

							if (jsonPath_tFileInputJSON_4.startsWith("$")) {
								if (root_tFileInputJSON_4 == null) {
									root_tFileInputJSON_4 = document_tFileInputJSON_4
											.read(jsonPathCache_tFileInputJSON_4.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_4 = compiledJsonPath_tFileInputJSON_4.read(root_tFileInputJSON_4);
							} else {
								value_tFileInputJSON_4 = compiledJsonPath_tFileInputJSON_4.read(row_tFileInputJSON_4);
							}
							row16.attendence_status = value_tFileInputJSON_4 == null ?

									null : value_tFileInputJSON_4.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_4) {
							globalMap.put("tFileInputJSON_4_ERROR_MESSAGE", e_tFileInputJSON_4.getMessage());
							row16.attendence_status =

									null;
						}
						jsonPath_tFileInputJSON_4 = "absence_reason";
						compiledJsonPath_tFileInputJSON_4 = jsonPathCache_tFileInputJSON_4
								.getCompiledJsonPath(jsonPath_tFileInputJSON_4);

						try {

							if (jsonPath_tFileInputJSON_4.startsWith("$")) {
								if (root_tFileInputJSON_4 == null) {
									root_tFileInputJSON_4 = document_tFileInputJSON_4
											.read(jsonPathCache_tFileInputJSON_4.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_4 = compiledJsonPath_tFileInputJSON_4.read(root_tFileInputJSON_4);
							} else {
								value_tFileInputJSON_4 = compiledJsonPath_tFileInputJSON_4.read(row_tFileInputJSON_4);
							}
							row16.absence_reason = value_tFileInputJSON_4 == null ?

									null : value_tFileInputJSON_4.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_4) {
							globalMap.put("tFileInputJSON_4_ERROR_MESSAGE", e_tFileInputJSON_4.getMessage());
							row16.absence_reason =

									null;
						}
					} catch (java.lang.Exception e_tFileInputJSON_4) {
						globalMap.put("tFileInputJSON_4_ERROR_MESSAGE", e_tFileInputJSON_4.getMessage());
						whetherReject_tFileInputJSON_4 = true;
						System.err.println(e_tFileInputJSON_4.getMessage());
						row16 = null;
						globalMap.put("tFileInputJSON_4_ERROR_MESSAGE", e_tFileInputJSON_4.getMessage());
					}
//}

					/**
					 * [tFileInputJSON_4 begin ] stop
					 */

					/**
					 * [tFileInputJSON_4 main ] start
					 */

					currentComponent = "tFileInputJSON_4";

					tos_count_tFileInputJSON_4++;

					/**
					 * [tFileInputJSON_4 main ] stop
					 */

					/**
					 * [tFileInputJSON_4 process_data_begin ] start
					 */

					currentComponent = "tFileInputJSON_4";

					/**
					 * [tFileInputJSON_4 process_data_begin ] stop
					 */
// Start of branch "row16"
					if (row16 != null) {

						/**
						 * [tAdvancedHash_row16 main ] start
						 */

						currentComponent = "tAdvancedHash_row16";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row16"

							);
						}

						row16Struct row16_HashRow = new row16Struct();

						row16_HashRow.AttendenceID = row16.AttendenceID;

						row16_HashRow.employee_id = row16.employee_id;

						row16_HashRow.date = row16.date;

						row16_HashRow.scheduled_start_time = row16.scheduled_start_time;

						row16_HashRow.actual_start_time = row16.actual_start_time;

						row16_HashRow.attendence_status = row16.attendence_status;

						row16_HashRow.absence_reason = row16.absence_reason;

						tHash_Lookup_row16.put(row16_HashRow);

						tos_count_tAdvancedHash_row16++;

						/**
						 * [tAdvancedHash_row16 main ] stop
						 */

						/**
						 * [tAdvancedHash_row16 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row16";

						/**
						 * [tAdvancedHash_row16 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row16 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row16";

						/**
						 * [tAdvancedHash_row16 process_data_end ] stop
						 */

					} // End of branch "row16"

					/**
					 * [tFileInputJSON_4 process_data_end ] start
					 */

					currentComponent = "tFileInputJSON_4";

					/**
					 * [tFileInputJSON_4 process_data_end ] stop
					 */

					/**
					 * [tFileInputJSON_4 end ] start
					 */

					currentComponent = "tFileInputJSON_4";

				}
				globalMap.put("tFileInputJSON_4_NB_LINE", nb_line_tFileInputJSON_4);

				ok_Hash.put("tFileInputJSON_4", true);
				end_Hash.put("tFileInputJSON_4", System.currentTimeMillis());

				/**
				 * [tFileInputJSON_4 end ] stop
				 */

				/**
				 * [tAdvancedHash_row16 end ] start
				 */

				currentComponent = "tAdvancedHash_row16";

				tHash_Lookup_row16.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row16");
				}

				ok_Hash.put("tAdvancedHash_row16", true);
				end_Hash.put("tAdvancedHash_row16", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row16 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputJSON_4 finally ] start
				 */

				currentComponent = "tFileInputJSON_4";

				/**
				 * [tFileInputJSON_4 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row16 finally ] start
				 */

				currentComponent = "tAdvancedHash_row16";

				/**
				 * [tAdvancedHash_row16 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputJSON_4_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	protected PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final ETLProcessClothingStore ETLProcessClothingStoreClass = new ETLProcessClothingStore();

		int exitCode = ETLProcessClothingStoreClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}
		boolean inOSGi = routines.system.BundleUtils.inOSGi();

		if (inOSGi) {
			java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

			if (jobProperties != null && jobProperties.get("context") != null) {
				contextStr = (String) jobProperties.get("context");
			}
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = ETLProcessClothingStore.class.getClassLoader().getResourceAsStream(
					"cloths_store/etlprocessclothingstore_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = ETLProcessClothingStore.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				try {
					// defaultProps is in order to keep the original context value
					if (context != null && context.isEmpty()) {
						defaultProps.load(inContext);
						context = new ContextProperties(defaultProps);
					}
				} finally {
					inContext.close();
				}
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tDBInput_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_1) {
			globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

			e_tDBInput_1.printStackTrace();

		}
		try {
			errorCode = null;
			tDBInput_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_2) {
			globalMap.put("tDBInput_2_SUBPROCESS_STATE", -1);

			e_tDBInput_2.printStackTrace();

		}
		try {
			errorCode = null;
			tDBInput_3Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_3) {
			globalMap.put("tDBInput_3_SUBPROCESS_STATE", -1);

			e_tDBInput_3.printStackTrace();

		}
		try {
			errorCode = null;
			tDBInput_9Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_9) {
			globalMap.put("tDBInput_9_SUBPROCESS_STATE", -1);

			e_tDBInput_9.printStackTrace();

		}
		try {
			errorCode = null;
			tDBInput_15Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_15) {
			globalMap.put("tDBInput_15_SUBPROCESS_STATE", -1);

			e_tDBInput_15.printStackTrace();

		}
		try {
			errorCode = null;
			tDBInput_18Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_18) {
			globalMap.put("tDBInput_18_SUBPROCESS_STATE", -1);

			e_tDBInput_18.printStackTrace();

		}
		try {
			errorCode = null;
			tFileInputExcel_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputExcel_1) {
			globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", -1);

			e_tFileInputExcel_1.printStackTrace();

		}
		try {
			errorCode = null;
			tFileInputExcel_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputExcel_2) {
			globalMap.put("tFileInputExcel_2_SUBPROCESS_STATE", -1);

			e_tFileInputExcel_2.printStackTrace();

		}
		try {
			errorCode = null;
			tFileInputJSON_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputJSON_1) {
			globalMap.put("tFileInputJSON_1_SUBPROCESS_STATE", -1);

			e_tFileInputJSON_1.printStackTrace();

		}
		try {
			errorCode = null;
			tFileInputJSON_3Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputJSON_3) {
			globalMap.put("tFileInputJSON_3_SUBPROCESS_STATE", -1);

			e_tFileInputJSON_3.printStackTrace();

		}
		try {
			errorCode = null;
			tFileInputJSON_5Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputJSON_5) {
			globalMap.put("tFileInputJSON_5_SUBPROCESS_STATE", -1);

			e_tFileInputJSON_5.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : ETLProcessClothingStore");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;

		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 1006852 characters generated by Talend Open Studio for Data Integration on
 * the July 7, 2025 at 9:23:37 AM IST
 ************************************************************************************************/